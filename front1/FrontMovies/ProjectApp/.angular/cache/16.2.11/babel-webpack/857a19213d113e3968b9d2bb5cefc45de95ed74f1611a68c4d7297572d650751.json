{"ast":null,"code":"import { environment } from 'src/env/env';\nimport { HttpHeaders } from '@angular/common/http';\nimport { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AccommodationService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  create(accommodation) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    return this.httpClient.post(environment.apiHost + 'accommodations', JSON.stringify(accommodation), {\n      headers: headers\n    });\n  }\n  getAll() {\n    return this.httpClient.get(environment.apiHost + 'accommodations');\n  }\n  getAllApproved() {\n    return this.httpClient.get(environment.apiHost + 'accommodations/approved');\n  }\n  getById(id) {\n    return this.httpClient.get(environment.apiHost + 'accommodations/' + id);\n  }\n  search(params) {\n    console.log(params);\n    return this.httpClient.get(environment.apiHost + 'accommodations/search', {\n      params\n    });\n  }\n  filter(params) {\n    return this.httpClient.get(environment.apiHost + 'accommodations/filter', {\n      params\n    });\n  }\n  getByStatus(status) {\n    return this.httpClient.get(environment.apiHost + 'accommodations/status/' + status);\n  }\n  update(updatedAccommodation, id) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    return this.httpClient.put(environment.apiHost + 'accommodations/' + id, JSON.stringify(updatedAccommodation), {\n      headers: headers\n    });\n  }\n  updateStatus(id, status) {\n    const params = new HttpParams().set('status', status);\n    const apiUrl = `${environment.apiHost}accommodations/${id}/update-status`;\n    return this.httpClient.put(apiUrl, null, {\n      params\n    });\n  }\n  updateImages(accommodationId, images) {\n    const params = new HttpParams().set('image', images);\n    const apiUrl = `${environment.apiHost}accommodations/${accommodationId}/update-images`;\n    return this.httpClient.put(apiUrl, null, {\n      params\n    });\n  }\n  delete(id) {\n    return this.httpClient.delete(environment.apiHost + 'accommodations/' + id);\n  }\n  getByOwnerId(ownerId) {\n    return this.httpClient.get(`${environment.apiHost}accommodations/owner/${ownerId}`);\n  }\n  static #_ = this.ɵfac = function AccommodationService_Factory(t) {\n    return new (t || AccommodationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccommodationService,\n    factory: AccommodationService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["environment","HttpHeaders","HttpParams","AccommodationService","constructor","httpClient","create","accommodation","headers","post","apiHost","JSON","stringify","getAll","get","getAllApproved","getById","id","search","params","console","log","filter","getByStatus","status","update","updatedAccommodation","put","updateStatus","set","apiUrl","updateImages","accommodationId","images","delete","getByOwnerId","ownerId","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\USER\\Desktop\\Front-end\\ProjectApp\\src\\app\\accommodation\\accommodation.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {HttpClient} from \"@angular/common/http\";\r\nimport { environment } from 'src/env/env';\r\nimport {Observable} from \"rxjs\";\r\nimport { AccommodationPostDTO } from '../models/dtos/accommodationPostDTO.model';\r\nimport { AccommodationPutDTO } from '../models/dtos/accommodationPutDTO.model';\r\nimport { Accommodation } from './accommodation/model/accommodation.model';\r\nimport { HttpHeaders } from '@angular/common/http';\r\nimport { AccommodationStatusEnum } from '../models/enums/accommodationStatusEnum';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { AccommodationDetails } from './accommodation/model/accommodationDetails.model';\r\nimport { formatDate } from '@angular/common';\r\nimport { AccommodationTypeEnum } from '../models/enums/accommodationTypeEnum';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AccommodationService {\r\n  constructor(private httpClient: HttpClient) {\r\n  }\r\n\r\n  create(accommodation: AccommodationPostDTO): Observable<Accommodation> {\r\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n    return this.httpClient.post<Accommodation>(\r\n      environment.apiHost + 'accommodations',\r\n      JSON.stringify(accommodation),\r\n      { headers: headers }\r\n    );\r\n  }\r\n  getAll():Observable<Accommodation[]>{\r\n    return this.httpClient.get<Accommodation[]>(environment.apiHost+'accommodations');\r\n  }\r\n  getAllApproved():Observable<Accommodation[]>{\r\n    return this.httpClient.get<Accommodation[]>(environment.apiHost+'accommodations/approved');\r\n  }\r\n  getById(id: number): Observable<Accommodation | undefined> {\r\n    return this.httpClient.get<Accommodation>(environment.apiHost + 'accommodations/' + id);\r\n  }\r\n  search(params: HttpParams):Observable<AccommodationDetails[]>{\r\n    console.log(params);\r\n    return this.httpClient.get<AccommodationDetails[]>(environment.apiHost+'accommodations/search',{params});\r\n  }\r\n  filter(params: HttpParams): Observable<AccommodationDetails[]> {\r\n    return this.httpClient.get<AccommodationDetails[]>(environment.apiHost + 'accommodations/filter', { params });\r\n  }\r\n  getByStatus(status: AccommodationStatusEnum): Observable<Accommodation[] | undefined> {\r\n    return this.httpClient.get<Accommodation[]>(environment.apiHost + 'accommodations/status/' + status);\r\n  }\r\n\r\n  update(updatedAccommodation: AccommodationPutDTO, id: number): Observable<AccommodationPutDTO> {\r\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n    return this.httpClient.put<AccommodationPutDTO>(\r\n      environment.apiHost + 'accommodations/' + id,\r\n      JSON.stringify(updatedAccommodation),\r\n      { headers: headers }\r\n    );\r\n  }\r\n  \r\n  updateStatus(id: number, status: AccommodationStatusEnum): Observable<Accommodation> {\r\n    const params = new HttpParams().set('status', status);\r\n    const apiUrl = `${environment.apiHost}accommodations/${id}/update-status`;\r\n    return this.httpClient.put<Accommodation>(apiUrl, null, { params });\r\n  }\r\n\r\n  updateImages(accommodationId: number, images: string): Observable<Accommodation> {\r\n    const params = new HttpParams().set('image', images);\r\n    const apiUrl = `${environment.apiHost}accommodations/${accommodationId}/update-images`;\r\n\r\n    return this.httpClient.put<Accommodation>(apiUrl, null, { params });\r\n  }\r\n\r\n  delete(id: number): Observable<Accommodation | undefined> {\r\n    return this.httpClient.delete<Accommodation>(environment.apiHost + 'accommodations/' + id);\r\n  }\r\n  getByOwnerId(ownerId: string): Observable<Accommodation | undefined> {\r\n    return this.httpClient.get<Accommodation>(\r\n      `${environment.apiHost}accommodations/owner/${ownerId}`\r\n    );\r\n  }\r\n\r\n}\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}