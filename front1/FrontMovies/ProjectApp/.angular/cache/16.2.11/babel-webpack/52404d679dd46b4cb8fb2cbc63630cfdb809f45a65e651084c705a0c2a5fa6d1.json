{"ast":null,"code":"import { FormControl, Validators, FormsModule, ReactiveFormsModule, FormGroup } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { CommonModule } from '@angular/common';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/user.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/material/form-field\";\nimport * as i4 from \"@angular/material/input\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"@angular/material/icon\";\nimport * as i7 from \"@angular/material/button\";\nimport * as i8 from \"@angular/common\";\nimport * as i9 from \"@angular/material/datepicker\";\nfunction RegisterFormComponent_div_42_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtext(1, \" Passwords do not match.\\n\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterFormComponent_div_43_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtext(1, \" Input data are not valid!\\n\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class RegisterFormComponent {\n  constructor(cdr, userService, router) {\n    this.cdr = cdr;\n    this.userService = userService;\n    this.router = router;\n    this.color = 'primary'; // Theme color for slide toggles\n    this.checked = false; // Default checked state for slide toggles\n    this.disabled = false; // Default disabled state for slide toggles\n    this.hide = true; // Hide/show password toggle\n    this.passwordMatchValidator = control => {\n      const password = control.get('password')?.value;\n      const confirmPassword = control.get('confirmPassword')?.value;\n      return password === confirmPassword ? null : {\n        passwordMismatch: true\n      };\n    };\n    // Form group definition with form controls and initial state\n    this.createRegisterForm = new FormGroup({\n      name: new FormControl('', Validators.required),\n      surname: new FormControl('', Validators.required),\n      username: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', Validators.required),\n      confirmPassword: new FormControl('', Validators.required),\n      birthdate: new FormControl('', Validators.required)\n    });\n  }\n  // Method to navigate to home page\n  navigateToHome() {\n    this.router.navigate(['home']);\n  }\n  // Method to handle registration\n  register() {\n    // Enable button indicator or loader\n    // this.button_enabled = true; // You can uncomment this if you have this logic\n    // Constructing UserPostDTO object from form values\n    const user = {\n      firstName: this.createRegisterForm.value.name,\n      lastName: this.createRegisterForm.value.surname,\n      username: this.createRegisterForm.value.username,\n      password: this.createRegisterForm.value.password,\n      birthdate: this.createRegisterForm.value.birthdate?.toString().slice(0, 10),\n      email: this.createRegisterForm.value.username\n    };\n    // Calling the service method to register the user\n    this.userService.registerUser(user).subscribe({\n      next: data => {\n        // Successful registration navigation logic\n        console.log('User registered successfully:', data);\n        this.navigateToHome(); // Example navigation to home page after registration\n      },\n\n      error: error => {\n        // Error handling logic, if needed\n        console.error('Error occurred during registration:', error);\n        // Handle error feedback to the user, e.g., display error message\n      }\n    });\n  }\n  // // Method to handle slide toggle change for request notification\n  // onSlideToggleChangeRequestNotification(event: MatSlideToggleChange) {\n  //   this.createRegisterForm.patchValue({ requestNotification: event.checked });\n  // }\n  // // Method to handle slide toggle change for cancellation notification\n  // onSlideToggleChangeCancellationNotification(event: MatSlideToggleChange) {\n  //   this.createRegisterForm.patchValue({ cancellationNotification: event.checked });\n  // }\n  // // Method to handle slide toggle change for owner rating notification\n  // onSlideToggleChangeOwnerRatingNotification(event: MatSlideToggleChange) {\n  //   this.createRegisterForm.patchValue({ ownerRatingNotification: event.checked });\n  // }\n  // // Method to handle slide toggle change for accommodation rating notification\n  // onSlideToggleChangeAccommodationRatingNotification(event: MatSlideToggleChange) {\n  //   this.createRegisterForm.patchValue({ accommodationRatingNotification: event.checked });\n  // }\n  // // Method to handle slide toggle change for owner replied notification\n  // onSlideToggleChangeOwnerRepliedRequestNotification(event: MatSlideToggleChange) {\n  //   this.createRegisterForm.patchValue({ ownerRepliedNotification: event.checked });\n  // }\n  // // Method to handle role selection change\n  // onRoleSelectionChange(event: MatSelectChange) {\n  //   // Example implementation based on selected role\n  //   const selectedRole = event.value;\n  //   if (selectedRole === 'ADMIN') {\n  //     // Disable certain notifications for ADMIN role\n  //     this.createRegisterForm.get('requestNotification')?.disable();\n  //     this.createRegisterForm.get('cancellationNotification')?.disable();\n  //     this.createRegisterForm.get('ownerRatingNotification')?.disable();\n  //     this.createRegisterForm.get('accommodationRatingNotification')?.disable();\n  //     this.createRegisterForm.get('ownerRepliedNotification')?.disable();\n  //   } else if (selectedRole === 'GUEST') {\n  //     // Enable specific notifications for GUEST role\n  //     this.createRegisterForm.get('requestNotification')?.disable();\n  //     this.createRegisterForm.get('cancellationNotification')?.disable();\n  //     this.createRegisterForm.get('ownerRatingNotification')?.disable();\n  //     this.createRegisterForm.get('accommodationRatingNotification')?.disable();\n  //     this.createRegisterForm.get('ownerRepliedNotification')?.enable();\n  //   } else if (selectedRole === 'OWNER') {\n  //     // Enable certain notifications for OWNER role\n  //     this.createRegisterForm.get('requestNotification')?.enable();\n  //     this.createRegisterForm.get('cancellationNotification')?.enable();\n  //     this.createRegisterForm.get('ownerRatingNotification')?.enable();\n  //     this.createRegisterForm.get('accommodationRatingNotification')?.enable();\n  //     this.createRegisterForm.get('ownerRepliedNotification')?.disable();\n  //   }\n  // }\n  // // // Custom validator function for matching passwords\n  // // passwordMatchValidator():boolean | null {\n  // //   const password = this.createRegisterForm.get('password')?.value;\n  // //   const confirmPassword = this.createRegisterForm.get('confirmPassword')?.value;\n  // //   return password === confirmPassword ? null : { passwordMismatch: true };\n  // // }\n  // Getter for form validity check\n  get isFormValid() {\n    return this.createRegisterForm.valid;\n  }\n  static #_ = this.ɵfac = function RegisterFormComponent_Factory(t) {\n    return new (t || RegisterFormComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.UserService), i0.ɵɵdirectiveInject(i2.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RegisterFormComponent,\n    selectors: [[\"app-register-form\"]],\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 44,\n    vars: 14,\n    consts: [[1, \"example-container\"], [1, \"register-header\"], [1, \"example-container\", 3, \"formGroup\", \"ngSubmit\"], [1, \"other-fields\"], [\"matInput\", \"\", \"name\", \"name\", \"placeholder\", \"First Name\", \"formControlName\", \"name\", \"required\", \"\"], [\"matInput\", \"\", \"name\", \"surname\", \"placeholder\", \"Last Name\", \"formControlName\", \"surname\", \"required\", \"\"], [\"aclass\", \"other-fields\"], [\"matInput\", \"\", \"placeholder\", \"Username (Email)\", \"name\", \"username\", \"formControlName\", \"username\", \"required\", \"\"], [\"matSuffix\", \"\"], [\"matInput\", \"\", \"name\", \"password\", \"formControlName\", \"password\", \"required\", \"\", 3, \"type\"], [\"mat-icon-button\", \"\", \"matSuffix\", \"\", 3, \"click\"], [\"matInput\", \"\", \"formControlName\", \"confirmPassword\", \"name\", \"confirmPassword\", \"required\", \"\", 3, \"type\"], [\"matInput\", \"\", \"placeholder\", \"YYYY-MM-DD\", \"name\", \"birthdate\", \"formControlName\", \"birthdate\", \"required\", \"\", 3, \"matDatepicker\"], [\"matSuffix\", \"\", 3, \"for\"], [\"picker\", \"\"], [1, \"example-button-row\"], [\"id\", \"button\", \"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"disabled\", \"click\"], [1, \"icon\"], [\"class\", \"error-message\", 4, \"ngIf\"], [1, \"error-message\"]],\n    template: function RegisterFormComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\", 1);\n        i0.ɵɵtext(2, \"Register\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 2);\n        i0.ɵɵlistener(\"ngSubmit\", function RegisterFormComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.register();\n        });\n        i0.ɵɵelementStart(4, \"mat-form-field\", 3)(5, \"mat-label\");\n        i0.ɵɵtext(6, \"Enter your name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"mat-form-field\", 3)(9, \"mat-label\");\n        i0.ɵɵtext(10, \"Enter your surname\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"input\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"mat-form-field\", 6);\n        i0.ɵɵelement(13, \"input\", 7);\n        i0.ɵɵelementStart(14, \"mat-icon\", 8);\n        i0.ɵɵtext(15, \"email\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(16, \"mat-form-field\", 3)(17, \"mat-label\");\n        i0.ɵɵtext(18, \"Enter your password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(19, \"input\", 9);\n        i0.ɵɵelementStart(20, \"button\", 10);\n        i0.ɵɵlistener(\"click\", function RegisterFormComponent_Template_button_click_20_listener() {\n          return ctx.hide = !ctx.hide;\n        });\n        i0.ɵɵelementStart(21, \"mat-icon\");\n        i0.ɵɵtext(22);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(23, \"mat-form-field\", 3)(24, \"mat-label\");\n        i0.ɵɵtext(25, \"Confirm your password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(26, \"input\", 11);\n        i0.ɵɵelementStart(27, \"button\", 10);\n        i0.ɵɵlistener(\"click\", function RegisterFormComponent_Template_button_click_27_listener() {\n          return ctx.hide = !ctx.hide;\n        });\n        i0.ɵɵelementStart(28, \"mat-icon\");\n        i0.ɵɵtext(29);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(30, \"mat-form-field\", 3)(31, \"mat-label\");\n        i0.ɵɵtext(32, \"Enter your birthdate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(33, \"input\", 12)(34, \"mat-datepicker-toggle\", 13)(35, \"mat-datepicker\", null, 14);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(37, \"div\", 15)(38, \"button\", 16);\n        i0.ɵɵlistener(\"click\", function RegisterFormComponent_Template_button_click_38_listener() {\n          return ctx.register();\n        });\n        i0.ɵɵtext(39, \" Register \");\n        i0.ɵɵelementStart(40, \"mat-icon\", 17);\n        i0.ɵɵtext(41, \"how_to_reg\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(42, RegisterFormComponent_div_42_Template, 2, 0, \"div\", 18);\n        i0.ɵɵtemplate(43, RegisterFormComponent_div_43_Template, 2, 0, \"div\", 18);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(36);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.createRegisterForm);\n        i0.ɵɵadvance(16);\n        i0.ɵɵproperty(\"type\", ctx.hide ? \"password\" : \"text\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"aria-label\", \"Hide password\")(\"aria-pressed\", ctx.hide.toString());\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.hide ? \"visibility_off\" : \"visibility\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"type\", ctx.hide ? \"password\" : \"text\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"aria-label\", \"Hide password\")(\"aria-pressed\", ctx.hide.toString());\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.hide ? \"visibility_off\" : \"visibility\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"matDatepicker\", _r0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"for\", _r0);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"disabled\", !ctx.createRegisterForm.valid);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.createRegisterForm.hasError(\"passwordMismatch\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isFormValid);\n      }\n    },\n    dependencies: [MatFormFieldModule, i3.MatFormField, i3.MatLabel, i3.MatSuffix, MatInputModule, i4.MatInput, FormsModule, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.RequiredValidator, ReactiveFormsModule, i5.FormGroupDirective, i5.FormControlName, MatIconModule, i6.MatIcon, MatButtonModule, i7.MatButton, i7.MatIconButton, MatSelectModule, MatSlideToggleModule, CommonModule, i8.NgIf, MatDatepickerModule, i9.MatDatepicker, i9.MatDatepickerInput, i9.MatDatepickerToggle],\n    styles: [\".example-container[_ngcontent-%COMP%]   mat-form-field[_ngcontent-%COMP%]    + mat-form-field[_ngcontent-%COMP%] {\\n    margin-left: 8px;\\n  }\\n\\n  .example-container[_ngcontent-%COMP%] {\\n    display: flex;\\n    margin-top: 30px;\\n    flex-direction: column;\\n    align-items: center;\\n  }\\n \\n  .mat-form-field[_ngcontent-%COMP%] {\\n    width: 300px;\\n    margin-bottom: 16px; \\n  }\\n  .other-fields[_ngcontent-%COMP%]{\\n    width: 250px;\\n  }\\n\\n  .register-header[_ngcontent-%COMP%] {\\n    color: #007bff; \\n    font-size: 24px;\\n    margin-bottom: 20px;\\n  }\\n  .example-button-row[_ngcontent-%COMP%] {\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    justify-content: center;\\n    margin-top: 10px; \\n  }\\n\\n  .slide-toggle-container[_ngcontent-%COMP%] {\\n    display: flex;\\n    flex-direction: column;\\n    margin-top: 10px;\\n    gap: 10px; \\n    margin-left: 100px;\\n    margin-bottom: 20px;\\n  }\\n\\n  .error-message[_ngcontent-%COMP%] {\\n    color: red;\\n    margin-top: 15px;\\n  }\\n  \\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcmVnaXN0ZXIvcmVnaXN0ZXItZm9ybS9yZWdpc3Rlci1mb3JtLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxnQkFBZ0I7RUFDbEI7O0VBRUE7SUFDRSxhQUFhO0lBQ2IsZ0JBQWdCO0lBQ2hCLHNCQUFzQjtJQUN0QixtQkFBbUI7RUFDckI7O0VBRUE7SUFDRSxZQUFZO0lBQ1osbUJBQW1CO0VBQ3JCO0VBQ0E7SUFDRSxZQUFZO0VBQ2Q7O0VBRUE7SUFDRSxjQUFjO0lBQ2QsZUFBZTtJQUNmLG1CQUFtQjtFQUNyQjtFQUNBO0lBQ0UsYUFBYTtJQUNiLHNCQUFzQjtJQUN0QixtQkFBbUI7SUFDbkIsdUJBQXVCO0lBQ3ZCLGdCQUFnQjtFQUNsQjs7RUFFQTtJQUNFLGFBQWE7SUFDYixzQkFBc0I7SUFDdEIsZ0JBQWdCO0lBQ2hCLFNBQVM7SUFDVCxrQkFBa0I7SUFDbEIsbUJBQW1CO0VBQ3JCOztFQUVBO0lBQ0UsVUFBVTtJQUNWLGdCQUFnQjtFQUNsQiIsInNvdXJjZXNDb250ZW50IjpbIi5leGFtcGxlLWNvbnRhaW5lciBtYXQtZm9ybS1maWVsZCArIG1hdC1mb3JtLWZpZWxkIHtcclxuICAgIG1hcmdpbi1sZWZ0OiA4cHg7XHJcbiAgfVxyXG5cclxuICAuZXhhbXBsZS1jb250YWluZXIge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIG1hcmdpbi10b3A6IDMwcHg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICB9XHJcbiBcclxuICAubWF0LWZvcm0tZmllbGQge1xyXG4gICAgd2lkdGg6IDMwMHB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMTZweDsgXHJcbiAgfVxyXG4gIC5vdGhlci1maWVsZHN7XHJcbiAgICB3aWR0aDogMjUwcHg7XHJcbiAgfVxyXG5cclxuICAucmVnaXN0ZXItaGVhZGVyIHtcclxuICAgIGNvbG9yOiAjMDA3YmZmOyBcclxuICAgIGZvbnQtc2l6ZTogMjRweDtcclxuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XHJcbiAgfVxyXG4gIC5leGFtcGxlLWJ1dHRvbi1yb3cge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHB4OyBcclxuICB9XHJcblxyXG4gIC5zbGlkZS10b2dnbGUtY29udGFpbmVyIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxuICAgIGdhcDogMTBweDsgXHJcbiAgICBtYXJnaW4tbGVmdDogMTAwcHg7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xyXG4gIH1cclxuXHJcbiAgLmVycm9yLW1lc3NhZ2Uge1xyXG4gICAgY29sb3I6IHJlZDtcclxuICAgIG1hcmdpbi10b3A6IDE1cHg7XHJcbiAgfVxyXG4gICJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"names":["FormControl","Validators","FormsModule","ReactiveFormsModule","FormGroup","MatInputModule","MatFormFieldModule","MatIconModule","MatButtonModule","MatSelectModule","MatSlideToggleModule","CommonModule","MatDatepickerModule","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","RegisterFormComponent","constructor","cdr","userService","router","color","checked","disabled","hide","passwordMatchValidator","control","password","get","value","confirmPassword","passwordMismatch","createRegisterForm","name","required","surname","username","email","birthdate","navigateToHome","navigate","register","user","firstName","lastName","toString","slice","registerUser","subscribe","next","data","console","log","error","isFormValid","valid","_","ɵɵdirectiveInject","ChangeDetectorRef","i1","UserService","i2","Router","_2","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","RegisterFormComponent_Template","rf","ctx","ɵɵlistener","RegisterFormComponent_Template_form_ngSubmit_3_listener","ɵɵelement","RegisterFormComponent_Template_button_click_20_listener","RegisterFormComponent_Template_button_click_27_listener","RegisterFormComponent_Template_button_click_38_listener","ɵɵtemplate","RegisterFormComponent_div_42_Template","RegisterFormComponent_div_43_Template","ɵɵadvance","ɵɵproperty","ɵɵattribute","ɵɵtextInterpolate","_r0","hasError","i3","MatFormField","MatLabel","MatSuffix","i4","MatInput","i5","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","RequiredValidator","FormGroupDirective","FormControlName","i6","MatIcon","i7","MatButton","MatIconButton","i8","NgIf","i9","MatDatepicker","MatDatepickerInput","MatDatepickerToggle","styles"],"sources":["C:\\Users\\USER\\Desktop\\CloudMovies\\front\\FrontMovies\\ProjectApp\\src\\app\\register\\register-form\\register-form.component.ts","C:\\Users\\USER\\Desktop\\CloudMovies\\front\\FrontMovies\\ProjectApp\\src\\app\\register\\register-form\\register-form.component.html"],"sourcesContent":["\r\nimport { ChangeDetectorRef, Component } from '@angular/core';\r\nimport {FormControl, Validators, FormsModule, ReactiveFormsModule, FormGroup, FormBuilder, AbstractControl, ValidationErrors} from '@angular/forms';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { Router } from '@angular/router';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatSelectChange, MatSelectModule} from '@angular/material/select';\r\nimport { User } from 'src/app/models/user.model';\r\nimport { UserService } from 'src/app/user.service';\r\nimport { UserPostDTO } from 'src/app/models/userPostDTO.model';\r\nimport { RoleEnum } from 'src/app/models/userEnums.model';\r\nimport {MatSlideToggleChange, MatSlideToggleModule} from '@angular/material/slide-toggle';\r\nimport { MatOptionSelectionChange, ThemePalette } from '@angular/material/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatDatepicker, MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatDatepickerActions } from '@angular/material/datepicker';\r\n\r\n\r\n@Component({\r\n  selector: 'app-register-form',\r\n  templateUrl: './register-form.component.html',\r\n  styleUrls: ['./register-form.component.css'],\r\n  standalone: true,\r\n    imports: [MatFormFieldModule, MatInputModule, FormsModule, ReactiveFormsModule,MatIconModule,MatButtonModule,MatSelectModule,\r\n      MatSlideToggleModule,CommonModule,MatDatepickerModule]\r\n})\r\nexport class RegisterFormComponent {\r\n\r\n  color: string = 'primary'; // Theme color for slide toggles\r\n  checked: boolean = false; // Default checked state for slide toggles\r\n  disabled: boolean = false; // Default disabled state for slide toggles\r\n  hide: boolean = true; // Hide/show password toggle\r\n\r\n  \r\n   passwordMatchValidator: Validators = (control: AbstractControl): ValidationErrors | null => {\r\n    const password = control.get('password')?.value;\r\n    const confirmPassword = control.get('confirmPassword')?.value;\r\n  \r\n    return password === confirmPassword ? null : { passwordMismatch: true };\r\n  };\r\n\r\n  // Form group definition with form controls and initial state\r\n  createRegisterForm = new FormGroup({\r\n    name: new FormControl('', Validators.required),\r\n    surname: new FormControl('', Validators.required),\r\n    username: new FormControl('', [Validators.required, Validators.email]),\r\n    password: new FormControl('', Validators.required),\r\n    confirmPassword: new FormControl('', Validators.required),\r\n    birthdate: new FormControl('', Validators.required),\r\n   \r\n  });\r\n\r\n  constructor(private cdr: ChangeDetectorRef, private userService: UserService, private router: Router) { }\r\n\r\n  // Method to navigate to home page\r\n  navigateToHome() {\r\n    this.router.navigate(['home']);\r\n  }\r\n\r\n  // Method to handle registration\r\n  register() {\r\n    // Enable button indicator or loader\r\n    // this.button_enabled = true; // You can uncomment this if you have this logic\r\n\r\n    // Constructing UserPostDTO object from form values\r\n    const user: UserPostDTO = {\r\n      firstName: this.createRegisterForm.value.name,\r\n      lastName: this.createRegisterForm.value.surname,\r\n      username: this.createRegisterForm.value.username,\r\n      password: this.createRegisterForm.value.password,\r\n     \r\n      birthdate: this.createRegisterForm.value.birthdate?.toString().slice(0, 10),\r\n      \r\n      email: this.createRegisterForm.value.username\r\n      \r\n    };\r\n\r\n    // Calling the service method to register the user\r\n    this.userService.registerUser(user).subscribe({\r\n      next: (data: UserPostDTO) => {\r\n        // Successful registration navigation logic\r\n        console.log('User registered successfully:', data);\r\n        this.navigateToHome(); // Example navigation to home page after registration\r\n      },\r\n      error: (error) => {\r\n        // Error handling logic, if needed\r\n        console.error('Error occurred during registration:', error);\r\n        // Handle error feedback to the user, e.g., display error message\r\n      }\r\n    });\r\n\r\n  \r\n  }\r\n\r\n  // // Method to handle slide toggle change for request notification\r\n  // onSlideToggleChangeRequestNotification(event: MatSlideToggleChange) {\r\n  //   this.createRegisterForm.patchValue({ requestNotification: event.checked });\r\n  // }\r\n\r\n  // // Method to handle slide toggle change for cancellation notification\r\n  // onSlideToggleChangeCancellationNotification(event: MatSlideToggleChange) {\r\n  //   this.createRegisterForm.patchValue({ cancellationNotification: event.checked });\r\n  // }\r\n\r\n  // // Method to handle slide toggle change for owner rating notification\r\n  // onSlideToggleChangeOwnerRatingNotification(event: MatSlideToggleChange) {\r\n  //   this.createRegisterForm.patchValue({ ownerRatingNotification: event.checked });\r\n  // }\r\n\r\n  // // Method to handle slide toggle change for accommodation rating notification\r\n  // onSlideToggleChangeAccommodationRatingNotification(event: MatSlideToggleChange) {\r\n  //   this.createRegisterForm.patchValue({ accommodationRatingNotification: event.checked });\r\n  // }\r\n\r\n  // // Method to handle slide toggle change for owner replied notification\r\n  // onSlideToggleChangeOwnerRepliedRequestNotification(event: MatSlideToggleChange) {\r\n  //   this.createRegisterForm.patchValue({ ownerRepliedNotification: event.checked });\r\n  // }\r\n\r\n  // // Method to handle role selection change\r\n  // onRoleSelectionChange(event: MatSelectChange) {\r\n  //   // Example implementation based on selected role\r\n  //   const selectedRole = event.value;\r\n  //   if (selectedRole === 'ADMIN') {\r\n  //     // Disable certain notifications for ADMIN role\r\n  //     this.createRegisterForm.get('requestNotification')?.disable();\r\n  //     this.createRegisterForm.get('cancellationNotification')?.disable();\r\n  //     this.createRegisterForm.get('ownerRatingNotification')?.disable();\r\n  //     this.createRegisterForm.get('accommodationRatingNotification')?.disable();\r\n  //     this.createRegisterForm.get('ownerRepliedNotification')?.disable();\r\n  //   } else if (selectedRole === 'GUEST') {\r\n  //     // Enable specific notifications for GUEST role\r\n  //     this.createRegisterForm.get('requestNotification')?.disable();\r\n  //     this.createRegisterForm.get('cancellationNotification')?.disable();\r\n  //     this.createRegisterForm.get('ownerRatingNotification')?.disable();\r\n  //     this.createRegisterForm.get('accommodationRatingNotification')?.disable();\r\n  //     this.createRegisterForm.get('ownerRepliedNotification')?.enable();\r\n  //   } else if (selectedRole === 'OWNER') {\r\n  //     // Enable certain notifications for OWNER role\r\n  //     this.createRegisterForm.get('requestNotification')?.enable();\r\n  //     this.createRegisterForm.get('cancellationNotification')?.enable();\r\n  //     this.createRegisterForm.get('ownerRatingNotification')?.enable();\r\n  //     this.createRegisterForm.get('accommodationRatingNotification')?.enable();\r\n  //     this.createRegisterForm.get('ownerRepliedNotification')?.disable();\r\n  //   }\r\n  // }\r\n\r\n  // // // Custom validator function for matching passwords\r\n  // // passwordMatchValidator():boolean | null {\r\n  // //   const password = this.createRegisterForm.get('password')?.value;\r\n  // //   const confirmPassword = this.createRegisterForm.get('confirmPassword')?.value;\r\n\r\n  // //   return password === confirmPassword ? null : { passwordMismatch: true };\r\n  // // }\r\n\r\n\r\n  // Getter for form validity check\r\n  get isFormValid(): boolean {\r\n    return this.createRegisterForm.valid;\r\n  }\r\n}\r\n","\r\n<div class=\"example-container\">\r\n    <h2 class=\"register-header\">Register</h2>\r\n    \r\n    <form [formGroup]=\"createRegisterForm\" class=\"example-container\" (ngSubmit)=\"register()\">\r\n\r\n    <mat-form-field class=\"other-fields\">\r\n        <mat-label>Enter your name</mat-label>\r\n        <input matInput name=\"name\" placeholder=\"First Name\" formControlName=\"name\"   required>\r\n        <!-- <mat-error *ngIf=\"createRegisterForm.get('name')?.hasError('required')\">Name is required</mat-error> -->\r\n        \r\n      </mat-form-field>\r\n\r\n      <mat-form-field class=\"other-fields\">\r\n        <mat-label>Enter your surname</mat-label>\r\n        <input matInput name=\"surname\" placeholder=\"Last Name\"  formControlName=\"surname\" required>\r\n        <!-- <mat-error *ngIf=\"createRegisterForm.get('surname')?.hasError('required')\">Surname is required</mat-error> -->\r\n      </mat-form-field>\r\n\r\n      \r\n      <mat-form-field aclass=\"other-fields\">\r\n        <input matInput placeholder=\"Username (Email)\"  name=\"username\" formControlName=\"username\" required>\r\n        <!-- <mat-error *ngIf=\"createRegisterForm.get('username')?.hasError('required')\">Email is required</mat-error>\r\n        <mat-error *ngIf=\"createRegisterForm.get('username')?.hasError('pattern')\">Invalid email format</mat-error> -->\r\n        <mat-icon matSuffix>email</mat-icon>\r\n      </mat-form-field>\r\n\r\n\r\n    <mat-form-field class=\"other-fields\">\r\n        <mat-label>Enter your password</mat-label>\r\n        <input matInput name=\"password\" [type]=\"hide ? 'password' : 'text'\" formControlName=\"password\" required>\r\n        <!-- <mat-error *ngIf=\"createRegisterForm.get('password')?.hasError('required')\"  id=\"errorPassword\">Password is required</mat-error> -->\r\n        <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hide.toString()\">\r\n          <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n        </button>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field class=\"other-fields\">\r\n        <mat-label>Confirm your password</mat-label>\r\n        <input matInput [type]=\"hide ? 'password' : 'text'\" formControlName=\"confirmPassword\" name=\"confirmPassword\" required>\r\n        <!-- <mat-error data-error-type=\"password-error\"  id=\"errorPassword\" *ngIf=\"createRegisterForm.get('confirmPassword')?.hasError('required')\">Confirm Password is required</mat-error>\r\n        <mat-error *ngIf=\"createRegisterForm?.hasError('passwordMismatch')\" #errorConfirmationPassword>Passwords do not match</mat-error>\r\n         -->\r\n        <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hide.toString()\">\r\n          <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n        </button>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field class=\"other-fields\">\r\n        <mat-label>Enter your birthdate</mat-label>\r\n        <input matInput [matDatepicker]=\"picker\" placeholder=\"YYYY-MM-DD\" name=\"birthdate\" formControlName=\"birthdate\" required>\r\n        <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n        <mat-datepicker #picker></mat-datepicker>\r\n    </mat-form-field>\r\n    \r\n<!-- \r\n      <mat-form-field class=\"other-fields\">\r\n        <mat-label>Role</mat-label>\r\n        <mat-select id=\"role\" name=\"role\" formControlName=\"role\" (selectionChange)=\"onRoleSelectionChange($event)\">\r\n          <mat-option id=\"admin\" class=\"admin\" value=\"ADMIN\">Admin</mat-option>\r\n          <mat-option id=\"owner\" class=\"owner\" value=\"OWNER\">Owner</mat-option>\r\n          <mat-option id=\"guest\" class=\"guest\" value=\"GUEST\">Guest</mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n<div class=\"slide-toggle-container \">\r\n      <mat-slide-toggle formControlName=\"requestNotification\"\r\n      class=\"example-margin\"\r\n      [color]=\"color\"\r\n      [checked]=\"checked\"\r\n      [disabled]=\"disabled\"\r\n      (change)=\"onSlideToggleChangeRequestNotification($event)\">\r\n    Reservation Request Notification On!\r\n  </mat-slide-toggle>\r\n\r\n  <mat-slide-toggle formControlName=\"cancellationNotification\"\r\n      class=\"example-margin\"\r\n      [color]=\"color\"\r\n      [checked]=\"checked\"\r\n      [disabled]=\"disabled\"\r\n      (change)=\"onSlideToggleChangeCancellationNotification($event)\">\r\n      Reservation Cancellation Notification On!\r\n  </mat-slide-toggle>\r\n\r\n  \r\n  <mat-slide-toggle formControlName=\"ownerRatingNotification\"\r\n      class=\"example-margin\"\r\n      [color]=\"color\"\r\n      [checked]=\"checked\"\r\n      [disabled]=\"disabled\"\r\n      (change)=\"onSlideToggleChangeOwnerRatingNotification($event)\">\r\n      Owner Rating  Notification On!\r\n  </mat-slide-toggle>\r\n\r\n    <mat-slide-toggle formControlName=\"accommodationRatingNotification\"\r\n    class=\"example-margin\"\r\n    [color]=\"color\"\r\n    [checked]=\"checked\"\r\n    [disabled]=\"disabled\"\r\n    (change)=\"onSlideToggleChangeAccommodationRatingNotification($event)\">   \r\n  Accommodation Rating Notification On!\r\n  </mat-slide-toggle>\r\n    \r\n\r\n  <mat-slide-toggle formControlName=\"ownerRepliedNotification\"\r\n  class=\"example-margin\"\r\n  [color]=\"color\"\r\n  [checked]=\"checked\"\r\n  [disabled]=\"disabled\"\r\n  (change)=\"onSlideToggleChangeOwnerRepliedRequestNotification($event)\">   \r\n  Owner Replied To Reservation Request Notification On!\r\n  </mat-slide-toggle> -->\r\n\r\n  \r\n    </form>\r\n\r\n      <div class=\"example-button-row\">\r\n        <button (click)=\"register()\" id=\"button\" mat-raised-button color=\"primary\" [disabled]=\"!createRegisterForm.valid\">\r\n          Register\r\n          <mat-icon class=\"icon\">how_to_reg</mat-icon>\r\n        </button>\r\n      </div>\r\n\r\n      \r\n<div *ngIf=\"createRegisterForm.hasError('passwordMismatch')\" class=\"error-message\">\r\n  Passwords do not match.\r\n</div>\r\n\r\n<div *ngIf=\"!isFormValid\" class=\"error-message\">\r\n  Input data are not valid!\r\n</div>\r\n  \r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}