{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { environment } from \"src/env/env\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ReservationService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  create(reservation) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    return this.httpClient.post(environment.apiHost + 'reservations', JSON.stringify(reservation), {\n      headers: headers\n    });\n  }\n  getAll() {\n    return this.httpClient.get(environment.apiHost + 'reservations');\n  }\n  getById(id) {\n    return this.httpClient.get(environment.apiHost + 'reservations/' + id);\n  }\n  getByAccommodationId(id) {\n    return this.httpClient.get(environment.apiHost + 'reservations/accommodation/' + id);\n  }\n  searchFilter(params) {\n    console.log(params);\n    return this.httpClient.get(environment.apiHost + 'reservations/searchFilter', {\n      params\n    });\n  }\n  update(updatedReservation, id) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    return this.httpClient.put(environment.apiHost + 'reservations/' + id, JSON.stringify(updatedReservation), {\n      headers: headers\n    });\n  }\n  delete(id) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    return this.httpClient.delete(`${environment.apiHost}reservations/${id}`, {\n      headers: headers\n    });\n  }\n  confirmReservation(reservationId) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    return this.httpClient.put(environment.apiHost + 'reservations/confirm/' + reservationId, {\n      headers: headers\n    });\n  }\n  rejectReservation(reservationId) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    return this.httpClient.put(environment.apiHost + 'reservations/reject/' + reservationId, {\n      headers: headers\n    });\n  }\n  getByGuestId(username) {\n    return this.httpClient.get(environment.apiHost + 'reservations/user/' + username);\n  }\n  cancelReservation(reservationId) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    return this.httpClient.put(environment.apiHost + 'reservations/cancel/' + reservationId, {\n      headers: headers\n    });\n  }\n  static #_ = this.ɵfac = function ReservationService_Factory(t) {\n    return new (t || ReservationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ReservationService,\n    factory: ReservationService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","environment","ReservationService","constructor","httpClient","create","reservation","headers","post","apiHost","JSON","stringify","getAll","get","getById","id","getByAccommodationId","searchFilter","params","console","log","update","updatedReservation","put","delete","confirmReservation","reservationId","rejectReservation","getByGuestId","username","cancelReservation","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\USER\\Desktop\\CloudMovies\\front\\FrontMovies\\ProjectApp\\src\\app\\models\\reservation\\reservation.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { environment } from \"src/env/env\";\r\nimport { ReservationPostDTO } from \"../dtos/reservationPostDTO.model\";\r\nimport { Reservation } from \"./reservation.model\";\r\nimport { ReservationPutDTO } from \"../dtos/reservationPutDTO.model\";\r\n\r\n@Injectable({\r\n    providedIn:'root'\r\n})\r\nexport class ReservationService{\r\n    constructor(private httpClient: HttpClient){\r\n\r\n    }\r\n\r\n    create(reservation: ReservationPostDTO): Observable<Reservation>{\r\n        const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n        return this.httpClient.post<Reservation>(\r\n            environment.apiHost+'reservations',\r\n            JSON.stringify(reservation),\r\n            {headers: headers}\r\n        );\r\n    }\r\n    getAll():Observable<Reservation[] | undefined>{\r\n        return this.httpClient.get<Reservation[]>(environment.apiHost+'reservations');\r\n    }\r\n    getById(id: number): Observable<Reservation | undefined>{\r\n        return this.httpClient.get<Reservation>(\r\n            environment.apiHost+'reservations/'+id);\r\n    }\r\n\r\n    getByAccommodationId(id: number): Observable<Reservation[] | undefined>{\r\n        return this.httpClient.get<Reservation[]>(\r\n            environment.apiHost+'reservations/accommodation/'+id);\r\n    }\r\n    searchFilter(params:HttpParams):Observable<Reservation[]>{\r\n        console.log(params)\r\n        return this.httpClient.get<Reservation[]>(environment.apiHost+'reservations/searchFilter',{params});\r\n    }\r\n    update(updatedReservation:ReservationPutDTO, id:number):Observable<ReservationPutDTO>{\r\n        const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n        return this.httpClient.put<ReservationPutDTO>(\r\n            environment.apiHost+'reservations/'+id,\r\n            JSON.stringify(updatedReservation),\r\n            {headers: headers}\r\n        );\r\n    }\r\n    delete(id: number): Observable<void> {\r\n        const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n    \r\n        return this.httpClient.delete<void>(\r\n          `${environment.apiHost}reservations/${id}`,\r\n          { headers: headers }\r\n        );\r\n      }\r\n      \r\n    confirmReservation(reservationId: number|undefined): Observable<void> {\r\n        const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n\r\n        return this.httpClient.put<void>(\r\n            environment.apiHost +'reservations/confirm/' + reservationId,\r\n            { headers: headers }\r\n        );\r\n    }\r\n\r\n    rejectReservation(reservationId: number|undefined): Observable<void> {\r\n        const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n\r\n        return this.httpClient.put<void>(\r\n            environment.apiHost +'reservations/reject/' + reservationId,\r\n            { headers: headers }\r\n        );\r\n    }\r\n\r\n    getByGuestId(username: String): Observable<Reservation[] | undefined>{\r\n        return this.httpClient.get<Reservation[]>(\r\n            environment.apiHost+'reservations/user/'+username);\r\n    }\r\n\r\n    cancelReservation(reservationId: number|undefined): Observable<void> {\r\n        const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n\r\n        return this.httpClient.put<void>(\r\n            environment.apiHost +'reservations/cancel/' + reservationId,\r\n            { headers: headers }\r\n        );\r\n    }\r\n}"],"mappings":"AAAA,SAAqBA,WAAW,QAAoB,sBAAsB;AAG1E,SAASC,WAAW,QAAQ,aAAa;;;AAQzC,OAAM,MAAOC,kBAAkB;EAC3BC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;EAE9B;EAEAC,MAAMA,CAACC,WAA+B;IAClC,MAAMC,OAAO,GAAG,IAAIP,WAAW,CAAC;MAAE,cAAc,EAAE;IAAkB,CAAE,CAAC;IACvE,OAAO,IAAI,CAACI,UAAU,CAACI,IAAI,CACvBP,WAAW,CAACQ,OAAO,GAAC,cAAc,EAClCC,IAAI,CAACC,SAAS,CAACL,WAAW,CAAC,EAC3B;MAACC,OAAO,EAAEA;IAAO,CAAC,CACrB;EACL;EACAK,MAAMA,CAAA;IACF,OAAO,IAAI,CAACR,UAAU,CAACS,GAAG,CAAgBZ,WAAW,CAACQ,OAAO,GAAC,cAAc,CAAC;EACjF;EACAK,OAAOA,CAACC,EAAU;IACd,OAAO,IAAI,CAACX,UAAU,CAACS,GAAG,CACtBZ,WAAW,CAACQ,OAAO,GAAC,eAAe,GAACM,EAAE,CAAC;EAC/C;EAEAC,oBAAoBA,CAACD,EAAU;IAC3B,OAAO,IAAI,CAACX,UAAU,CAACS,GAAG,CACtBZ,WAAW,CAACQ,OAAO,GAAC,6BAA6B,GAACM,EAAE,CAAC;EAC7D;EACAE,YAAYA,CAACC,MAAiB;IAC1BC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;IACnB,OAAO,IAAI,CAACd,UAAU,CAACS,GAAG,CAAgBZ,WAAW,CAACQ,OAAO,GAAC,2BAA2B,EAAC;MAACS;IAAM,CAAC,CAAC;EACvG;EACAG,MAAMA,CAACC,kBAAoC,EAAEP,EAAS;IAClD,MAAMR,OAAO,GAAG,IAAIP,WAAW,CAAC;MAAE,cAAc,EAAE;IAAkB,CAAE,CAAC;IACvE,OAAO,IAAI,CAACI,UAAU,CAACmB,GAAG,CACtBtB,WAAW,CAACQ,OAAO,GAAC,eAAe,GAACM,EAAE,EACtCL,IAAI,CAACC,SAAS,CAACW,kBAAkB,CAAC,EAClC;MAACf,OAAO,EAAEA;IAAO,CAAC,CACrB;EACL;EACAiB,MAAMA,CAACT,EAAU;IACb,MAAMR,OAAO,GAAG,IAAIP,WAAW,CAAC;MAAE,cAAc,EAAE;IAAkB,CAAE,CAAC;IAEvE,OAAO,IAAI,CAACI,UAAU,CAACoB,MAAM,CAC3B,GAAGvB,WAAW,CAACQ,OAAO,gBAAgBM,EAAE,EAAE,EAC1C;MAAER,OAAO,EAAEA;IAAO,CAAE,CACrB;EACH;EAEFkB,kBAAkBA,CAACC,aAA+B;IAC9C,MAAMnB,OAAO,GAAG,IAAIP,WAAW,CAAC;MAAE,cAAc,EAAE;IAAkB,CAAE,CAAC;IAEvE,OAAO,IAAI,CAACI,UAAU,CAACmB,GAAG,CACtBtB,WAAW,CAACQ,OAAO,GAAE,uBAAuB,GAAGiB,aAAa,EAC5D;MAAEnB,OAAO,EAAEA;IAAO,CAAE,CACvB;EACL;EAEAoB,iBAAiBA,CAACD,aAA+B;IAC7C,MAAMnB,OAAO,GAAG,IAAIP,WAAW,CAAC;MAAE,cAAc,EAAE;IAAkB,CAAE,CAAC;IAEvE,OAAO,IAAI,CAACI,UAAU,CAACmB,GAAG,CACtBtB,WAAW,CAACQ,OAAO,GAAE,sBAAsB,GAAGiB,aAAa,EAC3D;MAAEnB,OAAO,EAAEA;IAAO,CAAE,CACvB;EACL;EAEAqB,YAAYA,CAACC,QAAgB;IACzB,OAAO,IAAI,CAACzB,UAAU,CAACS,GAAG,CACtBZ,WAAW,CAACQ,OAAO,GAAC,oBAAoB,GAACoB,QAAQ,CAAC;EAC1D;EAEAC,iBAAiBA,CAACJ,aAA+B;IAC7C,MAAMnB,OAAO,GAAG,IAAIP,WAAW,CAAC;MAAE,cAAc,EAAE;IAAkB,CAAE,CAAC;IAEvE,OAAO,IAAI,CAACI,UAAU,CAACmB,GAAG,CACtBtB,WAAW,CAACQ,OAAO,GAAE,sBAAsB,GAAGiB,aAAa,EAC3D;MAAEnB,OAAO,EAAEA;IAAO,CAAE,CACvB;EACL;EAAC,QAAAwB,CAAA,G;qBA5EQ7B,kBAAkB,EAAA8B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAlBlC,kBAAkB;IAAAmC,OAAA,EAAlBnC,kBAAkB,CAAAoC,IAAA;IAAAC,UAAA,EAFhB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}