{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { UserService } from './user.service';\nimport { RoleEnum, StatusEnum } from './models/userEnums.model';\nimport { environment } from 'src/env/env';\nimport { UserServiceMock } from './mocks/user.mock.service';\ndescribe('UserService', () => {\n  let userService;\n  let httpTestingController;\n  let userServiceMock;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [UserService, UserServiceMock]\n    });\n    userService = TestBed.inject(UserService);\n    httpTestingController = TestBed.inject(HttpTestingController);\n    userServiceMock = TestBed.inject(UserServiceMock);\n  });\n  afterEach(() => {\n    httpTestingController.verify();\n  });\n  it('should be created', () => {\n    expect(userService).toBeTruthy();\n  });\n  it('should update user', () => {\n    const username = 'testuser';\n    const userPutDTO = {\n      firstName: 'UpdatedFirstName',\n      lastName: 'UpdatedLastName',\n      password: 'UpdatedPassword',\n      passwordConfirmation: 'UpdatedPassword',\n      address: 'UpdatedAddress',\n      phoneNumber: 'UpdatedPhoneNumber',\n      status: StatusEnum.ACTIVE,\n      reservationRequestNotification: true,\n      reservationCancellationNotification: false,\n      ownerRatingNotification: true,\n      accommodationRatingNotification: false,\n      ownerRepliedToRequestNotification: true,\n      deleted: false,\n      token: 'UpdatedToken',\n      favouriteAccommodations: 'acc1,acc2'\n    };\n    const mockUpdatedUser = {\n      firstName: 'UpdatedFirstName',\n      lastName: 'UpdatedLastName',\n      username: 'UpdatedUsername',\n      password: 'UpdatedPassword',\n      role: RoleEnum.ADMIN,\n      address: 'UpdatedAddress',\n      phoneNumber: 'UpdatedPhoneNumber',\n      status: StatusEnum.ACTIVE,\n      reservationRequestNotification: true,\n      reservationCancellationNotification: false,\n      ownerRatingNotification: true,\n      accommodationRatingNotification: false,\n      ownerRepliedToRequestNotification: true,\n      deleted: false,\n      token: 'UpdatedToken',\n      jwt: 'UpdatedJwt',\n      favouriteAccommodations: 'acc1,acc2'\n    };\n    spyOn(userServiceMock, 'getUsers').and.returnValue([mockUpdatedUser]);\n    userService.update(userPutDTO, username).subscribe(updatedUser => {\n      expect(updatedUser).toEqual(mockUpdatedUser);\n    });\n    const req = httpTestingController.expectOne(`${environment.apiHost}users/${username}`);\n    expect(req.request.method).toEqual('PUT');\n    req.flush(mockUpdatedUser);\n  });\n  it('should get user by username', () => {\n    const username = 'testuser';\n    const mockUser = userServiceMock.getUsers()[0];\n    userService.getById(username).subscribe(user => {\n      expect(user).toEqual(mockUser);\n    });\n    const req = httpTestingController.expectOne(`${environment.apiHost}users/username/${username}`);\n    expect(req.request.method).toEqual('GET');\n    req.flush(mockUser);\n  });\n  // it('should activate account', () => {\n  //   const token = 'testToken';\n  //   userService.activateAccount(token).subscribe(response => {\n  //     expect(response).toEqual('success'); // Assuming your server returns 'success' upon activation\n  //   });\n  //   const req = httpTestingController.expectOne(`${environment.apiHost}users/activate/${token}`);\n  //   expect(req.request.method).toEqual('PUT');\n  //   req.flush('success');\n  // });\n  it('should create user', () => {\n    const newUserPost = {\n      firstName: 'FirstName',\n      lastName: 'LastName',\n      username: 'Username',\n      password: 'Password',\n      role: RoleEnum.OWNER,\n      address: 'Address',\n      phoneNumber: 'PhoneNumber',\n      reservationRequestNotification: true,\n      reservationCancellationNotification: false,\n      ownerRatingNotification: true,\n      accommodationRatingNotification: false,\n      ownerRepliedToRequestNotification: true,\n      deleted: false,\n      passwordConfirmation: 'Password'\n    };\n    const createdUserPost = {\n      ...newUserPost\n    };\n    userService.create(newUserPost).subscribe(createdUser => {\n      expect(createdUser).toEqual(createdUserPost);\n    });\n    const req = httpTestingController.expectOne(`${environment.apiHost}users`);\n    expect(req.request.method).toEqual('POST');\n    req.flush(createdUserPost);\n  });\n});","map":{"version":3,"names":["TestBed","HttpClientTestingModule","HttpTestingController","UserService","RoleEnum","StatusEnum","environment","UserServiceMock","describe","userService","httpTestingController","userServiceMock","beforeEach","configureTestingModule","imports","providers","inject","afterEach","verify","it","expect","toBeTruthy","username","userPutDTO","firstName","lastName","password","passwordConfirmation","address","phoneNumber","status","ACTIVE","reservationRequestNotification","reservationCancellationNotification","ownerRatingNotification","accommodationRatingNotification","ownerRepliedToRequestNotification","deleted","token","favouriteAccommodations","mockUpdatedUser","role","ADMIN","jwt","spyOn","and","returnValue","update","subscribe","updatedUser","toEqual","req","expectOne","apiHost","request","method","flush","mockUser","getUsers","getById","user","newUserPost","OWNER","createdUserPost","create","createdUser"],"sources":["C:\\Users\\USER\\Desktop\\Front-end\\ProjectApp\\src\\app\\user.service.spec.ts"],"sourcesContent":["import { TestBed, inject } from '@angular/core/testing';\r\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\r\nimport { UserService } from './user.service';\r\nimport { RoleEnum, StatusEnum } from './models/userEnums.model';\r\nimport { UserPutDTO } from './models/userPutDTO.model';\r\nimport { environment } from 'src/env/env';\r\nimport { UserServiceMock } from './mocks/user.mock.service';\r\nimport { User } from './models/user.model';\r\nimport { UserPostDTO } from './models/userPostDTO.model';\r\n\r\ndescribe('UserService', () => {\r\n  let userService: UserService;\r\n  let httpTestingController: HttpTestingController;\r\n  let userServiceMock: UserServiceMock; \r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [HttpClientTestingModule],\r\n      providers: [\r\n        UserService,\r\n        UserServiceMock\r\n      ]\r\n    });\r\n\r\n    userService = TestBed.inject(UserService);\r\n    httpTestingController = TestBed.inject(HttpTestingController);\r\n    userServiceMock = TestBed.inject(UserServiceMock);  \r\n  });\r\n\r\n  afterEach(() => {\r\n    httpTestingController.verify();\r\n  });\r\n\r\n  it('should be created', () => {\r\n    expect(userService).toBeTruthy();\r\n  });\r\n\r\n  it('should update user', () => {\r\n    const username = 'testuser';\r\n    const userPutDTO: UserPutDTO = {\r\n        firstName: 'UpdatedFirstName',\r\n        lastName: 'UpdatedLastName',\r\n        password: 'UpdatedPassword',\r\n        passwordConfirmation: 'UpdatedPassword',\r\n        address: 'UpdatedAddress',\r\n        phoneNumber: 'UpdatedPhoneNumber',\r\n        status: StatusEnum.ACTIVE, \r\n        reservationRequestNotification: true,\r\n        reservationCancellationNotification: false,\r\n        ownerRatingNotification: true,\r\n        accommodationRatingNotification: false,\r\n        ownerRepliedToRequestNotification: true,\r\n        deleted: false,\r\n        token: 'UpdatedToken',\r\n        favouriteAccommodations: 'acc1,acc2',\r\n      };\r\n      \r\n      const mockUpdatedUser: User = {\r\n        firstName: 'UpdatedFirstName',\r\n        lastName: 'UpdatedLastName',\r\n        username: 'UpdatedUsername',\r\n        password: 'UpdatedPassword',\r\n        role: RoleEnum.ADMIN,\r\n        address: 'UpdatedAddress',\r\n        phoneNumber: 'UpdatedPhoneNumber',\r\n        status: StatusEnum.ACTIVE,\r\n        reservationRequestNotification: true,\r\n        reservationCancellationNotification: false,\r\n        ownerRatingNotification: true,\r\n        accommodationRatingNotification: false,\r\n        ownerRepliedToRequestNotification: true,\r\n        deleted: false,\r\n        token: 'UpdatedToken',\r\n        jwt: 'UpdatedJwt',\r\n        favouriteAccommodations: 'acc1,acc2',\r\n      };\r\n      \r\n\r\n    spyOn(userServiceMock, 'getUsers').and.returnValue([mockUpdatedUser]);\r\n\r\n    userService.update(userPutDTO, username).subscribe(updatedUser => {\r\n      expect(updatedUser).toEqual(mockUpdatedUser);\r\n    });\r\n\r\n    const req = httpTestingController.expectOne(`${environment.apiHost}users/${username}`);\r\n    expect(req.request.method).toEqual('PUT');\r\n    req.flush(mockUpdatedUser);\r\n  });\r\n\r\n  it('should get user by username', () => {\r\n    const username = 'testuser';\r\n    const mockUser = userServiceMock.getUsers()[0];\r\n\r\n    userService.getById(username).subscribe(user => {\r\n      expect(user).toEqual(mockUser);\r\n    });\r\n\r\n    const req = httpTestingController.expectOne(`${environment.apiHost}users/username/${username}`);\r\n    expect(req.request.method).toEqual('GET');\r\n    req.flush(mockUser);\r\n  });\r\n\r\n  // it('should activate account', () => {\r\n  //   const token = 'testToken';\r\n\r\n  //   userService.activateAccount(token).subscribe(response => {\r\n  //     expect(response).toEqual('success'); // Assuming your server returns 'success' upon activation\r\n  //   });\r\n\r\n  //   const req = httpTestingController.expectOne(`${environment.apiHost}users/activate/${token}`);\r\n  //   expect(req.request.method).toEqual('PUT');\r\n  //   req.flush('success');\r\n  // });\r\n\r\n  it('should create user', () => {\r\n    const newUserPost: UserPostDTO = {\r\n      firstName: 'FirstName',\r\n      lastName: 'LastName',\r\n      username: 'Username',\r\n      password: 'Password',\r\n      role: RoleEnum.OWNER,\r\n      address: 'Address',\r\n      phoneNumber: 'PhoneNumber',\r\n      reservationRequestNotification: true,\r\n      reservationCancellationNotification: false,\r\n      ownerRatingNotification: true,\r\n      accommodationRatingNotification: false,\r\n      ownerRepliedToRequestNotification: true,\r\n      deleted: false,\r\n      passwordConfirmation: 'Password'\r\n    };\r\n  \r\n    const createdUserPost: UserPostDTO = {\r\n      ...newUserPost,\r\n    };\r\n  \r\n    userService.create(newUserPost).subscribe(createdUser => {\r\n      expect(createdUser).toEqual(createdUserPost);\r\n    });\r\n  \r\n    const req = httpTestingController.expectOne(`${environment.apiHost}users`);\r\n    expect(req.request.method).toEqual('POST');\r\n    req.flush(createdUserPost);\r\n  });\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}