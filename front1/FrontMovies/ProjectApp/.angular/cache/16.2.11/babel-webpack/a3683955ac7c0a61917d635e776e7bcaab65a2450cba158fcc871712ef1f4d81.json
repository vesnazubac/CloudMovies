{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { RoleEnum } from '../models/userEnums.model';\nimport { StatusEnum } from '../models/userEnums.model';\nexport let UserServiceMock = class UserServiceMock {\n  constructor() {}\n  getUsers() {\n    return [{\n      firstName: 'user1',\n      lastName: 'usersurname1',\n      username: 'testuser',\n      password: 'password1',\n      role: RoleEnum.GUEST,\n      address: 'address1',\n      phoneNumber: '123456789',\n      status: StatusEnum.ACTIVE,\n      reservationRequestNotification: true,\n      reservationCancellationNotification: false,\n      ownerRatingNotification: true,\n      accommodationRatingNotification: false,\n      ownerRepliedToRequestNotification: true,\n      deleted: false,\n      token: 'token1',\n      jwt: 'jwt1',\n      favouriteAccommodations: 'acc1,acc2'\n    }];\n  }\n  static #_ = this.ctorParameters = () => [];\n};\nUserServiceMock = __decorate([Injectable()], UserServiceMock);","map":{"version":3,"names":["Injectable","RoleEnum","StatusEnum","UserServiceMock","constructor","getUsers","firstName","lastName","username","password","role","GUEST","address","phoneNumber","status","ACTIVE","reservationRequestNotification","reservationCancellationNotification","ownerRatingNotification","accommodationRatingNotification","ownerRepliedToRequestNotification","deleted","token","jwt","favouriteAccommodations","_","__decorate"],"sources":["C:\\Users\\USER\\Desktop\\Front-end\\ProjectApp\\src\\app\\mocks\\user.mock.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { RoleEnum } from '../models/userEnums.model';\r\nimport { StatusEnum} from '../models/userEnums.model';\r\nimport { User } from '../models/user.model';\r\n\r\n@Injectable()\r\nexport class UserServiceMock {\r\n  constructor() { }\r\n\r\n  getUsers(): Array<User> {\r\n      return [\r\n          {\r\n              firstName: 'user1',\r\n              lastName: 'usersurname1',\r\n              username: 'testuser',\r\n              password: 'password1',\r\n              role: RoleEnum.GUEST,\r\n              address: 'address1',\r\n              phoneNumber: '123456789',\r\n              status: StatusEnum.ACTIVE,\r\n              reservationRequestNotification: true,\r\n              reservationCancellationNotification: false,\r\n              ownerRatingNotification: true,\r\n              accommodationRatingNotification: false,\r\n              ownerRepliedToRequestNotification: true,\r\n              deleted: false,\r\n              token: 'token1',\r\n              jwt: 'jwt1',\r\n              favouriteAccommodations: 'acc1,acc2'\r\n          }\r\n      ];\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,QAAQ,QAAQ,2BAA2B;AACpD,SAASC,UAAU,QAAO,2BAA2B;AAI9C,WAAMC,eAAe,GAArB,MAAMA,eAAe;EAC1BC,YAAA,GAAgB;EAEhBC,QAAQA,CAAA;IACJ,OAAO,CACH;MACIC,SAAS,EAAE,OAAO;MAClBC,QAAQ,EAAE,cAAc;MACxBC,QAAQ,EAAE,UAAU;MACpBC,QAAQ,EAAE,WAAW;MACrBC,IAAI,EAAET,QAAQ,CAACU,KAAK;MACpBC,OAAO,EAAE,UAAU;MACnBC,WAAW,EAAE,WAAW;MACxBC,MAAM,EAAEZ,UAAU,CAACa,MAAM;MACzBC,8BAA8B,EAAE,IAAI;MACpCC,mCAAmC,EAAE,KAAK;MAC1CC,uBAAuB,EAAE,IAAI;MAC7BC,+BAA+B,EAAE,KAAK;MACtCC,iCAAiC,EAAE,IAAI;MACvCC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,QAAQ;MACfC,GAAG,EAAE,MAAM;MACXC,uBAAuB,EAAE;KAC5B,CACJ;EACL;EAAC,QAAAC,CAAA,G;;AAzBUtB,eAAe,GAAAuB,UAAA,EAD3B1B,UAAU,EAAE,C,EACAG,eAAe,CA0B3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}