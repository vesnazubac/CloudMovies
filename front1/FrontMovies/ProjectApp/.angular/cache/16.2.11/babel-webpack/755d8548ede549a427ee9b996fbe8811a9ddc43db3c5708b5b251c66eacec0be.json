{"ast":null,"code":"import * as Stomp from 'stompjs';\nimport * as SockJS from 'sockjs-client';\nimport { environment } from 'src/env/env';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./socket.service\";\nimport * as i2 from \"@angular/material/snack-bar\";\nexport class SocketApiService {\n  constructor(socketService, snackBar) {\n    this.socketService = socketService;\n    this.snackBar = snackBar;\n    this.serverUrl = environment.apiHost + 'socket';\n    this.stompSubject = new BehaviorSubject(null);\n    this.isLoaded = false;\n    this.isCustomSocketOpened = false;\n    this.messages = [];\n    this.initializeWebSocketConnection();\n  }\n  initializeWebSocketConnection() {\n    // serverUrl je vrednost koju smo definisali u registerStompEndpoints() metodi na serveru\n    let ws = new SockJS(this.serverUrl);\n    this.stompClient = Stomp.over(ws);\n    let that = this;\n    this.stompClient.connect({}, function () {\n      that.isLoaded = true;\n      that.openGlobalSocket();\n    });\n  }\n  sendUserIdOnLogin(userId) {\n    this.stompClient.send(\"/send/userId\", {}, JSON.stringify({\n      userId\n    }));\n  }\n  sendMessageUsingSocket(message) {\n    this.stompClient.send(\"/socket-subscriber/send/message\", {}, JSON.stringify(message));\n    console.log('Notification sent:', message);\n  }\n  sendMessageUsingRest(message) {\n    this.socketService.postRest(message).subscribe(res => {});\n  }\n  openGlobalSocket() {\n    if (this.isLoaded) {\n      this.stompClient.subscribe(\"/socket-publisher\", message => {\n        this.handleResult(message);\n      });\n    }\n  }\n  openSocket(username) {\n    if (this.isLoaded) {\n      this.isCustomSocketOpened = true;\n      this.stompClient.subscribe(\"/socket-publisher/\" + username, message => {\n        this.handleResult(message);\n      });\n    }\n  }\n  handleResult(message) {\n    console.log(\"HANDLE RESULTT\");\n    if (message.body) {\n      let messageResult = JSON.parse(message.body);\n      console.log(\"MESSAGE : \" + message);\n      this.messages.push(messageResult);\n      this.openSnackBar('New message received : ' + messageResult.content, 'Dismiss');\n    }\n  }\n  openSnackBar(message, action) {\n    this.snackBar.open(message, action, {\n      duration: 10000\n    });\n  }\n  getStompClient() {\n    return this.stompClient;\n  }\n  static #_ = this.ɵfac = function SocketApiService_Factory(t) {\n    return new (t || SocketApiService)(i0.ɵɵinject(i1.SocketService), i0.ɵɵinject(i2.MatSnackBar));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SocketApiService,\n    factory: SocketApiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Stomp","SockJS","environment","BehaviorSubject","SocketApiService","constructor","socketService","snackBar","serverUrl","apiHost","stompSubject","isLoaded","isCustomSocketOpened","messages","initializeWebSocketConnection","ws","stompClient","over","that","connect","openGlobalSocket","sendUserIdOnLogin","userId","send","JSON","stringify","sendMessageUsingSocket","message","console","log","sendMessageUsingRest","postRest","subscribe","res","handleResult","openSocket","username","body","messageResult","parse","push","openSnackBar","content","action","open","duration","getStompClient","_","i0","ɵɵinject","i1","SocketService","i2","MatSnackBar","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\USER\\Desktop\\CloudMovies\\front\\FrontMovies\\ProjectApp\\src\\app\\models\\socketApiService.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { Client } from 'stompjs';\r\nimport * as Stomp from 'stompjs';\r\nimport * as SockJS from 'sockjs-client';\r\nimport { environment } from 'src/env/env';\r\nimport { Message } from './message.model';\r\nimport { SocketService } from './socket.service';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SocketApiService {\r\n  private serverUrl = environment.apiHost + 'socket';\r\n  private stompClient: any;\r\n  \r\n  private stompSubject = new BehaviorSubject<any>(null);\r\n  private username:string\r\n\r\n\r\n  isLoaded: boolean = false;\r\n  isCustomSocketOpened = false;\r\n  messages: Message[] = [];\r\n\r\n  constructor(private socketService: SocketService, private snackBar: MatSnackBar) {    \r\n    this.initializeWebSocketConnection();\r\n  }\r\n\r\n\r\n  initializeWebSocketConnection() {\r\n    // serverUrl je vrednost koju smo definisali u registerStompEndpoints() metodi na serveru\r\n    let ws = new SockJS(this.serverUrl);\r\n    this.stompClient = Stomp.over(ws);\r\n    let that = this;\r\n\r\n    this.stompClient.connect({}, function () {\r\n      that.isLoaded = true;\r\n      that.openGlobalSocket()\r\n    });\r\n\r\n  }\r\n\r\n  sendUserIdOnLogin(userId: string) {\r\n    this.stompClient.send(\"/send/userId\", {}, JSON.stringify({ userId }));\r\n  }\r\n  \r\n\r\n  sendMessageUsingSocket(message: Message) {\r\n      this.stompClient.send(\"/socket-subscriber/send/message\", {}, JSON.stringify(message));\r\n      console.log('Notification sent:', message);\r\n  }\r\n\r\n  sendMessageUsingRest(message: Message) {\r\n      this.socketService.postRest(message).subscribe(res => {\r\n      });\r\n    \r\n  }\r\n\r\n  openGlobalSocket() {\r\n    if (this.isLoaded) {\r\n      this.stompClient.subscribe(\"/socket-publisher\", (message: { body: string }) => {\r\n        this.handleResult(message);\r\n      });\r\n    }\r\n  }\r\n  openSocket(username:String) {\r\n    if (this.isLoaded) {\r\n      this.isCustomSocketOpened = true;\r\n      this.stompClient.subscribe(\"/socket-publisher/\" + username, (message: { body: string; }) => {\r\n        this.handleResult(message);\r\n      });\r\n    }\r\n  }\r\n\r\n  handleResult(message: { body: string; }) {\r\n    console.log(\"HANDLE RESULTT\")\r\n    if (message.body) {\r\n      let messageResult: Message = JSON.parse(message.body);\r\n      console.log(\"MESSAGE : \"+message)\r\n      this.messages.push(messageResult);\r\n      this.openSnackBar('New message received : '+messageResult.content, 'Dismiss');\r\n    }\r\n  }\r\n\r\n  openSnackBar(message: string, action: string) {\r\n    this.snackBar.open(message, action, {\r\n      duration: 10000, \r\n    });\r\n  }\r\n\r\n\r\ngetStompClient(): BehaviorSubject<any> {\r\n  return this.stompClient;\r\n}\r\n\r\n}"],"mappings":"AAGA,OAAO,KAAKA,KAAK,MAAM,SAAS;AAChC,OAAO,KAAKC,MAAM,MAAM,eAAe;AACvC,SAASC,WAAW,QAAQ,aAAa;AAGzC,SAASC,eAAe,QAAoB,MAAM;;;;AAOlD,OAAM,MAAOC,gBAAgB;EAY3BC,YAAoBC,aAA4B,EAAUC,QAAqB;IAA3D,KAAAD,aAAa,GAAbA,aAAa;IAAyB,KAAAC,QAAQ,GAARA,QAAQ;IAX1D,KAAAC,SAAS,GAAGN,WAAW,CAACO,OAAO,GAAG,QAAQ;IAG1C,KAAAC,YAAY,GAAG,IAAIP,eAAe,CAAM,IAAI,CAAC;IAIrD,KAAAQ,QAAQ,GAAY,KAAK;IACzB,KAAAC,oBAAoB,GAAG,KAAK;IAC5B,KAAAC,QAAQ,GAAc,EAAE;IAGtB,IAAI,CAACC,6BAA6B,EAAE;EACtC;EAGAA,6BAA6BA,CAAA;IAC3B;IACA,IAAIC,EAAE,GAAG,IAAId,MAAM,CAAC,IAAI,CAACO,SAAS,CAAC;IACnC,IAAI,CAACQ,WAAW,GAAGhB,KAAK,CAACiB,IAAI,CAACF,EAAE,CAAC;IACjC,IAAIG,IAAI,GAAG,IAAI;IAEf,IAAI,CAACF,WAAW,CAACG,OAAO,CAAC,EAAE,EAAE;MAC3BD,IAAI,CAACP,QAAQ,GAAG,IAAI;MACpBO,IAAI,CAACE,gBAAgB,EAAE;IACzB,CAAC,CAAC;EAEJ;EAEAC,iBAAiBA,CAACC,MAAc;IAC9B,IAAI,CAACN,WAAW,CAACO,IAAI,CAAC,cAAc,EAAE,EAAE,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEH;IAAM,CAAE,CAAC,CAAC;EACvE;EAGAI,sBAAsBA,CAACC,OAAgB;IACnC,IAAI,CAACX,WAAW,CAACO,IAAI,CAAC,iCAAiC,EAAE,EAAE,EAAEC,IAAI,CAACC,SAAS,CAACE,OAAO,CAAC,CAAC;IACrFC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,OAAO,CAAC;EAC9C;EAEAG,oBAAoBA,CAACH,OAAgB;IACjC,IAAI,CAACrB,aAAa,CAACyB,QAAQ,CAACJ,OAAO,CAAC,CAACK,SAAS,CAACC,GAAG,IAAG,CACrD,CAAC,CAAC;EAEN;EAEAb,gBAAgBA,CAAA;IACd,IAAI,IAAI,CAACT,QAAQ,EAAE;MACjB,IAAI,CAACK,WAAW,CAACgB,SAAS,CAAC,mBAAmB,EAAGL,OAAyB,IAAI;QAC5E,IAAI,CAACO,YAAY,CAACP,OAAO,CAAC;MAC5B,CAAC,CAAC;;EAEN;EACAQ,UAAUA,CAACC,QAAe;IACxB,IAAI,IAAI,CAACzB,QAAQ,EAAE;MACjB,IAAI,CAACC,oBAAoB,GAAG,IAAI;MAChC,IAAI,CAACI,WAAW,CAACgB,SAAS,CAAC,oBAAoB,GAAGI,QAAQ,EAAGT,OAA0B,IAAI;QACzF,IAAI,CAACO,YAAY,CAACP,OAAO,CAAC;MAC5B,CAAC,CAAC;;EAEN;EAEAO,YAAYA,CAACP,OAA0B;IACrCC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAC7B,IAAIF,OAAO,CAACU,IAAI,EAAE;MAChB,IAAIC,aAAa,GAAYd,IAAI,CAACe,KAAK,CAACZ,OAAO,CAACU,IAAI,CAAC;MACrDT,OAAO,CAACC,GAAG,CAAC,YAAY,GAACF,OAAO,CAAC;MACjC,IAAI,CAACd,QAAQ,CAAC2B,IAAI,CAACF,aAAa,CAAC;MACjC,IAAI,CAACG,YAAY,CAAC,yBAAyB,GAACH,aAAa,CAACI,OAAO,EAAE,SAAS,CAAC;;EAEjF;EAEAD,YAAYA,CAACd,OAAe,EAAEgB,MAAc;IAC1C,IAAI,CAACpC,QAAQ,CAACqC,IAAI,CAACjB,OAAO,EAAEgB,MAAM,EAAE;MAClCE,QAAQ,EAAE;KACX,CAAC;EACJ;EAGFC,cAAcA,CAAA;IACZ,OAAO,IAAI,CAAC9B,WAAW;EACzB;EAAC,QAAA+B,CAAA,G;qBAjFY3C,gBAAgB,EAAA4C,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,aAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAhBlD,gBAAgB;IAAAmD,OAAA,EAAhBnD,gBAAgB,CAAAoD,IAAA;IAAAC,UAAA,EAFf;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}