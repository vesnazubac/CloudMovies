{"ast":null,"code":"import { environment } from 'src/env/env';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AccommodationRequestService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  getAll() {\n    return this.httpClient.get(environment.apiHost + 'accommodationsRequests');\n  }\n  getById(id) {\n    return this.httpClient.get(environment.apiHost + 'accommodationsRequests/' + id);\n  }\n  getByStatus(status) {\n    const url = environment.apiHost + 'accommodationsRequests/' + 'status/' + status;\n    return this.httpClient.get(url);\n  }\n  getByTwoStatuses(status1, status2) {\n    const url = environment.apiHost + `accommodationsRequests/status/${status1}/${status2}`;\n    return this.httpClient.get(url);\n  }\n  updateStatus(requestId, status) {\n    const url = `${environment.apiHost}accommodationsRequests/${requestId}/update-status?status=${status}`;\n    return this.httpClient.put(url, {});\n  }\n  static #_ = this.ɵfac = function AccommodationRequestService_Factory(t) {\n    return new (t || AccommodationRequestService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccommodationRequestService,\n    factory: AccommodationRequestService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["environment","AccommodationRequestService","constructor","httpClient","getAll","get","apiHost","getById","id","getByStatus","status","url","getByTwoStatuses","status1","status2","updateStatus","requestId","put","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\USER\\Desktop\\CloudMovies\\front\\FrontMovies\\ProjectApp\\src\\app\\accommodation-managment\\accommodationRequestService.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {HttpClient} from \"@angular/common/http\";\r\nimport { environment } from 'src/env/env';\r\nimport {Observable} from \"rxjs\";\r\nimport { AccommodationPostDTO } from '../models/dtos/accommodationPostDTO.model';\r\nimport { AccommodationPutDTO } from '../models/dtos/accommodationPutDTO.model';\r\nimport { HttpHeaders } from '@angular/common/http';\r\nimport { AccommodationStatusEnum } from '../models/enums/accommodationStatusEnum';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { formatDate } from '@angular/common';\r\nimport { AccommodationTypeEnum } from '../models/enums/accommodationTypeEnum';\r\nimport { Accommodation } from '../accommodation/accommodation/model/accommodation.model';\r\nimport { AccommodationRequest } from '../accommodation/accommodation/model/accommodationRequest.model';\r\nimport { AccommodationRequestStatus } from '../models/enums/accommodationRequestStatus';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AccommodationRequestService {\r\n  constructor(private httpClient: HttpClient) {\r\n  }\r\n\r\n  \r\n  getAll():Observable<AccommodationRequest[]>{\r\n    return this.httpClient.get<AccommodationRequest[]>(environment.apiHost+'accommodationsRequests');\r\n  }\r\n  getById(id: number): Observable<AccommodationRequest | undefined> {\r\n    return this.httpClient.get<AccommodationRequest>(environment.apiHost + 'accommodationsRequests/' + id);\r\n  }\r\n  getByStatus(status: AccommodationRequestStatus): Observable<AccommodationRequest[]> {\r\n    const url = environment.apiHost + 'accommodationsRequests/'+'status/' + status;\r\n    return this.httpClient.get<AccommodationRequest[]>(url);\r\n  }\r\n  getByTwoStatuses(status1: AccommodationRequestStatus, status2: AccommodationRequestStatus): Observable<AccommodationRequest[]> {\r\n    const url = environment.apiHost + `accommodationsRequests/status/${status1}/${status2}`;\r\n    return this.httpClient.get<AccommodationRequest[]>(url);\r\n  }\r\n\r\n  updateStatus(requestId: number, status: AccommodationRequestStatus): Observable<AccommodationRequest> {\r\n    const url = `${environment.apiHost}accommodationsRequests/${requestId}/update-status?status=${status}`;\r\n    return this.httpClient.put<AccommodationRequest>(url, {});\r\n  }\r\n}"],"mappings":"AAEA,SAASA,WAAW,QAAQ,aAAa;;;AAezC,OAAM,MAAOC,2BAA2B;EACtCC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;EAC9B;EAGAC,MAAMA,CAAA;IACJ,OAAO,IAAI,CAACD,UAAU,CAACE,GAAG,CAAyBL,WAAW,CAACM,OAAO,GAAC,wBAAwB,CAAC;EAClG;EACAC,OAAOA,CAACC,EAAU;IAChB,OAAO,IAAI,CAACL,UAAU,CAACE,GAAG,CAAuBL,WAAW,CAACM,OAAO,GAAG,yBAAyB,GAAGE,EAAE,CAAC;EACxG;EACAC,WAAWA,CAACC,MAAkC;IAC5C,MAAMC,GAAG,GAAGX,WAAW,CAACM,OAAO,GAAG,yBAAyB,GAAC,SAAS,GAAGI,MAAM;IAC9E,OAAO,IAAI,CAACP,UAAU,CAACE,GAAG,CAAyBM,GAAG,CAAC;EACzD;EACAC,gBAAgBA,CAACC,OAAmC,EAAEC,OAAmC;IACvF,MAAMH,GAAG,GAAGX,WAAW,CAACM,OAAO,GAAG,iCAAiCO,OAAO,IAAIC,OAAO,EAAE;IACvF,OAAO,IAAI,CAACX,UAAU,CAACE,GAAG,CAAyBM,GAAG,CAAC;EACzD;EAEAI,YAAYA,CAACC,SAAiB,EAAEN,MAAkC;IAChE,MAAMC,GAAG,GAAG,GAAGX,WAAW,CAACM,OAAO,0BAA0BU,SAAS,yBAAyBN,MAAM,EAAE;IACtG,OAAO,IAAI,CAACP,UAAU,CAACc,GAAG,CAAuBN,GAAG,EAAE,EAAE,CAAC;EAC3D;EAAC,QAAAO,CAAA,G;qBAvBUjB,2BAA2B,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAA3BtB,2BAA2B;IAAAuB,OAAA,EAA3BvB,2BAA2B,CAAAwB,IAAA;IAAAC,UAAA,EAF1B;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}