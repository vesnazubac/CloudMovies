{"ast":null,"code":"import { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatButtonModule } from '@angular/material/button';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/auth/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/material/snack-bar\";\nimport * as i4 from \"src/app/models/socketApiService.service\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/material/icon\";\nimport * as i8 from \"@angular/material/button\";\nimport * as i9 from \"@angular/forms\";\nconst _c0 = [\"usernameInput\"];\nconst _c1 = [\"passwordInput\"];\nexport class LoginFormComponent {\n  constructor(authService, router, snackBar, socketApiService) {\n    this.authService = authService;\n    this.router = router;\n    this.snackBar = snackBar;\n    this.socketApiService = socketApiService;\n    this.hide = true;\n    this.loginForm = new FormGroup({\n      username: new FormControl(),\n      password: new FormControl()\n    });\n  }\n  navigateToHome() {\n    const username = this.usernameInput.nativeElement.value;\n    const password = this.passwordInput.nativeElement.value;\n    console.log('Username:', username);\n    console.log('Password:', password);\n    // ...\n    this.router.navigate(['home']);\n  }\n  login() {\n    console.log(\"USAOOOO LOGGGG VESNA\");\n    if (this.loginForm.valid) {\n      const login = {\n        username: this.loginForm.value.username || \"\",\n        password: this.loginForm.value.password || \"\"\n      };\n      //console.log(\"USAOOOO LOGGGG VESNICCAAAAAAA 57\")\n      this.authService.login(login).subscribe({\n        next: response => {\n          localStorage.setItem('user', response.jwt);\n          this.authService.setUser();\n          //this.socketApiService.sendUserIdOnLogin( this.loginForm.value.username);\n          // this.socketApiService.getStompClient().subscribe(\"/socket-publisher/\" + this.loginForm.value.username).subscribe((message: any) => {\n          //   // Ovde rukujete pristiglim porukama\n          //   console.log(\"Primljena poruka:\", message);\n          // });\n          // this.stompSubscription = this.socketApiService.getStompClient().subscribe((stompClient) => {\n          //   if (stompClient) {\n          //     stompClient.subscribe(\"/socket-publisher/\" + this.loginForm.value.username).subscribe((message: any) => {\n          //       // Handle incoming messages here\n          //       console.log(\"Received message:\", message);\n          //     });\n          //   }\n          // });\n          // this.socketApiService.getStompClient().subscribe((stompClient) => {\n          //   if (stompClient) {\n          //     stompClient.subscribe(\"/socket-publisher/\" + this.loginForm.value.username, (message: any) => {\n          //       // Handle incoming messages here\n          //       console.log(\"Received message:\", message);\n          //     });\n          //   }\n          // });\n          //   this.stompSubscription = this.socketApiService.getStompClient().subscribe((stompClient)=> {\n          //     console.log(\"USAO OVDE KAO\")\n          //     if (stompClient) {\n          //         this.stompSubscription = stompClient.subscribe(\"/socket-publisher/\" + this.loginForm.value.username, (message: any) => {\n          //             // Handle incoming messages here\n          //             console.log(\"Received message:\", message);\n          //         });\n          //     }\n          // });\n          // console.log(\"Before if block\");\n          // this.stompSubscription = this.socketApiService.getStompClient().subscribe((stompClient) => {\n          //   console.log(\"USAO OVDE KAO\")\n          //       this.stompSubscription = stompClient.subscribe(\"/socket-publisher/\" + this.loginForm.value.username, (message: any) => {\n          //         console.log(\"Received message:\", message);\n          //       });\n          // });\n          // console.log(\"USAO 112\")\n          // const stompClient = this.socketApiService.getStompClient();\n          // const username :String=this.loginForm.value.username\n          // console.log(stompClient)\n          // stompClient.subscribe((stompClient) => {\n          //     console.log(\"EH\")\n          //       //stompClient.subscribe(\"/socket-publisher/\" + this.loginForm.value.username , (message: any) => {\n          //         // Handle incoming messages here\n          //         this.socketApiService.openGlobalSocket()\n          //        // console.log(\"Received message:\", message);\n          //       });\n          //this.socketApiService.setUsername(this.loginForm.value.username)\n          this.socketApiService.openSocket(this.loginForm.value.username);\n          this.router.navigate(['home']);\n        },\n        error: () => {\n          console.error('Failed to login ');\n          this.snackBar.open('Failed login. Please check the username and password', 'Close', {\n            duration: 5000\n          });\n        }\n      });\n    }\n  }\n  register() {\n    this.router.navigate(['register']);\n  }\n  static #_ = this.ɵfac = function LoginFormComponent_Factory(t) {\n    return new (t || LoginFormComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.MatSnackBar), i0.ɵɵdirectiveInject(i4.SocketApiService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginFormComponent,\n    selectors: [[\"app-login-form\"]],\n    viewQuery: function LoginFormComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.usernameInput = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.passwordInput = _t.first);\n      }\n    },\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 32,\n    vars: 5,\n    consts: [[1, \"login-container\"], [1, \"login-header\"], [3, \"formGroup\", \"ngSubmit\"], [\"fxLayout\", \"column\", \"fxLayoutAlign\", \"center center\", 1, \"login-form\"], [\"fxFlex\", \"\"], [\"appearance\", \"fill\", \"fxFlex\", \"100%\", 1, \"usernameField\"], [\"matInput\", \"\", \"id\", \"loginUsername\", \"placeholder\", \"Username\", \"formControlName\", \"username\", \"required\", \"\"], [\"usernameInput\", \"\"], [\"fxFlex\", \"100%\"], [\"matInput\", \"\", \"id\", \"loginPassword\", \"required\", \"\", \"formControlName\", \"password\", 3, \"type\"], [\"passwordInput\", \"\"], [\"mat-icon-button\", \"\", \"matSuffix\", \"\", 3, \"click\"], [1, \"example-button-row\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"], [1, \"icon\"], [1, \"registration-section\"], [\"mat-raised-button\", \"\", \"color\", \"\", 3, \"click\"]],\n    template: function LoginFormComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"html\")(1, \"body\")(2, \"div\", 0)(3, \"h2\", 1);\n        i0.ɵɵtext(4, \"Log In\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"form\", 2);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginFormComponent_Template_form_ngSubmit_5_listener() {\n          return ctx.login();\n        });\n        i0.ɵɵelementStart(6, \"div\", 3)(7, \"p\", 4)(8, \"mat-form-field\", 5)(9, \"mat-label\");\n        i0.ɵɵtext(10, \"Username\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"input\", 6, 7);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(13, \"p\")(14, \"mat-form-field\", 8)(15, \"mat-label\");\n        i0.ɵɵtext(16, \"Enter your password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(17, \"input\", 9, 10);\n        i0.ɵɵelementStart(19, \"button\", 11);\n        i0.ɵɵlistener(\"click\", function LoginFormComponent_Template_button_click_19_listener() {\n          return ctx.hide = !ctx.hide;\n        });\n        i0.ɵɵelementStart(20, \"mat-icon\");\n        i0.ɵɵtext(21);\n        i0.ɵɵelementEnd()()()()()();\n        i0.ɵɵelementStart(22, \"div\", 12)(23, \"button\", 13);\n        i0.ɵɵlistener(\"click\", function LoginFormComponent_Template_button_click_23_listener() {\n          return ctx.login();\n        });\n        i0.ɵɵtext(24, \" Log in \");\n        i0.ɵɵelementStart(25, \"mat-icon\", 14);\n        i0.ɵɵtext(26, \"vpn_key\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(27, \"div\", 15)(28, \"label\");\n        i0.ɵɵtext(29, \"Not registered yet?\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(30, \"button\", 16);\n        i0.ɵɵlistener(\"click\", function LoginFormComponent_Template_button_click_30_listener() {\n          return ctx.register();\n        });\n        i0.ɵɵtext(31, \"Register\");\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n        i0.ɵɵadvance(12);\n        i0.ɵɵproperty(\"type\", ctx.hide ? \"password\" : \"text\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵattribute(\"aria-label\", \"Hide password\")(\"aria-pressed\", ctx.hide.toString());\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.hide ? \"visibility_off\" : \"visibility\");\n      }\n    },\n    dependencies: [MatFormFieldModule, i5.MatFormField, i5.MatLabel, i5.MatSuffix, MatInputModule, i6.MatInput, MatIconModule, i7.MatIcon, MatButtonModule, i8.MatButton, i8.MatIconButton, ReactiveFormsModule, i9.ɵNgNoValidate, i9.DefaultValueAccessor, i9.NgControlStatus, i9.NgControlStatusGroup, i9.RequiredValidator, i9.FormGroupDirective, i9.FormControlName, MatSnackBarModule],\n    styles: [\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n.login-container[_ngcontent-%COMP%] {\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    justify-content: center;\\n    margin-top: 30px;\\n  }\\n\\n  \\n  \\n  .login-header[_ngcontent-%COMP%] {\\n    color: #007bff; \\n\\n    font-size: 28px;\\n    margin-bottom: 10px;\\n    justify-content: center;\\n    display: flex;\\n  \\n  }\\n  \\n  .login-form[_ngcontent-%COMP%] {\\n    width: 200px; \\n\\n    margin-top: 30px;\\n    \\n  }\\n  .usernameField[_ngcontent-%COMP%]{\\n    width:250px;\\n    \\n  }\\n  .example-button-row[_ngcontent-%COMP%] {\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    justify-content: center;\\n    margin-top: 20px; \\n\\n  }\\n  \\n\\n\\n.icon[_ngcontent-%COMP%] {\\n    margin-left: 3px; \\n\\n  }\\n  \\n  .example-container[_ngcontent-%COMP%]   mat-form-field[_ngcontent-%COMP%]    + mat-form-field[_ngcontent-%COMP%] {\\n    margin-left: 8px;\\n  }\\n  \\n  .example-right-align[_ngcontent-%COMP%] {\\n    text-align: right;\\n  }\\n  \\n  input.example-right-align[_ngcontent-%COMP%]::-webkit-outer-spin-button, input.example-right-align[_ngcontent-%COMP%]::-webkit-inner-spin-button {\\n    display: none;\\n  }\\n  \\n  input.example-right-align[_ngcontent-%COMP%] {\\n    -moz-appearance: textfield;\\n  }\\n\\n  .registration-section[_ngcontent-%COMP%] {\\n    display: flex;\\n    align-items: center; \\n    margin-top: 3%;\\n  }\\n  \\n\\n  label[_ngcontent-%COMP%] {\\n    margin-right: 1%; \\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbG9naW4vbG9naW4tZm9ybS9sb2dpbi1mb3JtLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7R0FPRzs7QUFFSDtJQUNJLGFBQWE7SUFDYixzQkFBc0I7SUFDdEIsbUJBQW1CO0lBQ25CLHVCQUF1QjtJQUN2QixnQkFBZ0I7RUFDbEI7Ozs7RUFJQTtJQUNFLGNBQWMsRUFBRSxrQ0FBa0M7SUFDbEQsZUFBZTtJQUNmLG1CQUFtQjtJQUNuQix1QkFBdUI7SUFDdkIsYUFBYTs7RUFFZjs7RUFFQTtJQUNFLFlBQVksRUFBRSwrQkFBK0I7SUFDN0MsZ0JBQWdCOztFQUVsQjtFQUNBO0lBQ0UsV0FBVzs7RUFFYjtFQUNBO0lBQ0UsYUFBYTtJQUNiLHNCQUFzQjtJQUN0QixtQkFBbUI7SUFDbkIsdUJBQXVCO0lBQ3ZCLGdCQUFnQixFQUFFLGdDQUFnQztFQUNwRDtFQUNBLDhCQUE4Qjs7QUFFaEM7SUFDSSxnQkFBZ0IsRUFBRSw2REFBNkQ7RUFDakY7O0VBRUE7SUFDRSxnQkFBZ0I7RUFDbEI7O0VBRUE7SUFDRSxpQkFBaUI7RUFDbkI7O0VBRUE7O0lBRUUsYUFBYTtFQUNmOztFQUVBO0lBQ0UsMEJBQTBCO0VBQzVCOztFQUVBO0lBQ0UsYUFBYTtJQUNiLG1CQUFtQjtJQUNuQixjQUFjO0VBQ2hCOzs7RUFHQTtJQUNFLGdCQUFnQjtFQUNsQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIC5leGFtcGxlLWJ1dHRvbi1yb3cgYnV0dG9uLFxyXG4uZXhhbXBsZS1idXR0b24tcm93IGEge1xyXG4gIG1hcmdpbi1yaWdodDogOHB4O1xyXG59XHJcblxyXG4uZXhhbXBsZS1kaXNhYmxlZCB7XHJcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG59ICovXHJcblxyXG4ubG9naW4tY29udGFpbmVyIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgbWFyZ2luLXRvcDogMzBweDtcclxuICB9XHJcblxyXG4gIFxyXG4gIFxyXG4gIC5sb2dpbi1oZWFkZXIge1xyXG4gICAgY29sb3I6ICMwMDdiZmY7IC8qIEJsdWUgY29sb3IsIHlvdSBjYW4gY2hhbmdlIGl0ICovXHJcbiAgICBmb250LXNpemU6IDI4cHg7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gIFxyXG4gIH1cclxuICBcclxuICAubG9naW4tZm9ybSB7XHJcbiAgICB3aWR0aDogMjAwcHg7IC8qIEFkanVzdCB0aGUgd2lkdGggYXMgbmVlZGVkICovXHJcbiAgICBtYXJnaW4tdG9wOiAzMHB4O1xyXG4gICAgXHJcbiAgfVxyXG4gIC51c2VybmFtZUZpZWxke1xyXG4gICAgd2lkdGg6MjUwcHg7XHJcbiAgICBcclxuICB9XHJcbiAgLmV4YW1wbGUtYnV0dG9uLXJvdyB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIG1hcmdpbi10b3A6IDIwcHg7IC8qIEFkanVzdCB0aGUgbWFyZ2luIGFzIG5lZWRlZCAqL1xyXG4gIH1cclxuICAvKiAuLi4gcG9zdG9qZcOEwodpIHN0aWxvdmkgLi4uICovXHJcblxyXG4uaWNvbiB7XHJcbiAgICBtYXJnaW4tbGVmdDogM3B4OyAvKiBQcmlsYWdvZGl0ZSByYXptYWsgaXptZcOEwpF1IHRla3N0YSBpIGlrb25pY2UgcHJlbWEgcG90cmViaSAqL1xyXG4gIH1cclxuICBcclxuICAuZXhhbXBsZS1jb250YWluZXIgbWF0LWZvcm0tZmllbGQgKyBtYXQtZm9ybS1maWVsZCB7XHJcbiAgICBtYXJnaW4tbGVmdDogOHB4O1xyXG4gIH1cclxuICBcclxuICAuZXhhbXBsZS1yaWdodC1hbGlnbiB7XHJcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcclxuICB9XHJcbiAgXHJcbiAgaW5wdXQuZXhhbXBsZS1yaWdodC1hbGlnbjo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbixcclxuICBpbnB1dC5leGFtcGxlLXJpZ2h0LWFsaWduOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uIHtcclxuICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgfVxyXG4gIFxyXG4gIGlucHV0LmV4YW1wbGUtcmlnaHQtYWxpZ24ge1xyXG4gICAgLW1vei1hcHBlYXJhbmNlOiB0ZXh0ZmllbGQ7XHJcbiAgfVxyXG5cclxuICAucmVnaXN0cmF0aW9uLXNlY3Rpb24ge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7IFxyXG4gICAgbWFyZ2luLXRvcDogMyU7XHJcbiAgfVxyXG4gIFxyXG5cclxuICBsYWJlbCB7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDElOyBcclxuICB9Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["MatIconModule","MatInputModule","MatFormFieldModule","MatButtonModule","FormControl","FormGroup","ReactiveFormsModule","MatSnackBarModule","LoginFormComponent","constructor","authService","router","snackBar","socketApiService","hide","loginForm","username","password","navigateToHome","usernameInput","nativeElement","value","passwordInput","console","log","navigate","login","valid","subscribe","next","response","localStorage","setItem","jwt","setUser","openSocket","error","open","duration","register","_","i0","ɵɵdirectiveInject","i1","AuthService","i2","Router","i3","MatSnackBar","i4","SocketApiService","_2","selectors","viewQuery","LoginFormComponent_Query","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","LoginFormComponent_Template_form_ngSubmit_5_listener","ɵɵelement","LoginFormComponent_Template_button_click_19_listener","LoginFormComponent_Template_button_click_23_listener","LoginFormComponent_Template_button_click_30_listener","ɵɵadvance","ɵɵproperty","ɵɵattribute","toString","ɵɵtextInterpolate","i5","MatFormField","MatLabel","MatSuffix","i6","MatInput","i7","MatIcon","i8","MatButton","MatIconButton","i9","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","RequiredValidator","FormGroupDirective","FormControlName","styles"],"sources":["C:\\Users\\USER\\Desktop\\CloudMovies\\front\\FrontMovies\\ProjectApp\\src\\app\\login\\login-form\\login-form.component.ts","C:\\Users\\USER\\Desktop\\CloudMovies\\front\\FrontMovies\\ProjectApp\\src\\app\\login\\login-form\\login-form.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport { Router } from '@angular/router';\r\nimport { ViewChild, ElementRef } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Login } from 'src/app/auth/model/login.model';\r\nimport { AuthService } from 'src/app/auth/auth.service';\r\nimport { AuthResponse } from 'src/app/auth/model/auth-resposne.model';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { SocketApiService } from 'src/app/models/socketApiService.service';\r\nimport { Subscription } from 'rxjs';\r\n@Component({\r\n  selector: 'app-login-form',\r\n  templateUrl: './login-form.component.html',\r\n  styleUrls: ['./login-form.component.css'],\r\n  standalone:true,\r\n  imports:[MatFormFieldModule, MatInputModule, MatIconModule,MatButtonModule,MatIconModule,ReactiveFormsModule,\r\n  MatSnackBarModule]\r\n  \r\n})\r\n\r\nexport class LoginFormComponent {\r\n\r\n  private stompSubscription: Subscription;\r\n\r\n  constructor(private authService: AuthService,\r\n    private router: Router,private snackBar: MatSnackBar,private socketApiService:SocketApiService) {}\r\n\r\n  hide=true;\r\n  @ViewChild('usernameInput') usernameInput!: ElementRef;\r\n  @ViewChild('passwordInput') passwordInput!: ElementRef;\r\n\r\n  loginForm = new FormGroup({\r\n    username: new FormControl(),\r\n    password: new FormControl()\r\n  })\r\n  \r\n  navigateToHome() {\r\n\r\n    const username = this.usernameInput.nativeElement.value;\r\n    const password = this.passwordInput.nativeElement.value;\r\n\r\n    console.log('Username:', username);\r\n    console.log('Password:', password);\r\n    // ...\r\n    this.router.navigate(['home']);\r\n\r\n    \r\n  }\r\n\r\n  login(): void {\r\n    console.log(\"USAOOOO LOGGGG VESNA\")\r\n    if(this.loginForm.valid) {\r\n      const login: Login = {\r\n        username: this.loginForm.value.username || \"\",\r\n        password: this.loginForm.value.password || \"\"\r\n      }\r\n      //console.log(\"USAOOOO LOGGGG VESNICCAAAAAAA 57\")\r\n      this.authService.login(login).subscribe({\r\n        next: (response: AuthResponse) => {\r\n          localStorage.setItem('user', response.jwt);\r\n          this.authService.setUser()\r\n          //this.socketApiService.sendUserIdOnLogin( this.loginForm.value.username);\r\n          // this.socketApiService.getStompClient().subscribe(\"/socket-publisher/\" + this.loginForm.value.username).subscribe((message: any) => {\r\n          //   // Ovde rukujete pristiglim porukama\r\n          //   console.log(\"Primljena poruka:\", message);\r\n          // });\r\n          // this.stompSubscription = this.socketApiService.getStompClient().subscribe((stompClient) => {\r\n          //   if (stompClient) {\r\n          //     stompClient.subscribe(\"/socket-publisher/\" + this.loginForm.value.username).subscribe((message: any) => {\r\n          //       // Handle incoming messages here\r\n          //       console.log(\"Received message:\", message);\r\n          //     });\r\n          //   }\r\n          // });\r\n\r\n          // this.socketApiService.getStompClient().subscribe((stompClient) => {\r\n          //   if (stompClient) {\r\n          //     stompClient.subscribe(\"/socket-publisher/\" + this.loginForm.value.username, (message: any) => {\r\n          //       // Handle incoming messages here\r\n          //       console.log(\"Received message:\", message);\r\n          //     });\r\n          //   }\r\n          // });\r\n        //   this.stompSubscription = this.socketApiService.getStompClient().subscribe((stompClient)=> {\r\n        //     console.log(\"USAO OVDE KAO\")\r\n        //     if (stompClient) {\r\n             \r\n        //         this.stompSubscription = stompClient.subscribe(\"/socket-publisher/\" + this.loginForm.value.username, (message: any) => {\r\n        //             // Handle incoming messages here\r\n        //             console.log(\"Received message:\", message);\r\n        //         });\r\n        //     }\r\n        // });\r\n        // console.log(\"Before if block\");\r\n\r\n        // this.stompSubscription = this.socketApiService.getStompClient().subscribe((stompClient) => {\r\n        //   console.log(\"USAO OVDE KAO\")\r\n    \r\n        //       this.stompSubscription = stompClient.subscribe(\"/socket-publisher/\" + this.loginForm.value.username, (message: any) => {\r\n        //         console.log(\"Received message:\", message);\r\n        //       });\r\n          \r\n        // });\r\n        // console.log(\"USAO 112\")\r\n        // const stompClient = this.socketApiService.getStompClient();\r\n        // const username :String=this.loginForm.value.username\r\n        // console.log(stompClient)\r\n        // stompClient.subscribe((stompClient) => {\r\n        //     console.log(\"EH\")\r\n        //       //stompClient.subscribe(\"/socket-publisher/\" + this.loginForm.value.username , (message: any) => {\r\n        //         // Handle incoming messages here\r\n        //         this.socketApiService.openGlobalSocket()\r\n        //        // console.log(\"Received message:\", message);\r\n        //       });\r\n            \r\n       \r\n\r\n       //this.socketApiService.setUsername(this.loginForm.value.username)\r\n        this.socketApiService.openSocket(this.loginForm.value.username);\r\n     \r\n          this.router.navigate(['home'])\r\n        },\r\n        error:()=>{\r\n\r\n          console.error('Failed to login ');\r\n          this.snackBar.open('Failed login. Please check the username and password', 'Close', {\r\n            duration: 5000, \r\n          });\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  register(){\r\n    this.router.navigate(['register'])\r\n  }\r\n}\r\n","<html>\r\n  <body>\r\n<div class=\"login-container\">\r\n    <h2 class=\"login-header\">Log In</h2>\r\n      <form [formGroup]='loginForm' (ngSubmit)=\"login()\">\r\n    <div class=\"login-form\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\r\n      <p fxFlex>\r\n        <mat-form-field appearance=\"fill\" fxFlex=\"100%\" class=\"usernameField\" >\r\n          <mat-label>Username</mat-label>\r\n          <input matInput id=\"loginUsername\" placeholder=\"Username\" formControlName=\"username\"  required #usernameInput>\r\n        </mat-form-field>\r\n      </p>\r\n      <p>\r\n        <mat-form-field fxFlex=\"100%\">\r\n            <mat-label>Enter your password</mat-label>\r\n            <input matInput  id=\"loginPassword\" [type]=\"hide ? 'password' : 'text'\" required  formControlName=\"password\" #passwordInput>\r\n            <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hide.toString()\">\r\n              <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n            </button>\r\n          </mat-form-field>\r\n      </p>\r\n    </div>\r\n  </form>\r\n  \r\n    <div class=\"example-button-row\">\r\n      <button (click)=\"login()\" mat-raised-button color=\"primary\">\r\n        Log in\r\n        <mat-icon class=\"icon\">vpn_key</mat-icon>\r\n      </button>\r\n    </div>\r\n    <div class=\"registration-section\">\r\n      <label>Not registered yet?</label>\r\n      <button mat-raised-button color=\"\"  (click)=\"register()\">Register</button>\r\n    </div>\r\n    \r\n  </div>\r\n\r\n</body>\r\n  </html>\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}