{"ast":null,"code":"// import { ChangeDetectorRef, Component } from '@angular/core';\n// import {FormControl, Validators, FormsModule, ReactiveFormsModule, FormGroup, FormBuilder, AbstractControl, ValidationErrors} from '@angular/forms';\n// import {MatInputModule} from '@angular/material/input';\n// import {MatFormFieldModule} from '@angular/material/form-field';\n// import { MatIconModule } from '@angular/material/icon';\n// import { Router } from '@angular/router';\n// import {MatButtonModule} from '@angular/material/button';\n// import {MatSelectChange, MatSelectModule} from '@angular/material/select';\n// import { User } from 'src/app/models/user.model';\n// import { UserService } from 'src/app/user.service';\n// import { UserPostDTO } from 'src/app/models/userPostDTO.model';\n// import { RoleEnum } from 'src/app/models/userEnums.model';\n// import {MatSlideToggleChange, MatSlideToggleModule} from '@angular/material/slide-toggle';\n// import { MatOptionSelectionChange, ThemePalette } from '@angular/material/core';\n// import { CommonModule } from '@angular/common';\n// import { MatDatepicker, MatDatepickerModule } from '@angular/material/datepicker';\n// import { MatDatepickerActions } from '@angular/material/datepicker';\nimport { __decorate } from \"tslib\";\n// @Component({\n//   selector: 'app-register-form',\n//   templateUrl: './register-form.component.html',\n//   styleUrls: ['./register-form.component.css'],\n//   standalone: true,\n//   imports: [MatFormFieldModule, MatInputModule, FormsModule, ReactiveFormsModule,MatIconModule,MatButtonModule,MatSelectModule,\n//     MatSlideToggleModule,CommonModule,MatDatepickerModule]\n// })\n// export class RegisterFormComponent {\n//   color: ThemePalette = 'primary';\n//   disabled = false;\n//   checked = false;\n//   button_enabled=false;\n//   reservationRequestNotification: boolean = false;\n//   reservationCancellationNotification: boolean = false;\n//   ownerRatingNotification: boolean = false;\n//   accommodationRatingNotification: boolean = false;\n//   ownerRepliedToRequestNotification: boolean = false;\n//   createRegisterForm = new FormGroup({\n//     name: new FormControl('', Validators.required),\n//     surname: new FormControl('', Validators.required),\n//     phoneNumber: new FormControl('', [Validators.required, Validators.pattern(/^\\d{10}$/)]),\n//     address: new FormControl('', Validators.required),\n//     username:  new FormControl('', [Validators.required, Validators.email]),\n//     password: new FormControl('', Validators.required),\n//     confirmPassword: new FormControl('', Validators.required),\n//     role: new FormControl('', Validators.required),\n//     requestNotification: new FormControl(),\n//     cancellationNotification: new FormControl(),\n//     accommodationRatingNotification: new FormControl(),\n//     ownerRatingNotification: new FormControl(),\n//     ownerRepliedNotification: new FormControl(),\n//   }, { validators: this.passwordMatchValidator });\n//   hide = true;\n//   constructor(private cdr: ChangeDetectorRef,private userService: UserService, private router: Router) {\n//     this.createRegisterForm.get('requestNotification')?.disable();\n//     this.createRegisterForm.get('cancellationNotification')?.disable();\n//     this.createRegisterForm.get('ownerRatingNotification')?.disable();\n//     this.createRegisterForm.get('accommodationRatingNotification')?.disable();\n//     this.createRegisterForm.get('ownerRepliedNotification')?.disable();\n//   }\n//   ngOnInit(){\n//   }\n//   navigateToHome() {\n//     this.router.navigate(['home']);\n//   }\n//   register() {\n//     this.button_enabled=true;\n//     const userRoleValue: string | undefined = this.createRegisterForm.get('role')?.value ?? undefined;\n//     console.log(userRoleValue);\n//     if(userRoleValue!==undefined){\n//       const userRoleEnum: RoleEnum = RoleEnum[userRoleValue as keyof typeof RoleEnum];\n//       const user: UserPostDTO = {\n//         firstName: this.createRegisterForm.value.name,\n//         lastName:this.createRegisterForm.value.surname,\n//         phoneNumber: this.createRegisterForm.value.phoneNumber,\n//         address: this.createRegisterForm.value.address,\n//         username:this.createRegisterForm.value.username,\n//         password:this.createRegisterForm.value.password,\n//         passwordConfirmation:this.createRegisterForm.value.confirmPassword,\n//         role: userRoleEnum,\n//         reservationRequestNotification:this.reservationRequestNotification,\n//         reservationCancellationNotification:this.reservationCancellationNotification,\n//         ownerRatingNotification:this.ownerRatingNotification,\n//         accommodationRatingNotification:this.accommodationRatingNotification,\n//         ownerRepliedToRequestNotification:this.ownerRepliedToRequestNotification,\n//         deleted:false\n//       }\n//       this.userService.create(user).subscribe(\n//         {\n//           next: (data: UserPostDTO) => {\n//             this.router.navigate(['home'])\n//           },\n//         }\n//       );\n//     }\n//     this.cdr.markForCheck();\n//   }\n//   onSlideToggleChangeRequestNotification(event: MatSlideToggleChange) {\n//     const reservationRequestNotificationChecked = event.checked;\n//     this.reservationRequestNotification=reservationRequestNotificationChecked.valueOf();\n//   }\n//   onSlideToggleChangeCancellationNotification(event: MatSlideToggleChange){\n//     const reservationRequestNotificationChecked = event.checked;\n//     this.reservationRequestNotification=reservationRequestNotificationChecked.valueOf();\n//   }\n//   onSlideToggleChangeOwnerRatingNotification(event:MatSlideToggleChange){\n//     const ownerRatingNotification = event.checked;\n//     this.ownerRatingNotification=ownerRatingNotification.valueOf();\n//   }\n//   onSlideToggleChangeAccommodationRatingNotification(event:MatSlideToggleChange){\n//     const accommodationRatingNotification = event.checked;\n//     this.accommodationRatingNotification=accommodationRatingNotification.valueOf();\n//   }\n//   onSlideToggleChangeOwnerRepliedRequestNotification(event:MatSlideToggleChange){\n//     const ownerRepliedToRequestNotification = event.checked;\n//     this.ownerRepliedToRequestNotification=ownerRepliedToRequestNotification.valueOf();\n//   }\n//   onRoleSelectionChange(event: MatSelectChange) {\n//     const selectedRole = event.source.value;\n//     console.log('Promenjena uloga:', selectedRole);\n//     if (selectedRole === 'ADMIN') {\n//       this.createRegisterForm.get('requestNotification')?.disable();\n//       this.createRegisterForm.get('cancellationNotification')?.disable();\n//       this.createRegisterForm.get('ownerRatingNotification')?.disable();\n//       this.createRegisterForm.get('accommodationRatingNotification')?.disable();\n//       this.createRegisterForm.get('ownerRepliedNotification')?.disable();\n//     } else if (selectedRole === 'GUEST') {\n//       this.createRegisterForm.get('requestNotification')?.disable();\n//       this.createRegisterForm.get('cancellationNotification')?.disable();\n//       this.createRegisterForm.get('ownerRatingNotification')?.disable();\n//       this.createRegisterForm.get('accommodationRatingNotification')?.disable();\n//       this.createRegisterForm.get('ownerRepliedNotification')?.enable();\n//     } else if (selectedRole === 'OWNER') {\n//       this.createRegisterForm.get('requestNotification')?.enable();\n//       this.createRegisterForm.get('cancellationNotification')?.enable();\n//       this.createRegisterForm.get('ownerRatingNotification')?.enable();\n//       this.createRegisterForm.get('accommodationRatingNotification')?.enable();\n//       this.createRegisterForm.get('ownerRepliedNotification')?.disable();\n//     }\n//   }\n//   passwordMatchValidator(control: AbstractControl): ValidationErrors | null {\n//     const password = control.get('password')?.value;\n//     const confirmPassword = control.get('confirmPassword')?.value;\n//     return password === confirmPassword ? null : { passwordMismatch: true };\n//   }\n//   get isFormValid(): boolean {\n//     return this.createRegisterForm.valid;\n// }\n// }\nimport { Component } from '@angular/core';\nimport { FormControl, Validators, FormsModule, ReactiveFormsModule, FormGroup } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { CommonModule } from '@angular/common';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nexport let RegisterFormComponent = class RegisterFormComponent {\n  constructor(cdr, userService, router) {\n    this.cdr = cdr;\n    this.userService = userService;\n    this.router = router;\n    this.color = 'primary'; // Theme color for slide toggles\n    this.checked = false; // Default checked state for slide toggles\n    this.disabled = false; // Default disabled state for slide toggles\n    this.hide = true; // Hide/show password toggle\n    this.passwordMatchValidator = control => {\n      const password = control.get('password')?.value;\n      const confirmPassword = control.get('confirmPassword')?.value;\n      return password === confirmPassword ? null : {\n        passwordMismatch: true\n      };\n    };\n    // Form group definition with form controls and initial state\n    this.createRegisterForm = new FormGroup({\n      name: new FormControl('', Validators.required),\n      surname: new FormControl('', Validators.required),\n      username: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', Validators.required),\n      confirmPassword: new FormControl('', Validators.required),\n      birthdate: new FormControl('', Validators.required),\n      // Format date as 'YYYY-MM-DD'\n      role: new FormControl('', Validators.required),\n      requestNotification: new FormControl(false),\n      cancellationNotification: new FormControl(false),\n      ownerRatingNotification: new FormControl(false),\n      accommodationRatingNotification: new FormControl(false),\n      ownerRepliedNotification: new FormControl(false) // Default value set to false\n    });\n  }\n  // Method to navigate to home page\n  navigateToHome() {\n    this.router.navigate(['home']);\n  }\n  // Method to handle registration\n  register() {\n    // Enable button indicator or loader\n    // this.button_enabled = true; // You can uncomment this if you have this logic\n    // Constructing UserPostDTO object from form values\n    const user = {\n      firstName: this.createRegisterForm.value.name,\n      lastName: this.createRegisterForm.value.surname,\n      username: this.createRegisterForm.value.username,\n      password: this.createRegisterForm.value.password,\n      // passwordConfirmation: this.createRegisterForm.value.confirmPassword,\n      birthdate: this.createRegisterForm.value.birthdate?.toString().slice(0, 10),\n      //birthdate: this.createRegisterForm.value.birthdate,\n      email: this.createRegisterForm.value.username\n      // role: this.createRegisterForm.value.role as RoleEnum,\n      // reservationRequestNotification: this.createRegisterForm.value.requestNotification,\n      // reservationCancellationNotification: this.createRegisterForm.value.cancellationNotification,\n      // ownerRatingNotification: this.createRegisterForm.value.ownerRatingNotification,\n      // accommodationRatingNotification: this.createRegisterForm.value.accommodationRatingNotification,\n      // ownerRepliedToRequestNotification: this.createRegisterForm.value.ownerRepliedNotification,\n      // deleted: false // Assuming this is a default value\n    };\n    // Calling the service method to register the user\n    this.userService.registerUser(user).subscribe({\n      next: data => {\n        // Successful registration navigation logic\n        console.log('User registered successfully:', data);\n        this.navigateToHome(); // Example navigation to home page after registration\n      },\n\n      error: error => {\n        // Error handling logic, if needed\n        console.error('Error occurred during registration:', error);\n        // Handle error feedback to the user, e.g., display error message\n      }\n    });\n    // Optionally, reset the form after successful registration\n    // this.createRegisterForm.reset(); // Uncomment if needed\n  }\n  // Method to handle slide toggle change for request notification\n  onSlideToggleChangeRequestNotification(event) {\n    this.createRegisterForm.patchValue({\n      requestNotification: event.checked\n    });\n  }\n  // Method to handle slide toggle change for cancellation notification\n  onSlideToggleChangeCancellationNotification(event) {\n    this.createRegisterForm.patchValue({\n      cancellationNotification: event.checked\n    });\n  }\n  // Method to handle slide toggle change for owner rating notification\n  onSlideToggleChangeOwnerRatingNotification(event) {\n    this.createRegisterForm.patchValue({\n      ownerRatingNotification: event.checked\n    });\n  }\n  // Method to handle slide toggle change for accommodation rating notification\n  onSlideToggleChangeAccommodationRatingNotification(event) {\n    this.createRegisterForm.patchValue({\n      accommodationRatingNotification: event.checked\n    });\n  }\n  // Method to handle slide toggle change for owner replied notification\n  onSlideToggleChangeOwnerRepliedRequestNotification(event) {\n    this.createRegisterForm.patchValue({\n      ownerRepliedNotification: event.checked\n    });\n  }\n  // Method to handle role selection change\n  onRoleSelectionChange(event) {\n    // Example implementation based on selected role\n    const selectedRole = event.value;\n    if (selectedRole === 'ADMIN') {\n      // Disable certain notifications for ADMIN role\n      this.createRegisterForm.get('requestNotification')?.disable();\n      this.createRegisterForm.get('cancellationNotification')?.disable();\n      this.createRegisterForm.get('ownerRatingNotification')?.disable();\n      this.createRegisterForm.get('accommodationRatingNotification')?.disable();\n      this.createRegisterForm.get('ownerRepliedNotification')?.disable();\n    } else if (selectedRole === 'GUEST') {\n      // Enable specific notifications for GUEST role\n      this.createRegisterForm.get('requestNotification')?.disable();\n      this.createRegisterForm.get('cancellationNotification')?.disable();\n      this.createRegisterForm.get('ownerRatingNotification')?.disable();\n      this.createRegisterForm.get('accommodationRatingNotification')?.disable();\n      this.createRegisterForm.get('ownerRepliedNotification')?.enable();\n    } else if (selectedRole === 'OWNER') {\n      // Enable certain notifications for OWNER role\n      this.createRegisterForm.get('requestNotification')?.enable();\n      this.createRegisterForm.get('cancellationNotification')?.enable();\n      this.createRegisterForm.get('ownerRatingNotification')?.enable();\n      this.createRegisterForm.get('accommodationRatingNotification')?.enable();\n      this.createRegisterForm.get('ownerRepliedNotification')?.disable();\n    }\n  }\n  // // Custom validator function for matching passwords\n  // passwordMatchValidator():boolean | null {\n  //   const password = this.createRegisterForm.get('password')?.value;\n  //   const confirmPassword = this.createRegisterForm.get('confirmPassword')?.value;\n  //   return password === confirmPassword ? null : { passwordMismatch: true };\n  // }\n  // Getter for form validity check\n  get isFormValid() {\n    return this.createRegisterForm.valid;\n  }\n};\nRegisterFormComponent = __decorate([Component({\n  selector: 'app-register-form',\n  templateUrl: './register-form.component.html',\n  styleUrls: ['./register-form.component.css'],\n  standalone: true,\n  imports: [MatFormFieldModule, MatInputModule, FormsModule, ReactiveFormsModule, MatIconModule, MatButtonModule, MatSelectModule, MatSlideToggleModule, CommonModule, MatDatepickerModule]\n})], RegisterFormComponent);","map":{"version":3,"names":["Component","FormControl","Validators","FormsModule","ReactiveFormsModule","FormGroup","MatInputModule","MatFormFieldModule","MatIconModule","MatButtonModule","MatSelectModule","MatSlideToggleModule","CommonModule","MatDatepickerModule","RegisterFormComponent","constructor","cdr","userService","router","color","checked","disabled","hide","passwordMatchValidator","control","password","get","value","confirmPassword","passwordMismatch","createRegisterForm","name","required","surname","username","email","birthdate","role","requestNotification","cancellationNotification","ownerRatingNotification","accommodationRatingNotification","ownerRepliedNotification","navigateToHome","navigate","register","user","firstName","lastName","toString","slice","registerUser","subscribe","next","data","console","log","error","onSlideToggleChangeRequestNotification","event","patchValue","onSlideToggleChangeCancellationNotification","onSlideToggleChangeOwnerRatingNotification","onSlideToggleChangeAccommodationRatingNotification","onSlideToggleChangeOwnerRepliedRequestNotification","onRoleSelectionChange","selectedRole","disable","enable","isFormValid","valid","__decorate","selector","templateUrl","styleUrls","standalone","imports"],"sources":["C:\\Users\\USER\\Desktop\\CloudMovies\\front\\FrontMovies\\ProjectApp\\src\\app\\register\\register-form\\register-form.component.ts"],"sourcesContent":["// import { ChangeDetectorRef, Component } from '@angular/core';\r\n// import {FormControl, Validators, FormsModule, ReactiveFormsModule, FormGroup, FormBuilder, AbstractControl, ValidationErrors} from '@angular/forms';\r\n// import {MatInputModule} from '@angular/material/input';\r\n// import {MatFormFieldModule} from '@angular/material/form-field';\r\n// import { MatIconModule } from '@angular/material/icon';\r\n// import { Router } from '@angular/router';\r\n// import {MatButtonModule} from '@angular/material/button';\r\n// import {MatSelectChange, MatSelectModule} from '@angular/material/select';\r\n// import { User } from 'src/app/models/user.model';\r\n// import { UserService } from 'src/app/user.service';\r\n// import { UserPostDTO } from 'src/app/models/userPostDTO.model';\r\n// import { RoleEnum } from 'src/app/models/userEnums.model';\r\n// import {MatSlideToggleChange, MatSlideToggleModule} from '@angular/material/slide-toggle';\r\n// import { MatOptionSelectionChange, ThemePalette } from '@angular/material/core';\r\n// import { CommonModule } from '@angular/common';\r\n// import { MatDatepicker, MatDatepickerModule } from '@angular/material/datepicker';\r\n// import { MatDatepickerActions } from '@angular/material/datepicker';\r\n\r\n\r\n\r\n// @Component({\r\n//   selector: 'app-register-form',\r\n//   templateUrl: './register-form.component.html',\r\n//   styleUrls: ['./register-form.component.css'],\r\n//   standalone: true,\r\n//   imports: [MatFormFieldModule, MatInputModule, FormsModule, ReactiveFormsModule,MatIconModule,MatButtonModule,MatSelectModule,\r\n//     MatSlideToggleModule,CommonModule,MatDatepickerModule]\r\n// })\r\n// export class RegisterFormComponent {\r\n//   color: ThemePalette = 'primary';\r\n//   disabled = false;\r\n//   checked = false;\r\n//   button_enabled=false;\r\n//   reservationRequestNotification: boolean = false;\r\n//   reservationCancellationNotification: boolean = false;\r\n//   ownerRatingNotification: boolean = false;\r\n//   accommodationRatingNotification: boolean = false;\r\n//   ownerRepliedToRequestNotification: boolean = false;\r\n\r\n//   createRegisterForm = new FormGroup({\r\n//     name: new FormControl('', Validators.required),\r\n//     surname: new FormControl('', Validators.required),\r\n//     phoneNumber: new FormControl('', [Validators.required, Validators.pattern(/^\\d{10}$/)]),\r\n//     address: new FormControl('', Validators.required),\r\n//     username:  new FormControl('', [Validators.required, Validators.email]),\r\n//     password: new FormControl('', Validators.required),\r\n//     confirmPassword: new FormControl('', Validators.required),\r\n//     role: new FormControl('', Validators.required),\r\n//     requestNotification: new FormControl(),\r\n//     cancellationNotification: new FormControl(),\r\n//     accommodationRatingNotification: new FormControl(),\r\n//     ownerRatingNotification: new FormControl(),\r\n//     ownerRepliedNotification: new FormControl(),\r\n    \r\n//   }, { validators: this.passwordMatchValidator });\r\n\r\n//   hide = true;\r\n\r\n//   constructor(private cdr: ChangeDetectorRef,private userService: UserService, private router: Router) {\r\n//     this.createRegisterForm.get('requestNotification')?.disable();\r\n//     this.createRegisterForm.get('cancellationNotification')?.disable();\r\n//     this.createRegisterForm.get('ownerRatingNotification')?.disable();\r\n//     this.createRegisterForm.get('accommodationRatingNotification')?.disable();\r\n//     this.createRegisterForm.get('ownerRepliedNotification')?.disable();\r\n//   }\r\n\r\n//   ngOnInit(){\r\n\r\n//   }\r\n\r\n//   navigateToHome() {\r\n//     this.router.navigate(['home']);\r\n//   }\r\n\r\n//   register() {\r\n//     this.button_enabled=true;\r\n\r\n//     const userRoleValue: string | undefined = this.createRegisterForm.get('role')?.value ?? undefined;\r\n//     console.log(userRoleValue);\r\n//     if(userRoleValue!==undefined){\r\n    \r\n//       const userRoleEnum: RoleEnum = RoleEnum[userRoleValue as keyof typeof RoleEnum];\r\n//       const user: UserPostDTO = {\r\n//         firstName: this.createRegisterForm.value.name,\r\n//         lastName:this.createRegisterForm.value.surname,\r\n//         phoneNumber: this.createRegisterForm.value.phoneNumber,\r\n//         address: this.createRegisterForm.value.address,\r\n//         username:this.createRegisterForm.value.username,\r\n//         password:this.createRegisterForm.value.password,\r\n//         passwordConfirmation:this.createRegisterForm.value.confirmPassword,\r\n//         role: userRoleEnum,\r\n//         reservationRequestNotification:this.reservationRequestNotification,\r\n//         reservationCancellationNotification:this.reservationCancellationNotification,\r\n//         ownerRatingNotification:this.ownerRatingNotification,\r\n//         accommodationRatingNotification:this.accommodationRatingNotification,\r\n//         ownerRepliedToRequestNotification:this.ownerRepliedToRequestNotification,\r\n//         deleted:false\r\n\r\n//       }\r\n//       this.userService.create(user).subscribe(\r\n//         {\r\n//           next: (data: UserPostDTO) => {\r\n//             this.router.navigate(['home'])\r\n//           },\r\n//         }\r\n//       );\r\n//     }\r\n//     this.cdr.markForCheck();\r\n//   }\r\n\r\n//   onSlideToggleChangeRequestNotification(event: MatSlideToggleChange) {\r\n//     const reservationRequestNotificationChecked = event.checked;\r\n//     this.reservationRequestNotification=reservationRequestNotificationChecked.valueOf();\r\n\r\n//   }\r\n//   onSlideToggleChangeCancellationNotification(event: MatSlideToggleChange){\r\n//     const reservationRequestNotificationChecked = event.checked;\r\n//     this.reservationRequestNotification=reservationRequestNotificationChecked.valueOf();\r\n//   }\r\n//   onSlideToggleChangeOwnerRatingNotification(event:MatSlideToggleChange){\r\n//     const ownerRatingNotification = event.checked;\r\n//     this.ownerRatingNotification=ownerRatingNotification.valueOf();\r\n//   }\r\n//   onSlideToggleChangeAccommodationRatingNotification(event:MatSlideToggleChange){\r\n//     const accommodationRatingNotification = event.checked;\r\n//     this.accommodationRatingNotification=accommodationRatingNotification.valueOf();\r\n//   }\r\n//   onSlideToggleChangeOwnerRepliedRequestNotification(event:MatSlideToggleChange){\r\n//     const ownerRepliedToRequestNotification = event.checked;\r\n//     this.ownerRepliedToRequestNotification=ownerRepliedToRequestNotification.valueOf();\r\n\r\n//   }\r\n\r\n//   onRoleSelectionChange(event: MatSelectChange) {\r\n//     const selectedRole = event.source.value;\r\n//     console.log('Promenjena uloga:', selectedRole);\r\n\r\n//     if (selectedRole === 'ADMIN') {\r\n//       this.createRegisterForm.get('requestNotification')?.disable();\r\n//       this.createRegisterForm.get('cancellationNotification')?.disable();\r\n//       this.createRegisterForm.get('ownerRatingNotification')?.disable();\r\n//       this.createRegisterForm.get('accommodationRatingNotification')?.disable();\r\n//       this.createRegisterForm.get('ownerRepliedNotification')?.disable();\r\n//     } else if (selectedRole === 'GUEST') {\r\n//       this.createRegisterForm.get('requestNotification')?.disable();\r\n//       this.createRegisterForm.get('cancellationNotification')?.disable();\r\n//       this.createRegisterForm.get('ownerRatingNotification')?.disable();\r\n//       this.createRegisterForm.get('accommodationRatingNotification')?.disable();\r\n//       this.createRegisterForm.get('ownerRepliedNotification')?.enable();\r\n//     } else if (selectedRole === 'OWNER') {\r\n//       this.createRegisterForm.get('requestNotification')?.enable();\r\n//       this.createRegisterForm.get('cancellationNotification')?.enable();\r\n//       this.createRegisterForm.get('ownerRatingNotification')?.enable();\r\n//       this.createRegisterForm.get('accommodationRatingNotification')?.enable();\r\n//       this.createRegisterForm.get('ownerRepliedNotification')?.disable();\r\n//     }\r\n//   }\r\n\r\n//   passwordMatchValidator(control: AbstractControl): ValidationErrors | null {\r\n//     const password = control.get('password')?.value;\r\n//     const confirmPassword = control.get('confirmPassword')?.value;\r\n\r\n//     return password === confirmPassword ? null : { passwordMismatch: true };\r\n//   }\r\n\r\n//   get isFormValid(): boolean {\r\n//     return this.createRegisterForm.valid;\r\n// }\r\n// }\r\n\r\n\r\nimport { ChangeDetectorRef, Component } from '@angular/core';\r\nimport {FormControl, Validators, FormsModule, ReactiveFormsModule, FormGroup, FormBuilder, AbstractControl, ValidationErrors} from '@angular/forms';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { Router } from '@angular/router';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatSelectChange, MatSelectModule} from '@angular/material/select';\r\nimport { User } from 'src/app/models/user.model';\r\nimport { UserService } from 'src/app/user.service';\r\nimport { UserPostDTO } from 'src/app/models/userPostDTO.model';\r\nimport { RoleEnum } from 'src/app/models/userEnums.model';\r\nimport {MatSlideToggleChange, MatSlideToggleModule} from '@angular/material/slide-toggle';\r\nimport { MatOptionSelectionChange, ThemePalette } from '@angular/material/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatDatepicker, MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatDatepickerActions } from '@angular/material/datepicker';\r\n\r\n\r\n@Component({\r\n  selector: 'app-register-form',\r\n  templateUrl: './register-form.component.html',\r\n  styleUrls: ['./register-form.component.css'],\r\n  standalone: true,\r\n    imports: [MatFormFieldModule, MatInputModule, FormsModule, ReactiveFormsModule,MatIconModule,MatButtonModule,MatSelectModule,\r\n      MatSlideToggleModule,CommonModule,MatDatepickerModule]\r\n})\r\nexport class RegisterFormComponent {\r\n\r\n  color: string = 'primary'; // Theme color for slide toggles\r\n  checked: boolean = false; // Default checked state for slide toggles\r\n  disabled: boolean = false; // Default disabled state for slide toggles\r\n  hide: boolean = true; // Hide/show password toggle\r\n\r\n  \r\n   passwordMatchValidator: Validators = (control: AbstractControl): ValidationErrors | null => {\r\n    const password = control.get('password')?.value;\r\n    const confirmPassword = control.get('confirmPassword')?.value;\r\n  \r\n    return password === confirmPassword ? null : { passwordMismatch: true };\r\n  };\r\n\r\n  // Form group definition with form controls and initial state\r\n  createRegisterForm = new FormGroup({\r\n    name: new FormControl('', Validators.required),\r\n    surname: new FormControl('', Validators.required),\r\n    username: new FormControl('', [Validators.required, Validators.email]),\r\n    password: new FormControl('', Validators.required),\r\n    confirmPassword: new FormControl('', Validators.required),\r\n    birthdate: new FormControl('', Validators.required),\r\n    // Format date as 'YYYY-MM-DD'\r\n    role: new FormControl('', Validators.required),\r\n    requestNotification: new FormControl(false), // Default value set to false\r\n    cancellationNotification: new FormControl(false), // Default value set to false\r\n    ownerRatingNotification: new FormControl(false), // Default value set to false\r\n    accommodationRatingNotification: new FormControl(false), // Default value set to false\r\n    ownerRepliedNotification: new FormControl(false) // Default value set to false\r\n  });\r\n\r\n  constructor(private cdr: ChangeDetectorRef, private userService: UserService, private router: Router) { }\r\n\r\n  // Method to navigate to home page\r\n  navigateToHome() {\r\n    this.router.navigate(['home']);\r\n  }\r\n\r\n  // Method to handle registration\r\n  register() {\r\n    // Enable button indicator or loader\r\n    // this.button_enabled = true; // You can uncomment this if you have this logic\r\n\r\n    // Constructing UserPostDTO object from form values\r\n    const user: UserPostDTO = {\r\n      firstName: this.createRegisterForm.value.name,\r\n      lastName: this.createRegisterForm.value.surname,\r\n      username: this.createRegisterForm.value.username,\r\n      password: this.createRegisterForm.value.password,\r\n     // passwordConfirmation: this.createRegisterForm.value.confirmPassword,\r\n      birthdate: this.createRegisterForm.value.birthdate?.toString().slice(0, 10),\r\n      //birthdate: this.createRegisterForm.value.birthdate,\r\n      email: this.createRegisterForm.value.username\r\n      // role: this.createRegisterForm.value.role as RoleEnum,\r\n      // reservationRequestNotification: this.createRegisterForm.value.requestNotification,\r\n      // reservationCancellationNotification: this.createRegisterForm.value.cancellationNotification,\r\n      // ownerRatingNotification: this.createRegisterForm.value.ownerRatingNotification,\r\n      // accommodationRatingNotification: this.createRegisterForm.value.accommodationRatingNotification,\r\n      // ownerRepliedToRequestNotification: this.createRegisterForm.value.ownerRepliedNotification,\r\n      // deleted: false // Assuming this is a default value\r\n    };\r\n\r\n    // Calling the service method to register the user\r\n    this.userService.registerUser(user).subscribe({\r\n      next: (data: UserPostDTO) => {\r\n        // Successful registration navigation logic\r\n        console.log('User registered successfully:', data);\r\n        this.navigateToHome(); // Example navigation to home page after registration\r\n      },\r\n      error: (error) => {\r\n        // Error handling logic, if needed\r\n        console.error('Error occurred during registration:', error);\r\n        // Handle error feedback to the user, e.g., display error message\r\n      }\r\n    });\r\n\r\n    // Optionally, reset the form after successful registration\r\n    // this.createRegisterForm.reset(); // Uncomment if needed\r\n  }\r\n\r\n  // Method to handle slide toggle change for request notification\r\n  onSlideToggleChangeRequestNotification(event: MatSlideToggleChange) {\r\n    this.createRegisterForm.patchValue({ requestNotification: event.checked });\r\n  }\r\n\r\n  // Method to handle slide toggle change for cancellation notification\r\n  onSlideToggleChangeCancellationNotification(event: MatSlideToggleChange) {\r\n    this.createRegisterForm.patchValue({ cancellationNotification: event.checked });\r\n  }\r\n\r\n  // Method to handle slide toggle change for owner rating notification\r\n  onSlideToggleChangeOwnerRatingNotification(event: MatSlideToggleChange) {\r\n    this.createRegisterForm.patchValue({ ownerRatingNotification: event.checked });\r\n  }\r\n\r\n  // Method to handle slide toggle change for accommodation rating notification\r\n  onSlideToggleChangeAccommodationRatingNotification(event: MatSlideToggleChange) {\r\n    this.createRegisterForm.patchValue({ accommodationRatingNotification: event.checked });\r\n  }\r\n\r\n  // Method to handle slide toggle change for owner replied notification\r\n  onSlideToggleChangeOwnerRepliedRequestNotification(event: MatSlideToggleChange) {\r\n    this.createRegisterForm.patchValue({ ownerRepliedNotification: event.checked });\r\n  }\r\n\r\n  // Method to handle role selection change\r\n  onRoleSelectionChange(event: MatSelectChange) {\r\n    // Example implementation based on selected role\r\n    const selectedRole = event.value;\r\n    if (selectedRole === 'ADMIN') {\r\n      // Disable certain notifications for ADMIN role\r\n      this.createRegisterForm.get('requestNotification')?.disable();\r\n      this.createRegisterForm.get('cancellationNotification')?.disable();\r\n      this.createRegisterForm.get('ownerRatingNotification')?.disable();\r\n      this.createRegisterForm.get('accommodationRatingNotification')?.disable();\r\n      this.createRegisterForm.get('ownerRepliedNotification')?.disable();\r\n    } else if (selectedRole === 'GUEST') {\r\n      // Enable specific notifications for GUEST role\r\n      this.createRegisterForm.get('requestNotification')?.disable();\r\n      this.createRegisterForm.get('cancellationNotification')?.disable();\r\n      this.createRegisterForm.get('ownerRatingNotification')?.disable();\r\n      this.createRegisterForm.get('accommodationRatingNotification')?.disable();\r\n      this.createRegisterForm.get('ownerRepliedNotification')?.enable();\r\n    } else if (selectedRole === 'OWNER') {\r\n      // Enable certain notifications for OWNER role\r\n      this.createRegisterForm.get('requestNotification')?.enable();\r\n      this.createRegisterForm.get('cancellationNotification')?.enable();\r\n      this.createRegisterForm.get('ownerRatingNotification')?.enable();\r\n      this.createRegisterForm.get('accommodationRatingNotification')?.enable();\r\n      this.createRegisterForm.get('ownerRepliedNotification')?.disable();\r\n    }\r\n  }\r\n\r\n  // // Custom validator function for matching passwords\r\n  // passwordMatchValidator():boolean | null {\r\n  //   const password = this.createRegisterForm.get('password')?.value;\r\n  //   const confirmPassword = this.createRegisterForm.get('confirmPassword')?.value;\r\n\r\n  //   return password === confirmPassword ? null : { passwordMismatch: true };\r\n  // }\r\n\r\n\r\n  // Getter for form validity check\r\n  get isFormValid(): boolean {\r\n    return this.createRegisterForm.valid;\r\n  }\r\n}\r\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}