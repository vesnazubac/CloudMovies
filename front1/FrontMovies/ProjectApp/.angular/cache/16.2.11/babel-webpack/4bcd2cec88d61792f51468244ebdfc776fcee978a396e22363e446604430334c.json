{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/USER/Desktop/Front-end/ProjectApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { getNoKeysSpecifiedError, TestKey, _getTextWithExcludedElements, handleAutoChangeDetectionStatus, stopHandlingAutoChangeDetectionStatus, HarnessEnvironment } from '@angular/cdk/testing';\nimport { flush } from '@angular/core/testing';\nimport { takeWhile } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\nimport * as keyCodes from '@angular/cdk/keycodes';\nimport { PERIOD } from '@angular/cdk/keycodes';\n\n/** Unique symbol that is used to patch a property to a proxy zone. */\nconst stateObservableSymbol = Symbol('ProxyZone_PATCHED#stateObservable');\n/**\n * Interceptor that can be set up in a `ProxyZone` instance. The interceptor\n * will keep track of the task state and emit whenever the state changes.\n *\n * This serves as a workaround for https://github.com/angular/angular/issues/32896.\n */\nclass TaskStateZoneInterceptor {\n  constructor(_lastState) {\n    this._lastState = _lastState;\n    /** Subject that can be used to emit a new state change. */\n    this._stateSubject = new BehaviorSubject(this._lastState ? this._getTaskStateFromInternalZoneState(this._lastState) : {\n      stable: true\n    });\n    /** Public observable that emits whenever the task state changes. */\n    this.state = this._stateSubject;\n  }\n  /** This will be called whenever the task state changes in the intercepted zone. */\n  onHasTask(delegate, current, target, hasTaskState) {\n    if (current === target) {\n      this._stateSubject.next(this._getTaskStateFromInternalZoneState(hasTaskState));\n    }\n  }\n  /** Gets the task state from the internal ZoneJS task state. */\n  _getTaskStateFromInternalZoneState(state) {\n    return {\n      stable: !state.macroTask && !state.microTask\n    };\n  }\n  /**\n   * Sets up the custom task state Zone interceptor in the  `ProxyZone`. Throws if\n   * no `ProxyZone` could be found.\n   * @returns an observable that emits whenever the task state changes.\n   */\n  static setup() {\n    if (Zone === undefined) {\n      throw Error('Could not find ZoneJS. For test harnesses running in TestBed, ' + 'ZoneJS needs to be installed.');\n    }\n    // tslint:disable-next-line:variable-name\n    const ProxyZoneSpec = Zone['ProxyZoneSpec'];\n    // If there is no \"ProxyZoneSpec\" installed, we throw an error and recommend\n    // setting up the proxy zone by pulling in the testing bundle.\n    if (!ProxyZoneSpec) {\n      throw Error('ProxyZoneSpec is needed for the test harnesses but could not be found. ' + 'Please make sure that your environment includes zone.js/dist/zone-testing.js');\n    }\n    // Ensure that there is a proxy zone instance set up, and get\n    // a reference to the instance if present.\n    const zoneSpec = ProxyZoneSpec.assertPresent();\n    // If there already is a delegate registered in the proxy zone, and it\n    // is type of the custom task state interceptor, we just use that state\n    // observable. This allows us to only intercept Zone once per test\n    // (similar to how `fakeAsync` or `async` work).\n    if (zoneSpec[stateObservableSymbol]) {\n      return zoneSpec[stateObservableSymbol];\n    }\n    // Since we intercept on environment creation and the fixture has been\n    // created before, we might have missed tasks scheduled before. Fortunately\n    // the proxy zone keeps track of the previous task state, so we can just pass\n    // this as initial state to the task zone interceptor.\n    const interceptor = new TaskStateZoneInterceptor(zoneSpec.lastTaskState);\n    const zoneSpecOnHasTask = zoneSpec.onHasTask.bind(zoneSpec);\n    // We setup the task state interceptor in the `ProxyZone`. Note that we cannot register\n    // the interceptor as a new proxy zone delegate because it would mean that other zone\n    // delegates (e.g. `FakeAsyncTestZone` or `AsyncTestZone`) can accidentally overwrite/disable\n    // our interceptor. Since we just intend to monitor the task state of the proxy zone, it is\n    // sufficient to just patch the proxy zone. This also avoids that we interfere with the task\n    // queue scheduling logic.\n    zoneSpec.onHasTask = function (...args) {\n      zoneSpecOnHasTask(...args);\n      interceptor.onHasTask(...args);\n    };\n    return zoneSpec[stateObservableSymbol] = interceptor.state;\n  }\n}\n\n/** Used to generate unique IDs for events. */\nlet uniqueIds = 0;\n/**\n * Creates a browser MouseEvent with the specified options.\n * @docs-private\n */\nfunction createMouseEvent(type, clientX = 0, clientY = 0, offsetX = 0, offsetY = 0, button = 0, modifiers = {}) {\n  // Note: We cannot determine the position of the mouse event based on the screen\n  // because the dimensions and position of the browser window are not available\n  // To provide reasonable `screenX` and `screenY` coordinates, we simply use the\n  // client coordinates as if the browser is opened in fullscreen.\n  const screenX = clientX;\n  const screenY = clientY;\n  const event = new MouseEvent(type, {\n    bubbles: true,\n    cancelable: true,\n    composed: true,\n    view: window,\n    detail: 1,\n    relatedTarget: null,\n    screenX,\n    screenY,\n    clientX,\n    clientY,\n    ctrlKey: modifiers.control,\n    altKey: modifiers.alt,\n    shiftKey: modifiers.shift,\n    metaKey: modifiers.meta,\n    button: button,\n    buttons: 1\n  });\n  // The `MouseEvent` constructor doesn't allow us to pass these properties into the constructor.\n  // Override them to `1`, because they're used for fake screen reader event detection.\n  if (offsetX != null) {\n    defineReadonlyEventProperty(event, 'offsetX', offsetX);\n  }\n  if (offsetY != null) {\n    defineReadonlyEventProperty(event, 'offsetY', offsetY);\n  }\n  return event;\n}\n/**\n * Creates a browser `PointerEvent` with the specified options. Pointer events\n * by default will appear as if they are the primary pointer of their type.\n * https://www.w3.org/TR/pointerevents2/#dom-pointerevent-isprimary.\n *\n * For example, if pointer events for a multi-touch interaction are created, the non-primary\n * pointer touches would need to be represented by non-primary pointer events.\n *\n * @docs-private\n */\nfunction createPointerEvent(type, clientX = 0, clientY = 0, offsetX, offsetY, options = {\n  isPrimary: true\n}) {\n  const event = new PointerEvent(type, {\n    bubbles: true,\n    cancelable: true,\n    composed: true,\n    view: window,\n    clientX,\n    clientY,\n    ...options\n  });\n  if (offsetX != null) {\n    defineReadonlyEventProperty(event, 'offsetX', offsetX);\n  }\n  if (offsetY != null) {\n    defineReadonlyEventProperty(event, 'offsetY', offsetY);\n  }\n  return event;\n}\n/**\n * Creates a browser TouchEvent with the specified pointer coordinates.\n * @docs-private\n */\nfunction createTouchEvent(type, pageX = 0, pageY = 0, clientX = 0, clientY = 0) {\n  // We cannot use the `TouchEvent` or `Touch` because Firefox and Safari lack support.\n  // TODO: Switch to the constructor API when it is available for Firefox and Safari.\n  const event = document.createEvent('UIEvent');\n  const touchDetails = {\n    pageX,\n    pageY,\n    clientX,\n    clientY,\n    identifier: uniqueIds++\n  };\n  // TS3.6 removes the initUIEvent method and suggests porting to \"new UIEvent()\".\n  event.initUIEvent(type, true, true, window, 0);\n  // Most of the browsers don't have a \"initTouchEvent\" method that can be used to define\n  // the touch details.\n  defineReadonlyEventProperty(event, 'touches', [touchDetails]);\n  defineReadonlyEventProperty(event, 'targetTouches', [touchDetails]);\n  defineReadonlyEventProperty(event, 'changedTouches', [touchDetails]);\n  return event;\n}\n/**\n * Creates a keyboard event with the specified key and modifiers.\n * @docs-private\n */\nfunction createKeyboardEvent(type, keyCode = 0, key = '', modifiers = {}) {\n  return new KeyboardEvent(type, {\n    bubbles: true,\n    cancelable: true,\n    composed: true,\n    view: window,\n    keyCode: keyCode,\n    key: key,\n    shiftKey: modifiers.shift,\n    metaKey: modifiers.meta,\n    altKey: modifiers.alt,\n    ctrlKey: modifiers.control\n  });\n}\n/**\n * Creates a fake event object with any desired event type.\n * @docs-private\n */\nfunction createFakeEvent(type, bubbles = false, cancelable = true, composed = true) {\n  return new Event(type, {\n    bubbles,\n    cancelable,\n    composed\n  });\n}\n/**\n * Defines a readonly property on the given event object. Readonly properties on an event object\n * are always set as configurable as that matches default readonly properties for DOM event objects.\n */\nfunction defineReadonlyEventProperty(event, propertyName, value) {\n  Object.defineProperty(event, propertyName, {\n    get: () => value,\n    configurable: true\n  });\n}\n\n/**\n * Utility to dispatch any event on a Node.\n * @docs-private\n */\nfunction dispatchEvent(node, event) {\n  node.dispatchEvent(event);\n  return event;\n}\n/**\n * Shorthand to dispatch a fake event on a specified node.\n * @docs-private\n */\nfunction dispatchFakeEvent(node, type, bubbles) {\n  return dispatchEvent(node, createFakeEvent(type, bubbles));\n}\n/**\n * Shorthand to dispatch a keyboard event with a specified key code and\n * optional modifiers.\n * @docs-private\n */\nfunction dispatchKeyboardEvent(node, type, keyCode, key, modifiers) {\n  return dispatchEvent(node, createKeyboardEvent(type, keyCode, key, modifiers));\n}\n/**\n * Shorthand to dispatch a mouse event on the specified coordinates.\n * @docs-private\n */\nfunction dispatchMouseEvent(node, type, clientX = 0, clientY = 0, offsetX, offsetY, button, modifiers) {\n  return dispatchEvent(node, createMouseEvent(type, clientX, clientY, offsetX, offsetY, button, modifiers));\n}\n/**\n * Shorthand to dispatch a pointer event on the specified coordinates.\n * @docs-private\n */\nfunction dispatchPointerEvent(node, type, clientX = 0, clientY = 0, offsetX, offsetY, options) {\n  return dispatchEvent(node, createPointerEvent(type, clientX, clientY, offsetX, offsetY, options));\n}\n/**\n * Shorthand to dispatch a touch event on the specified coordinates.\n * @docs-private\n */\nfunction dispatchTouchEvent(node, type, pageX = 0, pageY = 0, clientX = 0, clientY = 0) {\n  return dispatchEvent(node, createTouchEvent(type, pageX, pageY, clientX, clientY));\n}\nfunction triggerFocusChange(element, event) {\n  let eventFired = false;\n  const handler = () => eventFired = true;\n  element.addEventListener(event, handler);\n  element[event]();\n  element.removeEventListener(event, handler);\n  if (!eventFired) {\n    dispatchFakeEvent(element, event);\n  }\n}\n/**\n * Patches an elements focus and blur methods to emit events consistently and predictably.\n * This is necessary, because some browsers can call the focus handlers asynchronously,\n * while others won't fire them at all if the browser window is not focused.\n * @docs-private\n */\n// TODO: Check if this element focus patching is still needed for local testing,\n// where browser is not necessarily focused.\nfunction patchElementFocus(element) {\n  element.focus = () => dispatchFakeEvent(element, 'focus');\n  element.blur = () => dispatchFakeEvent(element, 'blur');\n}\n/** @docs-private */\nfunction triggerFocus(element) {\n  triggerFocusChange(element, 'focus');\n}\n/** @docs-private */\nfunction triggerBlur(element) {\n  triggerFocusChange(element, 'blur');\n}\n\n/** Input types for which the value can be entered incrementally. */\nconst incrementalInputTypes = new Set(['text', 'email', 'hidden', 'password', 'search', 'tel', 'url']);\n/**\n * Checks whether the given Element is a text input element.\n * @docs-private\n */\nfunction isTextInput(element) {\n  const nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' || nodeName === 'textarea';\n}\nfunction typeInElement(element, ...modifiersAndKeys) {\n  const first = modifiersAndKeys[0];\n  let modifiers;\n  let rest;\n  if (first !== undefined && typeof first !== 'string' && first.keyCode === undefined && first.key === undefined) {\n    modifiers = first;\n    rest = modifiersAndKeys.slice(1);\n  } else {\n    modifiers = {};\n    rest = modifiersAndKeys;\n  }\n  const isInput = isTextInput(element);\n  const inputType = element.getAttribute('type') || 'text';\n  const keys = rest.map(k => typeof k === 'string' ? k.split('').map(c => ({\n    keyCode: c.toUpperCase().charCodeAt(0),\n    key: c\n  })) : [k]).reduce((arr, k) => arr.concat(k), []);\n  // Throw an error if no keys have been specified. Calling this function with no\n  // keys should not result in a focus event being dispatched unexpectedly.\n  if (keys.length === 0) {\n    throw getNoKeysSpecifiedError();\n  }\n  // We simulate the user typing in a value by incrementally assigning the value below. The problem\n  // is that for some input types, the browser won't allow for an invalid value to be set via the\n  // `value` property which will always be the case when going character-by-character. If we detect\n  // such an input, we have to set the value all at once or listeners to the `input` event (e.g.\n  // the `ReactiveFormsModule` uses such an approach) won't receive the correct value.\n  const enterValueIncrementally = inputType === 'number' ?\n  // The value can be set character by character in number inputs if it doesn't have any decimals.\n  keys.every(key => key.key !== '.' && key.key !== '-' && key.keyCode !== PERIOD) : incrementalInputTypes.has(inputType);\n  triggerFocus(element);\n  // When we aren't entering the value incrementally, assign it all at once ahead\n  // of time so that any listeners to the key events below will have access to it.\n  if (!enterValueIncrementally) {\n    element.value = keys.reduce((value, key) => value + (key.key || ''), '');\n  }\n  for (const key of keys) {\n    dispatchKeyboardEvent(element, 'keydown', key.keyCode, key.key, modifiers);\n    dispatchKeyboardEvent(element, 'keypress', key.keyCode, key.key, modifiers);\n    if (isInput && key.key && key.key.length === 1) {\n      if (enterValueIncrementally) {\n        element.value += key.key;\n        dispatchFakeEvent(element, 'input');\n      }\n    }\n    dispatchKeyboardEvent(element, 'keyup', key.keyCode, key.key, modifiers);\n  }\n  // Since we weren't dispatching `input` events while sending the keys, we have to do it now.\n  if (!enterValueIncrementally) {\n    dispatchFakeEvent(element, 'input');\n  }\n}\n/**\n * Clears the text in an input or textarea element.\n * @docs-private\n */\nfunction clearElement(element) {\n  triggerFocus(element);\n  element.value = '';\n  dispatchFakeEvent(element, 'input');\n}\n\n// These are private APIs that are used both by the public APIs inside of this package, as well\n\n/** Maps `TestKey` constants to the `keyCode` and `key` values used by native browser events. */\nconst keyMap = {\n  [TestKey.BACKSPACE]: {\n    keyCode: keyCodes.BACKSPACE,\n    key: 'Backspace'\n  },\n  [TestKey.TAB]: {\n    keyCode: keyCodes.TAB,\n    key: 'Tab'\n  },\n  [TestKey.ENTER]: {\n    keyCode: keyCodes.ENTER,\n    key: 'Enter'\n  },\n  [TestKey.SHIFT]: {\n    keyCode: keyCodes.SHIFT,\n    key: 'Shift'\n  },\n  [TestKey.CONTROL]: {\n    keyCode: keyCodes.CONTROL,\n    key: 'Control'\n  },\n  [TestKey.ALT]: {\n    keyCode: keyCodes.ALT,\n    key: 'Alt'\n  },\n  [TestKey.ESCAPE]: {\n    keyCode: keyCodes.ESCAPE,\n    key: 'Escape'\n  },\n  [TestKey.PAGE_UP]: {\n    keyCode: keyCodes.PAGE_UP,\n    key: 'PageUp'\n  },\n  [TestKey.PAGE_DOWN]: {\n    keyCode: keyCodes.PAGE_DOWN,\n    key: 'PageDown'\n  },\n  [TestKey.END]: {\n    keyCode: keyCodes.END,\n    key: 'End'\n  },\n  [TestKey.HOME]: {\n    keyCode: keyCodes.HOME,\n    key: 'Home'\n  },\n  [TestKey.LEFT_ARROW]: {\n    keyCode: keyCodes.LEFT_ARROW,\n    key: 'ArrowLeft'\n  },\n  [TestKey.UP_ARROW]: {\n    keyCode: keyCodes.UP_ARROW,\n    key: 'ArrowUp'\n  },\n  [TestKey.RIGHT_ARROW]: {\n    keyCode: keyCodes.RIGHT_ARROW,\n    key: 'ArrowRight'\n  },\n  [TestKey.DOWN_ARROW]: {\n    keyCode: keyCodes.DOWN_ARROW,\n    key: 'ArrowDown'\n  },\n  [TestKey.INSERT]: {\n    keyCode: keyCodes.INSERT,\n    key: 'Insert'\n  },\n  [TestKey.DELETE]: {\n    keyCode: keyCodes.DELETE,\n    key: 'Delete'\n  },\n  [TestKey.F1]: {\n    keyCode: keyCodes.F1,\n    key: 'F1'\n  },\n  [TestKey.F2]: {\n    keyCode: keyCodes.F2,\n    key: 'F2'\n  },\n  [TestKey.F3]: {\n    keyCode: keyCodes.F3,\n    key: 'F3'\n  },\n  [TestKey.F4]: {\n    keyCode: keyCodes.F4,\n    key: 'F4'\n  },\n  [TestKey.F5]: {\n    keyCode: keyCodes.F5,\n    key: 'F5'\n  },\n  [TestKey.F6]: {\n    keyCode: keyCodes.F6,\n    key: 'F6'\n  },\n  [TestKey.F7]: {\n    keyCode: keyCodes.F7,\n    key: 'F7'\n  },\n  [TestKey.F8]: {\n    keyCode: keyCodes.F8,\n    key: 'F8'\n  },\n  [TestKey.F9]: {\n    keyCode: keyCodes.F9,\n    key: 'F9'\n  },\n  [TestKey.F10]: {\n    keyCode: keyCodes.F10,\n    key: 'F10'\n  },\n  [TestKey.F11]: {\n    keyCode: keyCodes.F11,\n    key: 'F11'\n  },\n  [TestKey.F12]: {\n    keyCode: keyCodes.F12,\n    key: 'F12'\n  },\n  [TestKey.META]: {\n    keyCode: keyCodes.META,\n    key: 'Meta'\n  },\n  [TestKey.COMMA]: {\n    keyCode: keyCodes.COMMA,\n    key: ','\n  }\n};\n/** A `TestElement` implementation for unit tests. */\nclass UnitTestElement {\n  constructor(element, _stabilize) {\n    this.element = element;\n    this._stabilize = _stabilize;\n  }\n  /** Blur the element. */\n  blur() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      triggerBlur(_this.element);\n      yield _this._stabilize();\n    })();\n  }\n  /** Clear the element's input (for input and textarea elements only). */\n  clear() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (!isTextInput(_this2.element)) {\n        throw Error('Attempting to clear an invalid element');\n      }\n      clearElement(_this2.element);\n      yield _this2._stabilize();\n    })();\n  }\n  click(...args) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const isDisabled = _this3.element.disabled === true;\n      // If the element is `disabled` and has a `disabled` property, we emit the mouse event\n      // sequence but not dispatch the `click` event. This is necessary to keep the behavior\n      // consistent with an actual user interaction. The click event is not necessarily\n      // automatically prevented by the browser. There is mismatch between Firefox and Chromium:\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=329509.\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=1115661.\n      yield _this3._dispatchMouseEventSequence(isDisabled ? null : 'click', args, 0);\n      yield _this3._stabilize();\n    })();\n  }\n  rightClick(...args) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      yield _this4._dispatchMouseEventSequence('contextmenu', args, 2);\n      yield _this4._stabilize();\n    })();\n  }\n  /** Focus the element. */\n  focus() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      triggerFocus(_this5.element);\n      yield _this5._stabilize();\n    })();\n  }\n  /** Get the computed value of the given CSS property for the element. */\n  getCssValue(property) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      yield _this6._stabilize();\n      // TODO(mmalerba): Consider adding value normalization if we run into common cases where its\n      //  needed.\n      return getComputedStyle(_this6.element).getPropertyValue(property);\n    })();\n  }\n  /** Hovers the mouse over the element. */\n  hover() {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      _this7._dispatchPointerEventIfSupported('pointerenter');\n      dispatchMouseEvent(_this7.element, 'mouseover');\n      dispatchMouseEvent(_this7.element, 'mouseenter');\n      yield _this7._stabilize();\n    })();\n  }\n  /** Moves the mouse away from the element. */\n  mouseAway() {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      _this8._dispatchPointerEventIfSupported('pointerleave');\n      dispatchMouseEvent(_this8.element, 'mouseout');\n      dispatchMouseEvent(_this8.element, 'mouseleave');\n      yield _this8._stabilize();\n    })();\n  }\n  sendKeys(...modifiersAndKeys) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      const args = modifiersAndKeys.map(k => typeof k === 'number' ? keyMap[k] : k);\n      typeInElement(_this9.element, ...args);\n      yield _this9._stabilize();\n    })();\n  }\n  /**\n   * Gets the text from the element.\n   * @param options Options that affect what text is included.\n   */\n  text(options) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      yield _this10._stabilize();\n      if (options?.exclude) {\n        return _getTextWithExcludedElements(_this10.element, options.exclude);\n      }\n      return (_this10.element.textContent || '').trim();\n    })();\n  }\n  /**\n   * Sets the value of a `contenteditable` element.\n   * @param value Value to be set on the element.\n   */\n  setContenteditableValue(value) {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      const contenteditableAttr = yield _this11.getAttribute('contenteditable');\n      if (contenteditableAttr !== '' && contenteditableAttr !== 'true') {\n        throw new Error('setContenteditableValue can only be called on a `contenteditable` element.');\n      }\n      yield _this11._stabilize();\n      _this11.element.textContent = value;\n    })();\n  }\n  /** Gets the value for the given attribute from the element. */\n  getAttribute(name) {\n    var _this12 = this;\n    return _asyncToGenerator(function* () {\n      yield _this12._stabilize();\n      return _this12.element.getAttribute(name);\n    })();\n  }\n  /** Checks whether the element has the given class. */\n  hasClass(name) {\n    var _this13 = this;\n    return _asyncToGenerator(function* () {\n      yield _this13._stabilize();\n      return _this13.element.classList.contains(name);\n    })();\n  }\n  /** Gets the dimensions of the element. */\n  getDimensions() {\n    var _this14 = this;\n    return _asyncToGenerator(function* () {\n      yield _this14._stabilize();\n      return _this14.element.getBoundingClientRect();\n    })();\n  }\n  /** Gets the value of a property of an element. */\n  getProperty(name) {\n    var _this15 = this;\n    return _asyncToGenerator(function* () {\n      yield _this15._stabilize();\n      return _this15.element[name];\n    })();\n  }\n  /** Sets the value of a property of an input. */\n  setInputValue(value) {\n    var _this16 = this;\n    return _asyncToGenerator(function* () {\n      _this16.element.value = value;\n      yield _this16._stabilize();\n    })();\n  }\n  /** Selects the options at the specified indexes inside of a native `select` element. */\n  selectOptions(...optionIndexes) {\n    var _this17 = this;\n    return _asyncToGenerator(function* () {\n      let hasChanged = false;\n      const options = _this17.element.querySelectorAll('option');\n      const indexes = new Set(optionIndexes); // Convert to a set to remove duplicates.\n      for (let i = 0; i < options.length; i++) {\n        const option = options[i];\n        const wasSelected = option.selected;\n        // We have to go through `option.selected`, because `HTMLSelectElement.value` doesn't\n        // allow for multiple options to be selected, even in `multiple` mode.\n        option.selected = indexes.has(i);\n        if (option.selected !== wasSelected) {\n          hasChanged = true;\n          dispatchFakeEvent(_this17.element, 'change');\n        }\n      }\n      if (hasChanged) {\n        yield _this17._stabilize();\n      }\n    })();\n  }\n  /** Checks whether this element matches the given selector. */\n  matchesSelector(selector) {\n    var _this18 = this;\n    return _asyncToGenerator(function* () {\n      yield _this18._stabilize();\n      const elementPrototype = Element.prototype;\n      return (elementPrototype['matches'] || elementPrototype['msMatchesSelector']).call(_this18.element, selector);\n    })();\n  }\n  /** Checks whether the element is focused. */\n  isFocused() {\n    var _this19 = this;\n    return _asyncToGenerator(function* () {\n      yield _this19._stabilize();\n      return document.activeElement === _this19.element;\n    })();\n  }\n  /**\n   * Dispatches an event with a particular name.\n   * @param name Name of the event to be dispatched.\n   */\n  dispatchEvent(name, data) {\n    var _this20 = this;\n    return _asyncToGenerator(function* () {\n      const event = createFakeEvent(name);\n      if (data) {\n        // tslint:disable-next-line:ban Have to use `Object.assign` to preserve the original object.\n        Object.assign(event, data);\n      }\n      dispatchEvent(_this20.element, event);\n      yield _this20._stabilize();\n    })();\n  }\n  /**\n   * Dispatches a pointer event on the current element if the browser supports it.\n   * @param name Name of the pointer event to be dispatched.\n   * @param clientX Coordinate of the user's pointer along the X axis.\n   * @param clientY Coordinate of the user's pointer along the Y axis.\n   * @param button Mouse button that should be pressed when dispatching the event.\n   */\n  _dispatchPointerEventIfSupported(name, clientX, clientY, offsetX, offsetY, button) {\n    // The latest versions of all browsers we support have the new `PointerEvent` API.\n    // Though since we capture the two most recent versions of these browsers, we also\n    // need to support Safari 12 at time of writing. Safari 12 does not have support for this,\n    // so we need to conditionally create and dispatch these events based on feature detection.\n    if (typeof PointerEvent !== 'undefined' && PointerEvent) {\n      dispatchPointerEvent(this.element, name, clientX, clientY, offsetX, offsetY, {\n        isPrimary: true,\n        button\n      });\n    }\n  }\n  /**\n   * Dispatches all the events that are part of a mouse event sequence\n   * and then emits a given primary event at the end, if speciifed.\n   */\n  _dispatchMouseEventSequence(primaryEventName, args, button) {\n    var _this21 = this;\n    return _asyncToGenerator(function* () {\n      let clientX = undefined;\n      let clientY = undefined;\n      let offsetX = undefined;\n      let offsetY = undefined;\n      let modifiers = {};\n      if (args.length && typeof args[args.length - 1] === 'object') {\n        modifiers = args.pop();\n      }\n      if (args.length) {\n        const {\n          left,\n          top,\n          width,\n          height\n        } = yield _this21.getDimensions();\n        offsetX = args[0] === 'center' ? width / 2 : args[0];\n        offsetY = args[0] === 'center' ? height / 2 : args[1];\n        // Round the computed click position as decimal pixels are not\n        // supported by mouse events and could lead to unexpected results.\n        clientX = Math.round(left + offsetX);\n        clientY = Math.round(top + offsetY);\n      }\n      _this21._dispatchPointerEventIfSupported('pointerdown', clientX, clientY, offsetX, offsetY, button);\n      dispatchMouseEvent(_this21.element, 'mousedown', clientX, clientY, offsetX, offsetY, button, modifiers);\n      _this21._dispatchPointerEventIfSupported('pointerup', clientX, clientY, offsetX, offsetY, button);\n      dispatchMouseEvent(_this21.element, 'mouseup', clientX, clientY, offsetX, offsetY, button, modifiers);\n      // If a primary event name is specified, emit it after the mouse event sequence.\n      if (primaryEventName !== null) {\n        dispatchMouseEvent(_this21.element, primaryEventName, clientX, clientY, offsetX, offsetY, button, modifiers);\n      }\n      // This call to _stabilize should not be needed since the callers will already do that them-\n      // selves. Nevertheless it breaks some tests in g3 without it. It needs to be investigated\n      // why removing breaks those tests.\n      // See: https://github.com/angular/components/pull/20758/files#r520886256.\n      yield _this21._stabilize();\n    })();\n  }\n}\n\n/** The default environment options. */\nconst defaultEnvironmentOptions = {\n  queryFn: (selector, root) => root.querySelectorAll(selector)\n};\n/** Whether auto change detection is currently disabled. */\nlet disableAutoChangeDetection = false;\n/**\n * The set of non-destroyed fixtures currently being used by `TestbedHarnessEnvironment` instances.\n */\nconst activeFixtures = new Set();\n/**\n * Installs a handler for change detection batching status changes for a specific fixture.\n * @param fixture The fixture to handle change detection batching for.\n */\nfunction installAutoChangeDetectionStatusHandler(fixture) {\n  if (!activeFixtures.size) {\n    handleAutoChangeDetectionStatus(({\n      isDisabled,\n      onDetectChangesNow\n    }) => {\n      disableAutoChangeDetection = isDisabled;\n      if (onDetectChangesNow) {\n        Promise.all(Array.from(activeFixtures).map(detectChanges)).then(onDetectChangesNow);\n      }\n    });\n  }\n  activeFixtures.add(fixture);\n}\n/**\n * Uninstalls a handler for change detection batching status changes for a specific fixture.\n * @param fixture The fixture to stop handling change detection batching for.\n */\nfunction uninstallAutoChangeDetectionStatusHandler(fixture) {\n  activeFixtures.delete(fixture);\n  if (!activeFixtures.size) {\n    stopHandlingAutoChangeDetectionStatus();\n  }\n}\n/** Whether we are currently in the fake async zone. */\nfunction isInFakeAsyncZone() {\n  return Zone.current.get('FakeAsyncTestZoneSpec') != null;\n}\n/**\n * Triggers change detection for a specific fixture.\n * @param fixture The fixture to trigger change detection for.\n */\nfunction detectChanges(_x) {\n  return _detectChanges.apply(this, arguments);\n}\n/** A `HarnessEnvironment` implementation for Angular's Testbed. */\nfunction _detectChanges() {\n  _detectChanges = _asyncToGenerator(function* (fixture) {\n    fixture.detectChanges();\n    if (isInFakeAsyncZone()) {\n      flush();\n    } else {\n      yield fixture.whenStable();\n    }\n  });\n  return _detectChanges.apply(this, arguments);\n}\nclass TestbedHarnessEnvironment extends HarnessEnvironment {\n  constructor(rawRootElement, _fixture, options) {\n    super(rawRootElement);\n    this._fixture = _fixture;\n    /** Whether the environment has been destroyed. */\n    this._destroyed = false;\n    this._options = {\n      ...defaultEnvironmentOptions,\n      ...options\n    };\n    this._taskState = TaskStateZoneInterceptor.setup();\n    this._stabilizeCallback = () => this.forceStabilize();\n    installAutoChangeDetectionStatusHandler(_fixture);\n    _fixture.componentRef.onDestroy(() => {\n      uninstallAutoChangeDetectionStatusHandler(_fixture);\n      this._destroyed = true;\n    });\n  }\n  /** Creates a `HarnessLoader` rooted at the given fixture's root element. */\n  static loader(fixture, options) {\n    return new TestbedHarnessEnvironment(fixture.nativeElement, fixture, options);\n  }\n  /**\n   * Creates a `HarnessLoader` at the document root. This can be used if harnesses are\n   * located outside of a fixture (e.g. overlays appended to the document body).\n   */\n  static documentRootLoader(fixture, options) {\n    return new TestbedHarnessEnvironment(document.body, fixture, options);\n  }\n  /** Gets the native DOM element corresponding to the given TestElement. */\n  static getNativeElement(el) {\n    if (el instanceof UnitTestElement) {\n      return el.element;\n    }\n    throw Error('This TestElement was not created by the TestbedHarnessEnvironment');\n  }\n  /**\n   * Creates an instance of the given harness type, using the fixture's root element as the\n   * harness's host element. This method should be used when creating a harness for the root element\n   * of a fixture, as components do not have the correct selector when they are created as the root\n   * of the fixture.\n   */\n  static harnessForFixture(fixture, harnessType, options) {\n    return _asyncToGenerator(function* () {\n      const environment = new TestbedHarnessEnvironment(fixture.nativeElement, fixture, options);\n      yield environment.forceStabilize();\n      return environment.createComponentHarness(harnessType, fixture.nativeElement);\n    })();\n  }\n  /**\n   * Flushes change detection and async tasks captured in the Angular zone.\n   * In most cases it should not be necessary to call this manually. However, there may be some edge\n   * cases where it is needed to fully flush animation events.\n   */\n  forceStabilize() {\n    var _this22 = this;\n    return _asyncToGenerator(function* () {\n      if (!disableAutoChangeDetection) {\n        if (_this22._destroyed) {\n          throw Error('Harness is attempting to use a fixture that has already been destroyed.');\n        }\n        yield detectChanges(_this22._fixture);\n      }\n    })();\n  }\n  /**\n   * Waits for all scheduled or running async tasks to complete. This allows harness\n   * authors to wait for async tasks outside of the Angular zone.\n   */\n  waitForTasksOutsideAngular() {\n    var _this23 = this;\n    return _asyncToGenerator(function* () {\n      // If we run in the fake async zone, we run \"flush\" to run any scheduled tasks. This\n      // ensures that the harnesses behave inside of the FakeAsyncTestZone similar to the\n      // \"AsyncTestZone\" and the root zone (i.e. neither fakeAsync or async). Note that we\n      // cannot just rely on the task state observable to become stable because the state will\n      // never change. This is because the task queue will be only drained if the fake async\n      // zone is being flushed.\n      if (isInFakeAsyncZone()) {\n        flush();\n      }\n      // Wait until the task queue has been drained and the zone is stable. Note that\n      // we cannot rely on \"fixture.whenStable\" since it does not catch tasks scheduled\n      // outside of the Angular zone. For test harnesses, we want to ensure that the\n      // app is fully stabilized and therefore need to use our own zone interceptor.\n      yield _this23._taskState.pipe(takeWhile(state => !state.stable)).toPromise();\n    })();\n  }\n  /** Gets the root element for the document. */\n  getDocumentRoot() {\n    return document.body;\n  }\n  /** Creates a `TestElement` from a raw element. */\n  createTestElement(element) {\n    return new UnitTestElement(element, this._stabilizeCallback);\n  }\n  /** Creates a `HarnessLoader` rooted at the given raw element. */\n  createEnvironment(element) {\n    return new TestbedHarnessEnvironment(element, this._fixture, this._options);\n  }\n  /**\n   * Gets a list of all elements matching the given selector under this environment's root element.\n   */\n  getAllRawElements(selector) {\n    var _this24 = this;\n    return _asyncToGenerator(function* () {\n      yield _this24.forceStabilize();\n      return Array.from(_this24._options.queryFn(selector, _this24.rawRootElement));\n    })();\n  }\n}\nexport { TestbedHarnessEnvironment, UnitTestElement };","map":{"version":3,"names":["getNoKeysSpecifiedError","TestKey","_getTextWithExcludedElements","handleAutoChangeDetectionStatus","stopHandlingAutoChangeDetectionStatus","HarnessEnvironment","flush","takeWhile","BehaviorSubject","keyCodes","PERIOD","stateObservableSymbol","Symbol","TaskStateZoneInterceptor","constructor","_lastState","_stateSubject","_getTaskStateFromInternalZoneState","stable","state","onHasTask","delegate","current","target","hasTaskState","next","macroTask","microTask","setup","Zone","undefined","Error","ProxyZoneSpec","zoneSpec","assertPresent","interceptor","lastTaskState","zoneSpecOnHasTask","bind","args","uniqueIds","createMouseEvent","type","clientX","clientY","offsetX","offsetY","button","modifiers","screenX","screenY","event","MouseEvent","bubbles","cancelable","composed","view","window","detail","relatedTarget","ctrlKey","control","altKey","alt","shiftKey","shift","metaKey","meta","buttons","defineReadonlyEventProperty","createPointerEvent","options","isPrimary","PointerEvent","createTouchEvent","pageX","pageY","document","createEvent","touchDetails","identifier","initUIEvent","createKeyboardEvent","keyCode","key","KeyboardEvent","createFakeEvent","Event","propertyName","value","Object","defineProperty","get","configurable","dispatchEvent","node","dispatchFakeEvent","dispatchKeyboardEvent","dispatchMouseEvent","dispatchPointerEvent","dispatchTouchEvent","triggerFocusChange","element","eventFired","handler","addEventListener","removeEventListener","patchElementFocus","focus","blur","triggerFocus","triggerBlur","incrementalInputTypes","Set","isTextInput","nodeName","toLowerCase","typeInElement","modifiersAndKeys","first","rest","slice","isInput","inputType","getAttribute","keys","map","k","split","c","toUpperCase","charCodeAt","reduce","arr","concat","length","enterValueIncrementally","every","has","clearElement","keyMap","BACKSPACE","TAB","ENTER","SHIFT","CONTROL","ALT","ESCAPE","PAGE_UP","PAGE_DOWN","END","HOME","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","INSERT","DELETE","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","META","COMMA","UnitTestElement","_stabilize","_this","_asyncToGenerator","clear","_this2","click","_this3","isDisabled","disabled","_dispatchMouseEventSequence","rightClick","_this4","_this5","getCssValue","property","_this6","getComputedStyle","getPropertyValue","hover","_this7","_dispatchPointerEventIfSupported","mouseAway","_this8","sendKeys","_this9","text","_this10","exclude","textContent","trim","setContenteditableValue","_this11","contenteditableAttr","name","_this12","hasClass","_this13","classList","contains","getDimensions","_this14","getBoundingClientRect","getProperty","_this15","setInputValue","_this16","selectOptions","optionIndexes","_this17","hasChanged","querySelectorAll","indexes","i","option","wasSelected","selected","matchesSelector","selector","_this18","elementPrototype","Element","prototype","call","isFocused","_this19","activeElement","data","_this20","assign","primaryEventName","_this21","pop","left","top","width","height","Math","round","defaultEnvironmentOptions","queryFn","root","disableAutoChangeDetection","activeFixtures","installAutoChangeDetectionStatusHandler","fixture","size","onDetectChangesNow","Promise","all","Array","from","detectChanges","then","add","uninstallAutoChangeDetectionStatusHandler","delete","isInFakeAsyncZone","_x","_detectChanges","apply","arguments","whenStable","TestbedHarnessEnvironment","rawRootElement","_fixture","_destroyed","_options","_taskState","_stabilizeCallback","forceStabilize","componentRef","onDestroy","loader","nativeElement","documentRootLoader","body","getNativeElement","el","harnessForFixture","harnessType","environment","createComponentHarness","_this22","waitForTasksOutsideAngular","_this23","pipe","toPromise","getDocumentRoot","createTestElement","createEnvironment","getAllRawElements","_this24"],"sources":["C:/Users/USER/Desktop/Front-end/ProjectApp/node_modules/@angular/cdk/fesm2022/testing/testbed.mjs"],"sourcesContent":["import { getNoKeysSpecifiedError, TestKey, _getTextWithExcludedElements, handleAutoChangeDetectionStatus, stopHandlingAutoChangeDetectionStatus, HarnessEnvironment } from '@angular/cdk/testing';\nimport { flush } from '@angular/core/testing';\nimport { takeWhile } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\nimport * as keyCodes from '@angular/cdk/keycodes';\nimport { PERIOD } from '@angular/cdk/keycodes';\n\n/** Unique symbol that is used to patch a property to a proxy zone. */\nconst stateObservableSymbol = Symbol('ProxyZone_PATCHED#stateObservable');\n/**\n * Interceptor that can be set up in a `ProxyZone` instance. The interceptor\n * will keep track of the task state and emit whenever the state changes.\n *\n * This serves as a workaround for https://github.com/angular/angular/issues/32896.\n */\nclass TaskStateZoneInterceptor {\n    constructor(_lastState) {\n        this._lastState = _lastState;\n        /** Subject that can be used to emit a new state change. */\n        this._stateSubject = new BehaviorSubject(this._lastState ? this._getTaskStateFromInternalZoneState(this._lastState) : { stable: true });\n        /** Public observable that emits whenever the task state changes. */\n        this.state = this._stateSubject;\n    }\n    /** This will be called whenever the task state changes in the intercepted zone. */\n    onHasTask(delegate, current, target, hasTaskState) {\n        if (current === target) {\n            this._stateSubject.next(this._getTaskStateFromInternalZoneState(hasTaskState));\n        }\n    }\n    /** Gets the task state from the internal ZoneJS task state. */\n    _getTaskStateFromInternalZoneState(state) {\n        return { stable: !state.macroTask && !state.microTask };\n    }\n    /**\n     * Sets up the custom task state Zone interceptor in the  `ProxyZone`. Throws if\n     * no `ProxyZone` could be found.\n     * @returns an observable that emits whenever the task state changes.\n     */\n    static setup() {\n        if (Zone === undefined) {\n            throw Error('Could not find ZoneJS. For test harnesses running in TestBed, ' +\n                'ZoneJS needs to be installed.');\n        }\n        // tslint:disable-next-line:variable-name\n        const ProxyZoneSpec = Zone['ProxyZoneSpec'];\n        // If there is no \"ProxyZoneSpec\" installed, we throw an error and recommend\n        // setting up the proxy zone by pulling in the testing bundle.\n        if (!ProxyZoneSpec) {\n            throw Error('ProxyZoneSpec is needed for the test harnesses but could not be found. ' +\n                'Please make sure that your environment includes zone.js/dist/zone-testing.js');\n        }\n        // Ensure that there is a proxy zone instance set up, and get\n        // a reference to the instance if present.\n        const zoneSpec = ProxyZoneSpec.assertPresent();\n        // If there already is a delegate registered in the proxy zone, and it\n        // is type of the custom task state interceptor, we just use that state\n        // observable. This allows us to only intercept Zone once per test\n        // (similar to how `fakeAsync` or `async` work).\n        if (zoneSpec[stateObservableSymbol]) {\n            return zoneSpec[stateObservableSymbol];\n        }\n        // Since we intercept on environment creation and the fixture has been\n        // created before, we might have missed tasks scheduled before. Fortunately\n        // the proxy zone keeps track of the previous task state, so we can just pass\n        // this as initial state to the task zone interceptor.\n        const interceptor = new TaskStateZoneInterceptor(zoneSpec.lastTaskState);\n        const zoneSpecOnHasTask = zoneSpec.onHasTask.bind(zoneSpec);\n        // We setup the task state interceptor in the `ProxyZone`. Note that we cannot register\n        // the interceptor as a new proxy zone delegate because it would mean that other zone\n        // delegates (e.g. `FakeAsyncTestZone` or `AsyncTestZone`) can accidentally overwrite/disable\n        // our interceptor. Since we just intend to monitor the task state of the proxy zone, it is\n        // sufficient to just patch the proxy zone. This also avoids that we interfere with the task\n        // queue scheduling logic.\n        zoneSpec.onHasTask = function (...args) {\n            zoneSpecOnHasTask(...args);\n            interceptor.onHasTask(...args);\n        };\n        return (zoneSpec[stateObservableSymbol] = interceptor.state);\n    }\n}\n\n/** Used to generate unique IDs for events. */\nlet uniqueIds = 0;\n/**\n * Creates a browser MouseEvent with the specified options.\n * @docs-private\n */\nfunction createMouseEvent(type, clientX = 0, clientY = 0, offsetX = 0, offsetY = 0, button = 0, modifiers = {}) {\n    // Note: We cannot determine the position of the mouse event based on the screen\n    // because the dimensions and position of the browser window are not available\n    // To provide reasonable `screenX` and `screenY` coordinates, we simply use the\n    // client coordinates as if the browser is opened in fullscreen.\n    const screenX = clientX;\n    const screenY = clientY;\n    const event = new MouseEvent(type, {\n        bubbles: true,\n        cancelable: true,\n        composed: true,\n        view: window,\n        detail: 1,\n        relatedTarget: null,\n        screenX,\n        screenY,\n        clientX,\n        clientY,\n        ctrlKey: modifiers.control,\n        altKey: modifiers.alt,\n        shiftKey: modifiers.shift,\n        metaKey: modifiers.meta,\n        button: button,\n        buttons: 1,\n    });\n    // The `MouseEvent` constructor doesn't allow us to pass these properties into the constructor.\n    // Override them to `1`, because they're used for fake screen reader event detection.\n    if (offsetX != null) {\n        defineReadonlyEventProperty(event, 'offsetX', offsetX);\n    }\n    if (offsetY != null) {\n        defineReadonlyEventProperty(event, 'offsetY', offsetY);\n    }\n    return event;\n}\n/**\n * Creates a browser `PointerEvent` with the specified options. Pointer events\n * by default will appear as if they are the primary pointer of their type.\n * https://www.w3.org/TR/pointerevents2/#dom-pointerevent-isprimary.\n *\n * For example, if pointer events for a multi-touch interaction are created, the non-primary\n * pointer touches would need to be represented by non-primary pointer events.\n *\n * @docs-private\n */\nfunction createPointerEvent(type, clientX = 0, clientY = 0, offsetX, offsetY, options = { isPrimary: true }) {\n    const event = new PointerEvent(type, {\n        bubbles: true,\n        cancelable: true,\n        composed: true,\n        view: window,\n        clientX,\n        clientY,\n        ...options,\n    });\n    if (offsetX != null) {\n        defineReadonlyEventProperty(event, 'offsetX', offsetX);\n    }\n    if (offsetY != null) {\n        defineReadonlyEventProperty(event, 'offsetY', offsetY);\n    }\n    return event;\n}\n/**\n * Creates a browser TouchEvent with the specified pointer coordinates.\n * @docs-private\n */\nfunction createTouchEvent(type, pageX = 0, pageY = 0, clientX = 0, clientY = 0) {\n    // We cannot use the `TouchEvent` or `Touch` because Firefox and Safari lack support.\n    // TODO: Switch to the constructor API when it is available for Firefox and Safari.\n    const event = document.createEvent('UIEvent');\n    const touchDetails = { pageX, pageY, clientX, clientY, identifier: uniqueIds++ };\n    // TS3.6 removes the initUIEvent method and suggests porting to \"new UIEvent()\".\n    event.initUIEvent(type, true, true, window, 0);\n    // Most of the browsers don't have a \"initTouchEvent\" method that can be used to define\n    // the touch details.\n    defineReadonlyEventProperty(event, 'touches', [touchDetails]);\n    defineReadonlyEventProperty(event, 'targetTouches', [touchDetails]);\n    defineReadonlyEventProperty(event, 'changedTouches', [touchDetails]);\n    return event;\n}\n/**\n * Creates a keyboard event with the specified key and modifiers.\n * @docs-private\n */\nfunction createKeyboardEvent(type, keyCode = 0, key = '', modifiers = {}) {\n    return new KeyboardEvent(type, {\n        bubbles: true,\n        cancelable: true,\n        composed: true,\n        view: window,\n        keyCode: keyCode,\n        key: key,\n        shiftKey: modifiers.shift,\n        metaKey: modifiers.meta,\n        altKey: modifiers.alt,\n        ctrlKey: modifiers.control,\n    });\n}\n/**\n * Creates a fake event object with any desired event type.\n * @docs-private\n */\nfunction createFakeEvent(type, bubbles = false, cancelable = true, composed = true) {\n    return new Event(type, { bubbles, cancelable, composed });\n}\n/**\n * Defines a readonly property on the given event object. Readonly properties on an event object\n * are always set as configurable as that matches default readonly properties for DOM event objects.\n */\nfunction defineReadonlyEventProperty(event, propertyName, value) {\n    Object.defineProperty(event, propertyName, { get: () => value, configurable: true });\n}\n\n/**\n * Utility to dispatch any event on a Node.\n * @docs-private\n */\nfunction dispatchEvent(node, event) {\n    node.dispatchEvent(event);\n    return event;\n}\n/**\n * Shorthand to dispatch a fake event on a specified node.\n * @docs-private\n */\nfunction dispatchFakeEvent(node, type, bubbles) {\n    return dispatchEvent(node, createFakeEvent(type, bubbles));\n}\n/**\n * Shorthand to dispatch a keyboard event with a specified key code and\n * optional modifiers.\n * @docs-private\n */\nfunction dispatchKeyboardEvent(node, type, keyCode, key, modifiers) {\n    return dispatchEvent(node, createKeyboardEvent(type, keyCode, key, modifiers));\n}\n/**\n * Shorthand to dispatch a mouse event on the specified coordinates.\n * @docs-private\n */\nfunction dispatchMouseEvent(node, type, clientX = 0, clientY = 0, offsetX, offsetY, button, modifiers) {\n    return dispatchEvent(node, createMouseEvent(type, clientX, clientY, offsetX, offsetY, button, modifiers));\n}\n/**\n * Shorthand to dispatch a pointer event on the specified coordinates.\n * @docs-private\n */\nfunction dispatchPointerEvent(node, type, clientX = 0, clientY = 0, offsetX, offsetY, options) {\n    return dispatchEvent(node, createPointerEvent(type, clientX, clientY, offsetX, offsetY, options));\n}\n/**\n * Shorthand to dispatch a touch event on the specified coordinates.\n * @docs-private\n */\nfunction dispatchTouchEvent(node, type, pageX = 0, pageY = 0, clientX = 0, clientY = 0) {\n    return dispatchEvent(node, createTouchEvent(type, pageX, pageY, clientX, clientY));\n}\n\nfunction triggerFocusChange(element, event) {\n    let eventFired = false;\n    const handler = () => (eventFired = true);\n    element.addEventListener(event, handler);\n    element[event]();\n    element.removeEventListener(event, handler);\n    if (!eventFired) {\n        dispatchFakeEvent(element, event);\n    }\n}\n/**\n * Patches an elements focus and blur methods to emit events consistently and predictably.\n * This is necessary, because some browsers can call the focus handlers asynchronously,\n * while others won't fire them at all if the browser window is not focused.\n * @docs-private\n */\n// TODO: Check if this element focus patching is still needed for local testing,\n// where browser is not necessarily focused.\nfunction patchElementFocus(element) {\n    element.focus = () => dispatchFakeEvent(element, 'focus');\n    element.blur = () => dispatchFakeEvent(element, 'blur');\n}\n/** @docs-private */\nfunction triggerFocus(element) {\n    triggerFocusChange(element, 'focus');\n}\n/** @docs-private */\nfunction triggerBlur(element) {\n    triggerFocusChange(element, 'blur');\n}\n\n/** Input types for which the value can be entered incrementally. */\nconst incrementalInputTypes = new Set([\n    'text',\n    'email',\n    'hidden',\n    'password',\n    'search',\n    'tel',\n    'url',\n]);\n/**\n * Checks whether the given Element is a text input element.\n * @docs-private\n */\nfunction isTextInput(element) {\n    const nodeName = element.nodeName.toLowerCase();\n    return nodeName === 'input' || nodeName === 'textarea';\n}\nfunction typeInElement(element, ...modifiersAndKeys) {\n    const first = modifiersAndKeys[0];\n    let modifiers;\n    let rest;\n    if (first !== undefined &&\n        typeof first !== 'string' &&\n        first.keyCode === undefined &&\n        first.key === undefined) {\n        modifiers = first;\n        rest = modifiersAndKeys.slice(1);\n    }\n    else {\n        modifiers = {};\n        rest = modifiersAndKeys;\n    }\n    const isInput = isTextInput(element);\n    const inputType = element.getAttribute('type') || 'text';\n    const keys = rest\n        .map(k => typeof k === 'string'\n        ? k.split('').map(c => ({ keyCode: c.toUpperCase().charCodeAt(0), key: c }))\n        : [k])\n        .reduce((arr, k) => arr.concat(k), []);\n    // Throw an error if no keys have been specified. Calling this function with no\n    // keys should not result in a focus event being dispatched unexpectedly.\n    if (keys.length === 0) {\n        throw getNoKeysSpecifiedError();\n    }\n    // We simulate the user typing in a value by incrementally assigning the value below. The problem\n    // is that for some input types, the browser won't allow for an invalid value to be set via the\n    // `value` property which will always be the case when going character-by-character. If we detect\n    // such an input, we have to set the value all at once or listeners to the `input` event (e.g.\n    // the `ReactiveFormsModule` uses such an approach) won't receive the correct value.\n    const enterValueIncrementally = inputType === 'number'\n        ? // The value can be set character by character in number inputs if it doesn't have any decimals.\n            keys.every(key => key.key !== '.' && key.key !== '-' && key.keyCode !== PERIOD)\n        : incrementalInputTypes.has(inputType);\n    triggerFocus(element);\n    // When we aren't entering the value incrementally, assign it all at once ahead\n    // of time so that any listeners to the key events below will have access to it.\n    if (!enterValueIncrementally) {\n        element.value = keys.reduce((value, key) => value + (key.key || ''), '');\n    }\n    for (const key of keys) {\n        dispatchKeyboardEvent(element, 'keydown', key.keyCode, key.key, modifiers);\n        dispatchKeyboardEvent(element, 'keypress', key.keyCode, key.key, modifiers);\n        if (isInput && key.key && key.key.length === 1) {\n            if (enterValueIncrementally) {\n                element.value += key.key;\n                dispatchFakeEvent(element, 'input');\n            }\n        }\n        dispatchKeyboardEvent(element, 'keyup', key.keyCode, key.key, modifiers);\n    }\n    // Since we weren't dispatching `input` events while sending the keys, we have to do it now.\n    if (!enterValueIncrementally) {\n        dispatchFakeEvent(element, 'input');\n    }\n}\n/**\n * Clears the text in an input or textarea element.\n * @docs-private\n */\nfunction clearElement(element) {\n    triggerFocus(element);\n    element.value = '';\n    dispatchFakeEvent(element, 'input');\n}\n\n// These are private APIs that are used both by the public APIs inside of this package, as well\n\n/** Maps `TestKey` constants to the `keyCode` and `key` values used by native browser events. */\nconst keyMap = {\n    [TestKey.BACKSPACE]: { keyCode: keyCodes.BACKSPACE, key: 'Backspace' },\n    [TestKey.TAB]: { keyCode: keyCodes.TAB, key: 'Tab' },\n    [TestKey.ENTER]: { keyCode: keyCodes.ENTER, key: 'Enter' },\n    [TestKey.SHIFT]: { keyCode: keyCodes.SHIFT, key: 'Shift' },\n    [TestKey.CONTROL]: { keyCode: keyCodes.CONTROL, key: 'Control' },\n    [TestKey.ALT]: { keyCode: keyCodes.ALT, key: 'Alt' },\n    [TestKey.ESCAPE]: { keyCode: keyCodes.ESCAPE, key: 'Escape' },\n    [TestKey.PAGE_UP]: { keyCode: keyCodes.PAGE_UP, key: 'PageUp' },\n    [TestKey.PAGE_DOWN]: { keyCode: keyCodes.PAGE_DOWN, key: 'PageDown' },\n    [TestKey.END]: { keyCode: keyCodes.END, key: 'End' },\n    [TestKey.HOME]: { keyCode: keyCodes.HOME, key: 'Home' },\n    [TestKey.LEFT_ARROW]: { keyCode: keyCodes.LEFT_ARROW, key: 'ArrowLeft' },\n    [TestKey.UP_ARROW]: { keyCode: keyCodes.UP_ARROW, key: 'ArrowUp' },\n    [TestKey.RIGHT_ARROW]: { keyCode: keyCodes.RIGHT_ARROW, key: 'ArrowRight' },\n    [TestKey.DOWN_ARROW]: { keyCode: keyCodes.DOWN_ARROW, key: 'ArrowDown' },\n    [TestKey.INSERT]: { keyCode: keyCodes.INSERT, key: 'Insert' },\n    [TestKey.DELETE]: { keyCode: keyCodes.DELETE, key: 'Delete' },\n    [TestKey.F1]: { keyCode: keyCodes.F1, key: 'F1' },\n    [TestKey.F2]: { keyCode: keyCodes.F2, key: 'F2' },\n    [TestKey.F3]: { keyCode: keyCodes.F3, key: 'F3' },\n    [TestKey.F4]: { keyCode: keyCodes.F4, key: 'F4' },\n    [TestKey.F5]: { keyCode: keyCodes.F5, key: 'F5' },\n    [TestKey.F6]: { keyCode: keyCodes.F6, key: 'F6' },\n    [TestKey.F7]: { keyCode: keyCodes.F7, key: 'F7' },\n    [TestKey.F8]: { keyCode: keyCodes.F8, key: 'F8' },\n    [TestKey.F9]: { keyCode: keyCodes.F9, key: 'F9' },\n    [TestKey.F10]: { keyCode: keyCodes.F10, key: 'F10' },\n    [TestKey.F11]: { keyCode: keyCodes.F11, key: 'F11' },\n    [TestKey.F12]: { keyCode: keyCodes.F12, key: 'F12' },\n    [TestKey.META]: { keyCode: keyCodes.META, key: 'Meta' },\n    [TestKey.COMMA]: { keyCode: keyCodes.COMMA, key: ',' },\n};\n/** A `TestElement` implementation for unit tests. */\nclass UnitTestElement {\n    constructor(element, _stabilize) {\n        this.element = element;\n        this._stabilize = _stabilize;\n    }\n    /** Blur the element. */\n    async blur() {\n        triggerBlur(this.element);\n        await this._stabilize();\n    }\n    /** Clear the element's input (for input and textarea elements only). */\n    async clear() {\n        if (!isTextInput(this.element)) {\n            throw Error('Attempting to clear an invalid element');\n        }\n        clearElement(this.element);\n        await this._stabilize();\n    }\n    async click(...args) {\n        const isDisabled = this.element.disabled === true;\n        // If the element is `disabled` and has a `disabled` property, we emit the mouse event\n        // sequence but not dispatch the `click` event. This is necessary to keep the behavior\n        // consistent with an actual user interaction. The click event is not necessarily\n        // automatically prevented by the browser. There is mismatch between Firefox and Chromium:\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=329509.\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=1115661.\n        await this._dispatchMouseEventSequence(isDisabled ? null : 'click', args, 0);\n        await this._stabilize();\n    }\n    async rightClick(...args) {\n        await this._dispatchMouseEventSequence('contextmenu', args, 2);\n        await this._stabilize();\n    }\n    /** Focus the element. */\n    async focus() {\n        triggerFocus(this.element);\n        await this._stabilize();\n    }\n    /** Get the computed value of the given CSS property for the element. */\n    async getCssValue(property) {\n        await this._stabilize();\n        // TODO(mmalerba): Consider adding value normalization if we run into common cases where its\n        //  needed.\n        return getComputedStyle(this.element).getPropertyValue(property);\n    }\n    /** Hovers the mouse over the element. */\n    async hover() {\n        this._dispatchPointerEventIfSupported('pointerenter');\n        dispatchMouseEvent(this.element, 'mouseover');\n        dispatchMouseEvent(this.element, 'mouseenter');\n        await this._stabilize();\n    }\n    /** Moves the mouse away from the element. */\n    async mouseAway() {\n        this._dispatchPointerEventIfSupported('pointerleave');\n        dispatchMouseEvent(this.element, 'mouseout');\n        dispatchMouseEvent(this.element, 'mouseleave');\n        await this._stabilize();\n    }\n    async sendKeys(...modifiersAndKeys) {\n        const args = modifiersAndKeys.map(k => (typeof k === 'number' ? keyMap[k] : k));\n        typeInElement(this.element, ...args);\n        await this._stabilize();\n    }\n    /**\n     * Gets the text from the element.\n     * @param options Options that affect what text is included.\n     */\n    async text(options) {\n        await this._stabilize();\n        if (options?.exclude) {\n            return _getTextWithExcludedElements(this.element, options.exclude);\n        }\n        return (this.element.textContent || '').trim();\n    }\n    /**\n     * Sets the value of a `contenteditable` element.\n     * @param value Value to be set on the element.\n     */\n    async setContenteditableValue(value) {\n        const contenteditableAttr = await this.getAttribute('contenteditable');\n        if (contenteditableAttr !== '' && contenteditableAttr !== 'true') {\n            throw new Error('setContenteditableValue can only be called on a `contenteditable` element.');\n        }\n        await this._stabilize();\n        this.element.textContent = value;\n    }\n    /** Gets the value for the given attribute from the element. */\n    async getAttribute(name) {\n        await this._stabilize();\n        return this.element.getAttribute(name);\n    }\n    /** Checks whether the element has the given class. */\n    async hasClass(name) {\n        await this._stabilize();\n        return this.element.classList.contains(name);\n    }\n    /** Gets the dimensions of the element. */\n    async getDimensions() {\n        await this._stabilize();\n        return this.element.getBoundingClientRect();\n    }\n    /** Gets the value of a property of an element. */\n    async getProperty(name) {\n        await this._stabilize();\n        return this.element[name];\n    }\n    /** Sets the value of a property of an input. */\n    async setInputValue(value) {\n        this.element.value = value;\n        await this._stabilize();\n    }\n    /** Selects the options at the specified indexes inside of a native `select` element. */\n    async selectOptions(...optionIndexes) {\n        let hasChanged = false;\n        const options = this.element.querySelectorAll('option');\n        const indexes = new Set(optionIndexes); // Convert to a set to remove duplicates.\n        for (let i = 0; i < options.length; i++) {\n            const option = options[i];\n            const wasSelected = option.selected;\n            // We have to go through `option.selected`, because `HTMLSelectElement.value` doesn't\n            // allow for multiple options to be selected, even in `multiple` mode.\n            option.selected = indexes.has(i);\n            if (option.selected !== wasSelected) {\n                hasChanged = true;\n                dispatchFakeEvent(this.element, 'change');\n            }\n        }\n        if (hasChanged) {\n            await this._stabilize();\n        }\n    }\n    /** Checks whether this element matches the given selector. */\n    async matchesSelector(selector) {\n        await this._stabilize();\n        const elementPrototype = Element.prototype;\n        return (elementPrototype['matches'] || elementPrototype['msMatchesSelector']).call(this.element, selector);\n    }\n    /** Checks whether the element is focused. */\n    async isFocused() {\n        await this._stabilize();\n        return document.activeElement === this.element;\n    }\n    /**\n     * Dispatches an event with a particular name.\n     * @param name Name of the event to be dispatched.\n     */\n    async dispatchEvent(name, data) {\n        const event = createFakeEvent(name);\n        if (data) {\n            // tslint:disable-next-line:ban Have to use `Object.assign` to preserve the original object.\n            Object.assign(event, data);\n        }\n        dispatchEvent(this.element, event);\n        await this._stabilize();\n    }\n    /**\n     * Dispatches a pointer event on the current element if the browser supports it.\n     * @param name Name of the pointer event to be dispatched.\n     * @param clientX Coordinate of the user's pointer along the X axis.\n     * @param clientY Coordinate of the user's pointer along the Y axis.\n     * @param button Mouse button that should be pressed when dispatching the event.\n     */\n    _dispatchPointerEventIfSupported(name, clientX, clientY, offsetX, offsetY, button) {\n        // The latest versions of all browsers we support have the new `PointerEvent` API.\n        // Though since we capture the two most recent versions of these browsers, we also\n        // need to support Safari 12 at time of writing. Safari 12 does not have support for this,\n        // so we need to conditionally create and dispatch these events based on feature detection.\n        if (typeof PointerEvent !== 'undefined' && PointerEvent) {\n            dispatchPointerEvent(this.element, name, clientX, clientY, offsetX, offsetY, {\n                isPrimary: true,\n                button,\n            });\n        }\n    }\n    /**\n     * Dispatches all the events that are part of a mouse event sequence\n     * and then emits a given primary event at the end, if speciifed.\n     */\n    async _dispatchMouseEventSequence(primaryEventName, args, button) {\n        let clientX = undefined;\n        let clientY = undefined;\n        let offsetX = undefined;\n        let offsetY = undefined;\n        let modifiers = {};\n        if (args.length && typeof args[args.length - 1] === 'object') {\n            modifiers = args.pop();\n        }\n        if (args.length) {\n            const { left, top, width, height } = await this.getDimensions();\n            offsetX = args[0] === 'center' ? width / 2 : args[0];\n            offsetY = args[0] === 'center' ? height / 2 : args[1];\n            // Round the computed click position as decimal pixels are not\n            // supported by mouse events and could lead to unexpected results.\n            clientX = Math.round(left + offsetX);\n            clientY = Math.round(top + offsetY);\n        }\n        this._dispatchPointerEventIfSupported('pointerdown', clientX, clientY, offsetX, offsetY, button);\n        dispatchMouseEvent(this.element, 'mousedown', clientX, clientY, offsetX, offsetY, button, modifiers);\n        this._dispatchPointerEventIfSupported('pointerup', clientX, clientY, offsetX, offsetY, button);\n        dispatchMouseEvent(this.element, 'mouseup', clientX, clientY, offsetX, offsetY, button, modifiers);\n        // If a primary event name is specified, emit it after the mouse event sequence.\n        if (primaryEventName !== null) {\n            dispatchMouseEvent(this.element, primaryEventName, clientX, clientY, offsetX, offsetY, button, modifiers);\n        }\n        // This call to _stabilize should not be needed since the callers will already do that them-\n        // selves. Nevertheless it breaks some tests in g3 without it. It needs to be investigated\n        // why removing breaks those tests.\n        // See: https://github.com/angular/components/pull/20758/files#r520886256.\n        await this._stabilize();\n    }\n}\n\n/** The default environment options. */\nconst defaultEnvironmentOptions = {\n    queryFn: (selector, root) => root.querySelectorAll(selector),\n};\n/** Whether auto change detection is currently disabled. */\nlet disableAutoChangeDetection = false;\n/**\n * The set of non-destroyed fixtures currently being used by `TestbedHarnessEnvironment` instances.\n */\nconst activeFixtures = new Set();\n/**\n * Installs a handler for change detection batching status changes for a specific fixture.\n * @param fixture The fixture to handle change detection batching for.\n */\nfunction installAutoChangeDetectionStatusHandler(fixture) {\n    if (!activeFixtures.size) {\n        handleAutoChangeDetectionStatus(({ isDisabled, onDetectChangesNow }) => {\n            disableAutoChangeDetection = isDisabled;\n            if (onDetectChangesNow) {\n                Promise.all(Array.from(activeFixtures).map(detectChanges)).then(onDetectChangesNow);\n            }\n        });\n    }\n    activeFixtures.add(fixture);\n}\n/**\n * Uninstalls a handler for change detection batching status changes for a specific fixture.\n * @param fixture The fixture to stop handling change detection batching for.\n */\nfunction uninstallAutoChangeDetectionStatusHandler(fixture) {\n    activeFixtures.delete(fixture);\n    if (!activeFixtures.size) {\n        stopHandlingAutoChangeDetectionStatus();\n    }\n}\n/** Whether we are currently in the fake async zone. */\nfunction isInFakeAsyncZone() {\n    return Zone.current.get('FakeAsyncTestZoneSpec') != null;\n}\n/**\n * Triggers change detection for a specific fixture.\n * @param fixture The fixture to trigger change detection for.\n */\nasync function detectChanges(fixture) {\n    fixture.detectChanges();\n    if (isInFakeAsyncZone()) {\n        flush();\n    }\n    else {\n        await fixture.whenStable();\n    }\n}\n/** A `HarnessEnvironment` implementation for Angular's Testbed. */\nclass TestbedHarnessEnvironment extends HarnessEnvironment {\n    constructor(rawRootElement, _fixture, options) {\n        super(rawRootElement);\n        this._fixture = _fixture;\n        /** Whether the environment has been destroyed. */\n        this._destroyed = false;\n        this._options = { ...defaultEnvironmentOptions, ...options };\n        this._taskState = TaskStateZoneInterceptor.setup();\n        this._stabilizeCallback = () => this.forceStabilize();\n        installAutoChangeDetectionStatusHandler(_fixture);\n        _fixture.componentRef.onDestroy(() => {\n            uninstallAutoChangeDetectionStatusHandler(_fixture);\n            this._destroyed = true;\n        });\n    }\n    /** Creates a `HarnessLoader` rooted at the given fixture's root element. */\n    static loader(fixture, options) {\n        return new TestbedHarnessEnvironment(fixture.nativeElement, fixture, options);\n    }\n    /**\n     * Creates a `HarnessLoader` at the document root. This can be used if harnesses are\n     * located outside of a fixture (e.g. overlays appended to the document body).\n     */\n    static documentRootLoader(fixture, options) {\n        return new TestbedHarnessEnvironment(document.body, fixture, options);\n    }\n    /** Gets the native DOM element corresponding to the given TestElement. */\n    static getNativeElement(el) {\n        if (el instanceof UnitTestElement) {\n            return el.element;\n        }\n        throw Error('This TestElement was not created by the TestbedHarnessEnvironment');\n    }\n    /**\n     * Creates an instance of the given harness type, using the fixture's root element as the\n     * harness's host element. This method should be used when creating a harness for the root element\n     * of a fixture, as components do not have the correct selector when they are created as the root\n     * of the fixture.\n     */\n    static async harnessForFixture(fixture, harnessType, options) {\n        const environment = new TestbedHarnessEnvironment(fixture.nativeElement, fixture, options);\n        await environment.forceStabilize();\n        return environment.createComponentHarness(harnessType, fixture.nativeElement);\n    }\n    /**\n     * Flushes change detection and async tasks captured in the Angular zone.\n     * In most cases it should not be necessary to call this manually. However, there may be some edge\n     * cases where it is needed to fully flush animation events.\n     */\n    async forceStabilize() {\n        if (!disableAutoChangeDetection) {\n            if (this._destroyed) {\n                throw Error('Harness is attempting to use a fixture that has already been destroyed.');\n            }\n            await detectChanges(this._fixture);\n        }\n    }\n    /**\n     * Waits for all scheduled or running async tasks to complete. This allows harness\n     * authors to wait for async tasks outside of the Angular zone.\n     */\n    async waitForTasksOutsideAngular() {\n        // If we run in the fake async zone, we run \"flush\" to run any scheduled tasks. This\n        // ensures that the harnesses behave inside of the FakeAsyncTestZone similar to the\n        // \"AsyncTestZone\" and the root zone (i.e. neither fakeAsync or async). Note that we\n        // cannot just rely on the task state observable to become stable because the state will\n        // never change. This is because the task queue will be only drained if the fake async\n        // zone is being flushed.\n        if (isInFakeAsyncZone()) {\n            flush();\n        }\n        // Wait until the task queue has been drained and the zone is stable. Note that\n        // we cannot rely on \"fixture.whenStable\" since it does not catch tasks scheduled\n        // outside of the Angular zone. For test harnesses, we want to ensure that the\n        // app is fully stabilized and therefore need to use our own zone interceptor.\n        await this._taskState.pipe(takeWhile(state => !state.stable)).toPromise();\n    }\n    /** Gets the root element for the document. */\n    getDocumentRoot() {\n        return document.body;\n    }\n    /** Creates a `TestElement` from a raw element. */\n    createTestElement(element) {\n        return new UnitTestElement(element, this._stabilizeCallback);\n    }\n    /** Creates a `HarnessLoader` rooted at the given raw element. */\n    createEnvironment(element) {\n        return new TestbedHarnessEnvironment(element, this._fixture, this._options);\n    }\n    /**\n     * Gets a list of all elements matching the given selector under this environment's root element.\n     */\n    async getAllRawElements(selector) {\n        await this.forceStabilize();\n        return Array.from(this._options.queryFn(selector, this.rawRootElement));\n    }\n}\n\nexport { TestbedHarnessEnvironment, UnitTestElement };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}