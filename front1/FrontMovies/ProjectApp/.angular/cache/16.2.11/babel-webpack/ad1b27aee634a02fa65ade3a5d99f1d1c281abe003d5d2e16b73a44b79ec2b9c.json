{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/USER/Desktop/Front-end/ProjectApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed, fakeAsync, tick } from '@angular/core/testing';\nimport { RegisterFormComponent } from './register-form.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { UserService } from 'src/app/user.service';\nimport { CommonModule } from '@angular/common';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { By } from '@angular/platform-browser';\ndescribe('RegisterFormComponent', () => {\n  let component;\n  let fixture;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [],\n      imports: [RegisterFormComponent, FormsModule, ReactiveFormsModule, MatIconModule, MatInputModule, MatFormFieldModule, MatButtonModule, MatSelectModule, MatSlideToggleModule, HttpClientModule, BrowserAnimationsModule, CommonModule],\n      providers: [{\n        provide: ActivatedRoute,\n        useValue: {}\n      }, {\n        provide: Router,\n        useValue: {}\n      }, UserService, JwtHelperService, MatSnackBar]\n    });\n    fixture = TestBed.createComponent(RegisterFormComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n  it('Should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('Should form fields controls be initially empty/disabled', () => {\n    expect(component.createRegisterForm.get('name')?.value).toEqual('');\n    expect(component.createRegisterForm.get('surname')?.value).toEqual('');\n    expect(component.createRegisterForm.get('username')?.value).toEqual('');\n    expect(component.createRegisterForm.get('password')?.value).toEqual('');\n    expect(component.createRegisterForm.get('confirmPassword')?.value).toEqual('');\n    expect(component.createRegisterForm.get('address')?.value).toEqual('');\n    expect(component.createRegisterForm.get('phoneNumber')?.value).toEqual('');\n    expect(component.createRegisterForm.get('role')?.value).toEqual('');\n    expect(component.createRegisterForm.get('requestNotification')?.disabled).toBeTruthy();\n    expect(component.createRegisterForm.get('cancellationNotification')?.disabled).toBeTruthy();\n    expect(component.createRegisterForm.get('ownerRatingNotification')?.disabled).toBeTruthy();\n    expect(component.createRegisterForm.get('accommodationRatingNotification')?.disabled).toBeTruthy();\n    expect(component.createRegisterForm.get('ownerRepliedNotification')?.disabled).toBeTruthy();\n  });\n  it('should make input into all form fields', () => {\n    let el = fixture.debugElement.query(By.css('[formControlName=\\'username\\']')).nativeElement;\n    expect(el.getAttribute('readonly')).toEqual(null);\n    el = fixture.debugElement.query(By.css('[formControlName=\\'name\\']')).nativeElement;\n    expect(el.getAttribute('readonly')).toEqual(null);\n    el = fixture.debugElement.query(By.css('[formControlName=\\'surname\\']')).nativeElement;\n    expect(el.getAttribute('readonly')).toEqual(null);\n    el = fixture.debugElement.query(By.css('[formControlName=\\'phoneNumber\\']')).nativeElement;\n    expect(el.getAttribute('readonly')).toEqual(null);\n    el = fixture.debugElement.query(By.css('[formControlName=\\'address\\']')).nativeElement;\n    expect(el.getAttribute('readonly')).toEqual(null);\n    el = fixture.debugElement.query(By.css('[formControlName=\\'password\\']')).nativeElement;\n    expect(el.getAttribute('readonly')).toEqual(null);\n    el = fixture.debugElement.query(By.css('[formControlName=\\'confirmPassword\\']')).nativeElement;\n    expect(el.getAttribute('readonly')).toEqual(null);\n  });\n  it('should set form validity to false if invalid phone data is provided - incorrect digits number', () => {\n    component.createRegisterForm.setValue({\n      name: 'John',\n      surname: 'Doe',\n      phoneNumber: '123',\n      address: 'Test Address',\n      username: 'test@example.com',\n      password: 'password123',\n      confirmPassword: 'password123',\n      role: 'GUEST',\n      requestNotification: true,\n      cancellationNotification: false,\n      accommodationRatingNotification: false,\n      ownerRatingNotification: false,\n      ownerRepliedNotification: true\n    });\n    expect(component.isFormValid).toBeFalse();\n  });\n  it('should be false when password mismatch', fakeAsync(() => {\n    component.ngOnInit();\n    tick();\n    component.createRegisterForm.setValue({\n      name: 'John',\n      surname: 'Doe',\n      phoneNumber: '1234567890',\n      address: 'Test Address',\n      username: 'test@example.com',\n      password: 'password123',\n      confirmPassword: 'password456',\n      role: 'GUEST',\n      requestNotification: false,\n      cancellationNotification: false,\n      accommodationRatingNotification: false,\n      ownerRatingNotification: false,\n      ownerRepliedNotification: true\n    });\n    expect(component.isFormValid).toBeFalse();\n  }));\n  it('Should be false for empty password field', fakeAsync(() => {\n    component.ngOnInit();\n    tick();\n    component.createRegisterForm.setValue({\n      name: 'John',\n      surname: 'Doe',\n      phoneNumber: '1234567890',\n      address: 'Test Address',\n      username: 'test@example.com',\n      password: '',\n      confirmPassword: 'password456',\n      role: 'GUEST',\n      requestNotification: false,\n      cancellationNotification: false,\n      accommodationRatingNotification: false,\n      ownerRatingNotification: false,\n      ownerRepliedNotification: true\n    });\n    expect(component.isFormValid).toBeFalse();\n  }));\n  it('Should be false for empty confirm password field', fakeAsync( /*#__PURE__*/_asyncToGenerator(function* () {\n    component.ngOnInit();\n    tick();\n    component.createRegisterForm.setValue({\n      name: 'John',\n      surname: 'Doe',\n      phoneNumber: '1234567890',\n      address: 'Test Address',\n      username: 'test@example.com',\n      password: 'password123',\n      confirmPassword: '',\n      role: 'GUEST',\n      requestNotification: false,\n      cancellationNotification: false,\n      accommodationRatingNotification: false,\n      ownerRatingNotification: false,\n      ownerRepliedNotification: true\n    });\n    expect(component.isFormValid).toBeFalse();\n  })));\n  it('Should be false for empty confirm name field', fakeAsync( /*#__PURE__*/_asyncToGenerator(function* () {\n    component.ngOnInit();\n    tick();\n    component.createRegisterForm.setValue({\n      name: '',\n      surname: 'Doe',\n      phoneNumber: '1234567890',\n      address: 'Test Address',\n      username: 'test@example.com',\n      password: 'password123',\n      confirmPassword: 'password123',\n      role: 'GUEST',\n      requestNotification: false,\n      cancellationNotification: false,\n      accommodationRatingNotification: false,\n      ownerRatingNotification: false,\n      ownerRepliedNotification: true\n    });\n    expect(component.isFormValid).toBeFalse();\n  })));\n  it('Should be false for empty surname field', fakeAsync( /*#__PURE__*/_asyncToGenerator(function* () {\n    component.ngOnInit();\n    tick();\n    component.createRegisterForm.setValue({\n      name: 'John',\n      surname: '',\n      phoneNumber: '1234567890',\n      address: 'Test Address',\n      username: 'test@example.com',\n      password: 'password123',\n      confirmPassword: 'password123',\n      role: 'GUEST',\n      requestNotification: false,\n      cancellationNotification: false,\n      accommodationRatingNotification: false,\n      ownerRatingNotification: false,\n      ownerRepliedNotification: true\n    });\n    expect(component.isFormValid).toBeFalse();\n  })));\n  it('Should be false for empty  address field', fakeAsync( /*#__PURE__*/_asyncToGenerator(function* () {\n    component.ngOnInit();\n    tick();\n    component.createRegisterForm.setValue({\n      name: 'John',\n      surname: 'Doe',\n      phoneNumber: '1234567890',\n      address: '',\n      username: 'test@example.com',\n      password: 'password123',\n      confirmPassword: 'password123',\n      role: 'GUEST',\n      requestNotification: false,\n      cancellationNotification: false,\n      accommodationRatingNotification: false,\n      ownerRatingNotification: false,\n      ownerRepliedNotification: true\n    });\n    expect(component.isFormValid).toBeFalse();\n  })));\n  it('Should be false for invalid email format', fakeAsync( /*#__PURE__*/_asyncToGenerator(function* () {\n    component.ngOnInit();\n    tick();\n    component.createRegisterForm.setValue({\n      name: 'John',\n      surname: 'Doe',\n      phoneNumber: '1234567890',\n      address: 'Test Address',\n      username: 'test',\n      password: 'password123',\n      confirmPassword: 'password123',\n      role: 'GUEST',\n      requestNotification: false,\n      cancellationNotification: false,\n      accommodationRatingNotification: false,\n      ownerRatingNotification: false,\n      ownerRepliedNotification: true\n    });\n    expect(component.isFormValid).toBeFalse();\n  })));\n  it('Should be false for invalid email format', fakeAsync( /*#__PURE__*/_asyncToGenerator(function* () {\n    component.ngOnInit();\n    tick();\n    component.createRegisterForm.setValue({\n      name: 'John',\n      surname: 'Doe',\n      phoneNumber: '1234567890',\n      address: 'Test Address',\n      username: '688555',\n      password: 'password123',\n      confirmPassword: 'password123',\n      role: 'GUEST',\n      requestNotification: false,\n      cancellationNotification: false,\n      accommodationRatingNotification: false,\n      ownerRatingNotification: false,\n      ownerRepliedNotification: true\n    });\n    expect(component.isFormValid).toBeFalse();\n  })));\n  it('Should be false for empty email field', fakeAsync( /*#__PURE__*/_asyncToGenerator(function* () {\n    component.ngOnInit();\n    tick();\n    component.createRegisterForm.setValue({\n      name: 'John',\n      surname: 'Doe',\n      phoneNumber: '1234567890',\n      address: 'Test Address',\n      username: '',\n      password: 'password123',\n      confirmPassword: 'password123',\n      role: 'GUEST',\n      requestNotification: false,\n      cancellationNotification: false,\n      accommodationRatingNotification: false,\n      ownerRatingNotification: false,\n      ownerRepliedNotification: true\n    });\n    expect(component.isFormValid).toBeFalse();\n  })));\n  it('Should be false for not selected role', fakeAsync( /*#__PURE__*/_asyncToGenerator(function* () {\n    component.ngOnInit();\n    tick();\n    component.createRegisterForm.setValue({\n      name: 'John',\n      surname: 'Doe',\n      phoneNumber: '1234567890',\n      address: 'Test Address',\n      username: 'vesna@gmail.com',\n      password: 'password123',\n      confirmPassword: 'password123',\n      role: '',\n      requestNotification: false,\n      cancellationNotification: false,\n      accommodationRatingNotification: false,\n      ownerRatingNotification: false,\n      ownerRepliedNotification: true\n    });\n    expect(component.isFormValid).toBeFalse();\n  })));\n  it('Test toggle button depending on roles', fakeAsync( /*#__PURE__*/_asyncToGenerator(function* () {\n    component.ngOnInit();\n    tick();\n    component.createRegisterForm.setValue({\n      name: 'John',\n      surname: 'Doe',\n      phoneNumber: '1234567890',\n      address: 'Test Address',\n      username: 'vesna@gmail.com',\n      password: 'password123',\n      confirmPassword: 'password123',\n      role: 'ADMIN',\n      requestNotification: false,\n      cancellationNotification: false,\n      accommodationRatingNotification: false,\n      ownerRatingNotification: false,\n      ownerRepliedNotification: true\n    });\n    //expect(component.isFormValid).toBeFalse();\n    expect(component.createRegisterForm.get('requestNotification')?.disabled).toBeTruthy();\n    expect(component.createRegisterForm.get('cancellationNotification')?.disabled).toBeTruthy();\n    expect(component.createRegisterForm.get('ownerRatingNotification')?.disabled).toBeTruthy();\n    expect(component.createRegisterForm.get('accommodationRatingNotification')?.disabled).toBeTruthy();\n    expect(component.createRegisterForm.get('ownerRepliedNotification')?.disabled).toBeTruthy();\n    component.createRegisterForm.get('role')?.setValue(\"Owner\");\n    // component.createRegisterForm.setValue({\n    //   name: 'John',\n    //   surname: 'Doe',\n    //   phoneNumber: '1234567890', \n    //   address: 'Test Address',\n    //   username: 'vesna@gmail.com', \n    //   password: 'password123',\n    //   confirmPassword: 'password123', \n    //   role: 'OWNER',  //ROLE OWNER\n    //   requestNotification: false,\n    //   cancellationNotification: false,\n    //   accommodationRatingNotification: false,\n    //   ownerRatingNotification: false,\n    //   ownerRepliedNotification: true,\n    // });\n    // expect(component.isFormValid).toBeFalse();\n    expect(component.createRegisterForm.get('requestNotification')?.disabled).toBeTruthy();\n    expect(component.createRegisterForm.get('cancellationNotification')?.disabled).toBeTruthy();\n    expect(component.createRegisterForm.get('ownerRatingNotification')?.disabled).toBeTruthy();\n    expect(component.createRegisterForm.get('accommodationRatingNotification')?.disabled).toBeTruthy();\n    expect(component.createRegisterForm.get('ownerRepliedNotification')?.disabled).toBeTruthy();\n    component.createRegisterForm.get('role')?.setValue(\"Guest\");\n    // component.createRegisterForm.setValue({\n    //   name: 'John',\n    //   surname: 'Doe',\n    //   phoneNumber: '1234567890', \n    //   address: 'Test Address',\n    //   username: 'vesna@gmail.com', \n    //   password: 'password123',\n    //   confirmPassword: 'password123', \n    //   role: 'GUEST',  //ROLE GUEST\n    //   requestNotification: false,\n    //   cancellationNotification: false,\n    //   accommodationRatingNotification: false,\n    //   ownerRatingNotification: false,\n    //   ownerRepliedNotification: true,\n    // });\n    //expect(component.isFormValid).toBeFalse();\n    expect(component.createRegisterForm.get('requestNotification')?.disabled).toBeTruthy();\n    expect(component.createRegisterForm.get('cancellationNotification')?.disabled).toBeTruthy();\n    expect(component.createRegisterForm.get('ownerRatingNotification')?.disabled).toBeTruthy();\n    expect(component.createRegisterForm.get('accommodationRatingNotification')?.disabled).toBeTruthy();\n    expect(component.createRegisterForm.get('ownerRepliedNotification')?.disabled).toBeTruthy();\n  })));\n  it('Should be valid for all valid data', fakeAsync( /*#__PURE__*/_asyncToGenerator(function* () {\n    component.ngOnInit();\n    tick();\n    component.createRegisterForm.setValue({\n      name: 'John',\n      surname: 'Doe',\n      phoneNumber: '1234567890',\n      address: 'Test Address',\n      username: 'vesna@gmail.com',\n      password: 'password123',\n      confirmPassword: 'password123',\n      role: 'ADMIN',\n      requestNotification: false,\n      cancellationNotification: false,\n      accommodationRatingNotification: false,\n      ownerRatingNotification: false,\n      ownerRepliedNotification: true\n    });\n    expect(component.isFormValid).toBeTruthy();\n    component.ngOnInit();\n    tick();\n    const registrationButton = fixture.debugElement.query(By.css('button[mat-raised-button]')).nativeElement;\n    // expect(registrationButton.disabled).toBeFalsy();\n    registrationButton.click();\n    // Proveri da li je funkcija za registraciju pozvana\n    expect(component.register).toHaveBeenCalled();\n  })));\n});","map":{"version":3,"names":["TestBed","fakeAsync","tick","RegisterFormComponent","FormsModule","ReactiveFormsModule","MatIconModule","MatInputModule","MatFormFieldModule","MatButtonModule","MatSelectModule","MatSlideToggleModule","ActivatedRoute","Router","UserService","CommonModule","JwtHelperService","MatSnackBar","HttpClientModule","BrowserAnimationsModule","By","describe","component","fixture","beforeEach","configureTestingModule","declarations","imports","providers","provide","useValue","createComponent","componentInstance","detectChanges","it","expect","toBeTruthy","createRegisterForm","get","value","toEqual","disabled","el","debugElement","query","css","nativeElement","getAttribute","setValue","name","surname","phoneNumber","address","username","password","confirmPassword","role","requestNotification","cancellationNotification","accommodationRatingNotification","ownerRatingNotification","ownerRepliedNotification","isFormValid","toBeFalse","ngOnInit","_asyncToGenerator","registrationButton","click","register","toHaveBeenCalled"],"sources":["C:\\Users\\USER\\Desktop\\Front-end\\ProjectApp\\src\\app\\register\\register-form\\register-form.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed, fakeAsync, tick } from '@angular/core/testing';\r\nimport { RegisterFormComponent } from './register-form.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatError, MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { UserService } from 'src/app/user.service';\r\nimport { RoleEnum, StatusEnum } from 'src/app/models/userEnums.model';\r\nimport { UserPutDTO } from 'src/app/models/userPutDTO.model';\r\nimport { User } from 'src/app/models/user.model';\r\nimport { UserGetDTO } from 'src/app/models/userGetDTO.model';\r\nimport { CommonModule } from '@angular/common';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\nimport { tap } from 'rxjs/operators';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\nimport { By } from '@angular/platform-browser';\r\nimport { ChangeDetectorRef, Component } from '@angular/core';\r\nimport {FormControl, Validators,FormGroup, FormBuilder, AbstractControl, ValidationErrors} from '@angular/forms';\r\nimport {MatSelectChange} from '@angular/material/select';\r\nimport { UserPostDTO } from 'src/app/models/userPostDTO.model';\r\nimport {MatSlideToggleChange} from '@angular/material/slide-toggle';\r\nimport { MatOption, MatOptionSelectionChange, ThemePalette } from '@angular/material/core';\r\nimport { NgZone } from '@angular/core';\r\n\r\n\r\n\r\ndescribe('RegisterFormComponent', () => {\r\n  let component: RegisterFormComponent;\r\n  let fixture: ComponentFixture<RegisterFormComponent>;\r\n  \r\n\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({\r\n      declarations: [],\r\n      imports: [\r\n        RegisterFormComponent,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        MatIconModule,\r\n        MatInputModule,\r\n        MatFormFieldModule,\r\n        MatButtonModule,\r\n        MatSelectModule,\r\n        MatSlideToggleModule,\r\n        HttpClientModule,\r\n        BrowserAnimationsModule,\r\n        CommonModule\r\n      ],\r\n      providers: [\r\n        { provide: ActivatedRoute, useValue: {} },\r\n        { provide: Router, useValue: {} },\r\n        UserService,\r\n        JwtHelperService,\r\n        MatSnackBar,\r\n      ],\r\n    });\r\n\r\n    fixture = TestBed.createComponent(RegisterFormComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('Should create', () => {\r\n    expect(component).toBeTruthy();\r\n  })\r\n\r\n\r\n  it('Should form fields controls be initially empty/disabled', () => {\r\n    expect(component.createRegisterForm.get('name')?.value).toEqual('');\r\n    expect(component.createRegisterForm.get('surname')?.value).toEqual('');\r\n    expect(component.createRegisterForm.get('username')?.value).toEqual('');\r\n    expect(component.createRegisterForm.get('password')?.value).toEqual('');\r\n    expect(component.createRegisterForm.get('confirmPassword')?.value).toEqual('');\r\n    expect(component.createRegisterForm.get('address')?.value).toEqual('');\r\n    expect(component.createRegisterForm.get('phoneNumber')?.value).toEqual('');\r\n    expect(component.createRegisterForm.get('role')?.value).toEqual('');\r\n    expect(component.createRegisterForm.get('requestNotification')?.disabled).toBeTruthy();\r\n    expect(component.createRegisterForm.get('cancellationNotification')?.disabled).toBeTruthy();\r\n    expect(component.createRegisterForm.get('ownerRatingNotification')?.disabled).toBeTruthy();\r\n    expect(component.createRegisterForm.get('accommodationRatingNotification')?.disabled).toBeTruthy();\r\n    expect(component.createRegisterForm.get('ownerRepliedNotification')?.disabled).toBeTruthy();\r\n\r\n  });\r\n\r\n\r\n\r\n  it('should make input into all form fields', () => {\r\n    let el = fixture.debugElement.query(By.css('[formControlName=\\'username\\']')).nativeElement;\r\n    expect(el.getAttribute('readonly')).toEqual(null);\r\n    el = fixture.debugElement.query(By.css('[formControlName=\\'name\\']')).nativeElement;\r\n    expect(el.getAttribute('readonly')).toEqual(null);\r\n    el = fixture.debugElement.query(By.css('[formControlName=\\'surname\\']')).nativeElement;\r\n    expect(el.getAttribute('readonly')).toEqual(null);\r\n    el = fixture.debugElement.query(By.css('[formControlName=\\'phoneNumber\\']')).nativeElement;\r\n    expect(el.getAttribute('readonly')).toEqual(null);\r\n    el = fixture.debugElement.query(By.css('[formControlName=\\'address\\']')).nativeElement;\r\n    expect(el.getAttribute('readonly')).toEqual(null);\r\n    el = fixture.debugElement.query(By.css('[formControlName=\\'password\\']')).nativeElement;\r\n    expect(el.getAttribute('readonly')).toEqual(null);\r\n    el = fixture.debugElement.query(By.css('[formControlName=\\'confirmPassword\\']')).nativeElement;\r\n    expect(el.getAttribute('readonly')).toEqual(null);\r\n\r\n  });\r\n\r\n\r\n  \r\n  it('should set form validity to false if invalid phone data is provided - incorrect digits number', () => {\r\n    component.createRegisterForm.setValue({\r\n      name: 'John',\r\n      surname: 'Doe',\r\n      phoneNumber: '123', // ne postujemo regex\r\n      address: 'Test Address',\r\n      username: 'test@example.com',\r\n      password: 'password123',\r\n      confirmPassword: 'password123',\r\n      role: 'GUEST',\r\n      requestNotification: true,\r\n      cancellationNotification: false,\r\n      accommodationRatingNotification: false,\r\n      ownerRatingNotification: false,\r\n      ownerRepliedNotification: true,\r\n    });\r\n\r\n    expect(component.isFormValid).toBeFalse();\r\n  });\r\n\r\n\r\n  it('should be false when password mismatch', fakeAsync(() => {\r\n    component.ngOnInit();\r\n    tick();\r\n  \r\n   \r\n    component.createRegisterForm.setValue({\r\n      name: 'John',\r\n      surname: 'Doe',\r\n      phoneNumber: '1234567890', \r\n      address: 'Test Address',\r\n      username: 'test@example.com',\r\n      password: 'password123',\r\n      confirmPassword: 'password456', // Različit od passworda koji treba da je unet\r\n      role: 'GUEST',\r\n      requestNotification: false,\r\n      cancellationNotification: false,\r\n      accommodationRatingNotification: false,\r\n      ownerRatingNotification: false,\r\n      ownerRepliedNotification: true,\r\n    });\r\n  \r\n    expect(component.isFormValid).toBeFalse();\r\n \r\n  }));\r\n\r\n\r\n  it('Should be false for empty password field', fakeAsync(() => {\r\n    component.ngOnInit();\r\n    tick();\r\n  \r\n    \r\n    component.createRegisterForm.setValue({\r\n      name: 'John',\r\n      surname: 'Doe',\r\n      phoneNumber: '1234567890', \r\n      address: 'Test Address',\r\n      username: 'test@example.com',\r\n      password: '',\r\n      confirmPassword: 'password456', \r\n      role: 'GUEST',\r\n      requestNotification: false,\r\n      cancellationNotification: false,\r\n      accommodationRatingNotification: false,\r\n      ownerRatingNotification: false,\r\n      ownerRepliedNotification: true,\r\n    });\r\n  \r\n    expect(component.isFormValid).toBeFalse();\r\n    \r\n  }));\r\n\r\n  it('Should be false for empty confirm password field', fakeAsync(async () => {\r\n    component.ngOnInit();\r\n    tick();\r\n  \r\n    component.createRegisterForm.setValue({\r\n      name: 'John',\r\n      surname: 'Doe',\r\n      phoneNumber: '1234567890', \r\n      address: 'Test Address',\r\n      username: 'test@example.com',\r\n      password: 'password123',\r\n      confirmPassword: '', \r\n      role: 'GUEST',\r\n      requestNotification: false,\r\n      cancellationNotification: false,\r\n      accommodationRatingNotification: false,\r\n      ownerRatingNotification: false,\r\n      ownerRepliedNotification: true,\r\n    });\r\n  \r\n    expect(component.isFormValid).toBeFalse();\r\n      \r\n    \r\n  }));\r\n  \r\n  it('Should be false for empty confirm name field', fakeAsync(async () => {\r\n    component.ngOnInit();\r\n    tick();\r\n  \r\n    component.createRegisterForm.setValue({\r\n      name: '',\r\n      surname: 'Doe',\r\n      phoneNumber: '1234567890', \r\n      address: 'Test Address',\r\n      username: 'test@example.com',\r\n      password: 'password123',\r\n      confirmPassword: 'password123',\r\n      role: 'GUEST',\r\n      requestNotification: false,\r\n      cancellationNotification: false,\r\n      accommodationRatingNotification: false,\r\n      ownerRatingNotification: false,\r\n      ownerRepliedNotification: true,\r\n    });\r\n  \r\n    expect(component.isFormValid).toBeFalse();\r\n      \r\n  }));\r\n\r\n  it('Should be false for empty surname field', fakeAsync(async () => {\r\n    component.ngOnInit();\r\n    tick();\r\n  \r\n    component.createRegisterForm.setValue({\r\n      name: 'John',\r\n      surname: '',\r\n      phoneNumber: '1234567890', \r\n      address: 'Test Address',\r\n      username: 'test@example.com',\r\n      password: 'password123',\r\n      confirmPassword: 'password123',\r\n      role: 'GUEST',\r\n      requestNotification: false,\r\n      cancellationNotification: false,\r\n      accommodationRatingNotification: false,\r\n      ownerRatingNotification: false,\r\n      ownerRepliedNotification: true,\r\n    });\r\n  \r\n    expect(component.isFormValid).toBeFalse();\r\n      \r\n  }));\r\n\r\n  it('Should be false for empty  address field', fakeAsync(async () => {\r\n    component.ngOnInit();\r\n    tick();\r\n  \r\n  \r\n    component.createRegisterForm.setValue({\r\n      name: 'John',\r\n      surname: 'Doe',\r\n      phoneNumber: '1234567890', \r\n      address: '',\r\n      username: 'test@example.com',\r\n      password: 'password123',\r\n      confirmPassword: 'password123',\r\n      role: 'GUEST',\r\n      requestNotification: false,\r\n      cancellationNotification: false,\r\n      accommodationRatingNotification: false,\r\n      ownerRatingNotification: false,\r\n      ownerRepliedNotification: true,\r\n    });\r\n  \r\n    expect(component.isFormValid).toBeFalse();\r\n      \r\n    \r\n  }));\r\n\r\n  it('Should be false for invalid email format', fakeAsync(async () => {\r\n    component.ngOnInit();\r\n    tick();\r\n  \r\n\r\n    component.createRegisterForm.setValue({\r\n      name: 'John',\r\n      surname: 'Doe',\r\n      phoneNumber: '1234567890', \r\n      address: 'Test Address', \r\n      username: 'test', //bez @gmail.com\r\n      password: 'password123',\r\n      confirmPassword: 'password123', \r\n      role: 'GUEST',\r\n      requestNotification: false,\r\n      cancellationNotification: false,\r\n      accommodationRatingNotification: false,\r\n      ownerRatingNotification: false,\r\n      ownerRepliedNotification: true,\r\n    });\r\n  \r\n    expect(component.isFormValid).toBeFalse();\r\n      \r\n    \r\n  }));\r\n\r\n  it('Should be false for invalid email format', fakeAsync(async () => {\r\n    component.ngOnInit();\r\n    tick();\r\n  \r\n    \r\n    component.createRegisterForm.setValue({\r\n      name: 'John',\r\n      surname: 'Doe',\r\n      phoneNumber: '1234567890', \r\n      address: 'Test Address',\r\n      username: '688555',  //samo cifre\r\n      password: 'password123',\r\n      confirmPassword: 'password123', \r\n      role: 'GUEST',\r\n      requestNotification: false,\r\n      cancellationNotification: false,\r\n      accommodationRatingNotification: false,\r\n      ownerRatingNotification: false,\r\n      ownerRepliedNotification: true,\r\n    });\r\n  \r\n    expect(component.isFormValid).toBeFalse();\r\n      \r\n    \r\n  }));\r\n\r\n  it('Should be false for empty email field', fakeAsync(async () => {\r\n    component.ngOnInit();\r\n    tick();\r\n  \r\n    \r\n    component.createRegisterForm.setValue({\r\n      name: 'John',\r\n      surname: 'Doe',\r\n      phoneNumber: '1234567890', \r\n      address: 'Test Address',\r\n      username: '',  //samo cifre\r\n      password: 'password123',\r\n      confirmPassword: 'password123', \r\n      role: 'GUEST',\r\n      requestNotification: false,\r\n      cancellationNotification: false,\r\n      accommodationRatingNotification: false,\r\n      ownerRatingNotification: false,\r\n      ownerRepliedNotification: true,\r\n    });\r\n  \r\n    expect(component.isFormValid).toBeFalse();\r\n      \r\n    \r\n  }));\r\n\r\n  it('Should be false for not selected role', fakeAsync(async () => {\r\n    component.ngOnInit();\r\n    tick();\r\n  \r\n    \r\n    component.createRegisterForm.setValue({\r\n      name: 'John',\r\n      surname: 'Doe',\r\n      phoneNumber: '1234567890', \r\n      address: 'Test Address',\r\n      username: 'vesna@gmail.com',  //samo cifre\r\n      password: 'password123',\r\n      confirmPassword: 'password123', \r\n      role: '',\r\n      requestNotification: false,\r\n      cancellationNotification: false,\r\n      accommodationRatingNotification: false,\r\n      ownerRatingNotification: false,\r\n      ownerRepliedNotification: true,\r\n    });\r\n  \r\n    expect(component.isFormValid).toBeFalse();\r\n      \r\n  }));\r\n\r\n \r\n\r\n\r\n\r\n  it('Test toggle button depending on roles', fakeAsync(async () => {\r\n    component.ngOnInit();\r\n    tick();\r\n  \r\n    \r\n    component.createRegisterForm.setValue({\r\n      name: 'John',\r\n      surname: 'Doe',\r\n      phoneNumber: '1234567890', \r\n      address: 'Test Address',\r\n      username: 'vesna@gmail.com', \r\n      password: 'password123',\r\n      confirmPassword: 'password123', \r\n      role: 'ADMIN',  //ROLE ADMIN  \r\n      requestNotification: false,\r\n      cancellationNotification: false,\r\n      accommodationRatingNotification: false,\r\n      ownerRatingNotification: false,\r\n      ownerRepliedNotification: true,\r\n    });\r\n\r\n    //expect(component.isFormValid).toBeFalse();\r\n    expect(component.createRegisterForm.get('requestNotification')?.disabled).toBeTruthy();\r\n    expect(component.createRegisterForm.get('cancellationNotification')?.disabled).toBeTruthy();\r\n    expect(component.createRegisterForm.get('ownerRatingNotification')?.disabled).toBeTruthy();\r\n    expect(component.createRegisterForm.get('accommodationRatingNotification')?.disabled).toBeTruthy();\r\n    expect(component.createRegisterForm.get('ownerRepliedNotification')?.disabled).toBeTruthy();\r\n    component.createRegisterForm.get('role')?.setValue(\"Owner\")\r\n  \r\n\r\n    // component.createRegisterForm.setValue({\r\n    //   name: 'John',\r\n    //   surname: 'Doe',\r\n    //   phoneNumber: '1234567890', \r\n    //   address: 'Test Address',\r\n    //   username: 'vesna@gmail.com', \r\n    //   password: 'password123',\r\n    //   confirmPassword: 'password123', \r\n    //   role: 'OWNER',  //ROLE OWNER\r\n    //   requestNotification: false,\r\n    //   cancellationNotification: false,\r\n    //   accommodationRatingNotification: false,\r\n    //   ownerRatingNotification: false,\r\n    //   ownerRepliedNotification: true,\r\n    // });\r\n  \r\n   // expect(component.isFormValid).toBeFalse();\r\n    expect(component.createRegisterForm.get('requestNotification')?.disabled).toBeTruthy();\r\n    expect(component.createRegisterForm.get('cancellationNotification')?.disabled).toBeTruthy();\r\n    expect(component.createRegisterForm.get('ownerRatingNotification')?.disabled).toBeTruthy();\r\n    expect(component.createRegisterForm.get('accommodationRatingNotification')?.disabled).toBeTruthy();\r\n    expect(component.createRegisterForm.get('ownerRepliedNotification')?.disabled).toBeTruthy();\r\n    component.createRegisterForm.get('role')?.setValue(\"Guest\")\r\n\r\n   \r\n    // component.createRegisterForm.setValue({\r\n    //   name: 'John',\r\n    //   surname: 'Doe',\r\n    //   phoneNumber: '1234567890', \r\n    //   address: 'Test Address',\r\n    //   username: 'vesna@gmail.com', \r\n    //   password: 'password123',\r\n    //   confirmPassword: 'password123', \r\n    //   role: 'GUEST',  //ROLE GUEST\r\n    //   requestNotification: false,\r\n    //   cancellationNotification: false,\r\n    //   accommodationRatingNotification: false,\r\n    //   ownerRatingNotification: false,\r\n    //   ownerRepliedNotification: true,\r\n    // });\r\n  \r\n    //expect(component.isFormValid).toBeFalse();\r\n    expect(component.createRegisterForm.get('requestNotification')?.disabled).toBeTruthy();\r\n    expect(component.createRegisterForm.get('cancellationNotification')?.disabled).toBeTruthy();\r\n    expect(component.createRegisterForm.get('ownerRatingNotification')?.disabled).toBeTruthy();\r\n    expect(component.createRegisterForm.get('accommodationRatingNotification')?.disabled).toBeTruthy();\r\n    expect(component.createRegisterForm.get('ownerRepliedNotification')?.disabled).toBeTruthy();\r\n      \r\n  }));\r\n\r\n\r\n  it('Should be valid for all valid data', fakeAsync(async () => {\r\n    component.ngOnInit();\r\n    tick();\r\n  \r\n    \r\n    component.createRegisterForm.setValue({\r\n      name: 'John',\r\n      surname: 'Doe',\r\n      phoneNumber: '1234567890', \r\n      address: 'Test Address',\r\n      username: 'vesna@gmail.com',  //samo cifre\r\n      password: 'password123',\r\n      confirmPassword: 'password123', \r\n      role: 'ADMIN',\r\n      requestNotification: false,\r\n      cancellationNotification: false,\r\n      accommodationRatingNotification: false,\r\n      ownerRatingNotification: false,\r\n      ownerRepliedNotification: true,\r\n    });\r\n  \r\n    expect(component.isFormValid).toBeTruthy();\r\n    component.ngOnInit();\r\n    tick();\r\n    const registrationButton = fixture.debugElement.query(By.css('button[mat-raised-button]')).nativeElement;\r\n    // expect(registrationButton.disabled).toBeFalsy();\r\n    registrationButton.click();\r\n\r\n    // Proveri da li je funkcija za registraciju pozvana\r\n    expect(component.register).toHaveBeenCalled();\r\n      \r\n  }));\r\n\r\n  \r\n\r\n  \r\n\r\n \r\n\r\n\r\n\r\n });\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}