{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/USER/Desktop/Front-end/ProjectApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ComponentHarness, HarnessPredicate } from '@angular/cdk/testing';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nclass _MatSlideToggleHarnessBase extends ComponentHarness {\n  constructor() {\n    super(...arguments);\n    this._label = this.locatorFor('label');\n  }\n  /** Whether the slide-toggle is disabled. */\n  isDisabled() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const disabled = (yield _this._nativeElement()).getAttribute('disabled');\n      return coerceBooleanProperty(yield disabled);\n    })();\n  }\n  /** Whether the slide-toggle is required. */\n  isRequired() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const required = (yield _this2._nativeElement()).getAttribute('required');\n      return coerceBooleanProperty(yield required);\n    })();\n  }\n  /** Whether the slide-toggle is valid. */\n  isValid() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const invalid = (yield _this3.host()).hasClass('ng-invalid');\n      return !(yield invalid);\n    })();\n  }\n  /** Gets the slide-toggle's name. */\n  getName() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      return (yield _this4._nativeElement()).getAttribute('name');\n    })();\n  }\n  /** Gets the slide-toggle's aria-label. */\n  getAriaLabel() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      return (yield _this5._nativeElement()).getAttribute('aria-label');\n    })();\n  }\n  /** Gets the slide-toggle's aria-labelledby. */\n  getAriaLabelledby() {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      return (yield _this6._nativeElement()).getAttribute('aria-labelledby');\n    })();\n  }\n  /** Gets the slide-toggle's label text. */\n  getLabelText() {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      return (yield _this7._label()).text();\n    })();\n  }\n  /** Focuses the slide-toggle. */\n  focus() {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      return (yield _this8._nativeElement()).focus();\n    })();\n  }\n  /** Blurs the slide-toggle. */\n  blur() {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      return (yield _this9._nativeElement()).blur();\n    })();\n  }\n  /** Whether the slide-toggle is focused. */\n  isFocused() {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      return (yield _this10._nativeElement()).isFocused();\n    })();\n  }\n  /**\n   * Puts the slide-toggle in a checked state by toggling it if it is currently unchecked, or doing\n   * nothing if it is already checked.\n   */\n  check() {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      if (!(yield _this11.isChecked())) {\n        yield _this11.toggle();\n      }\n    })();\n  }\n  /**\n   * Puts the slide-toggle in an unchecked state by toggling it if it is currently checked, or doing\n   * nothing if it is already unchecked.\n   */\n  uncheck() {\n    var _this12 = this;\n    return _asyncToGenerator(function* () {\n      if (yield _this12.isChecked()) {\n        yield _this12.toggle();\n      }\n    })();\n  }\n}\n/** Harness for interacting with a MDC-based mat-slide-toggle in tests. */\nclass MatSlideToggleHarness extends _MatSlideToggleHarnessBase {\n  constructor() {\n    super(...arguments);\n    this._nativeElement = this.locatorFor('button');\n  }\n  static #_ = this.hostSelector = '.mat-mdc-slide-toggle';\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a slide-toggle w/ specific attributes.\n   * @param options Options for narrowing the search:\n   *   - `selector` finds a slide-toggle whose host element matches the given selector.\n   *   - `label` finds a slide-toggle with specific label text.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options = {}) {\n    return new HarnessPredicate(this, options).addOption('label', options.label, (harness, label) => HarnessPredicate.stringMatches(harness.getLabelText(), label))\n    // We want to provide a filter option for \"name\" because the name of the slide-toggle is\n    // only set on the underlying input. This means that it's not possible for developers\n    // to retrieve the harness of a specific checkbox with name through a CSS selector.\n    .addOption('name', options.name, /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (harness, name) {\n        return (yield harness.getName()) === name;\n      });\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()).addOption('checked', options.checked, /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (harness, checked) {\n        return (yield harness.isChecked()) == checked;\n      });\n      return function (_x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }()).addOption('disabled', options.disabled, /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (harness, disabled) {\n        return (yield harness.isDisabled()) == disabled;\n      });\n      return function (_x5, _x6) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  }\n  toggle() {\n    var _this13 = this;\n    return _asyncToGenerator(function* () {\n      return (yield _this13._nativeElement()).click();\n    })();\n  }\n  isRequired() {\n    var _this14 = this;\n    return _asyncToGenerator(function* () {\n      const ariaRequired = yield (yield _this14._nativeElement()).getAttribute('aria-required');\n      return ariaRequired === 'true';\n    })();\n  }\n  isChecked() {\n    var _this15 = this;\n    return _asyncToGenerator(function* () {\n      const checked = (yield _this15._nativeElement()).getAttribute('aria-checked');\n      return coerceBooleanProperty(yield checked);\n    })();\n  }\n}\nexport { MatSlideToggleHarness, _MatSlideToggleHarnessBase };","map":{"version":3,"names":["ComponentHarness","HarnessPredicate","coerceBooleanProperty","_MatSlideToggleHarnessBase","constructor","arguments","_label","locatorFor","isDisabled","_this","_asyncToGenerator","disabled","_nativeElement","getAttribute","isRequired","_this2","required","isValid","_this3","invalid","host","hasClass","getName","_this4","getAriaLabel","_this5","getAriaLabelledby","_this6","getLabelText","_this7","text","focus","_this8","blur","_this9","isFocused","_this10","check","_this11","isChecked","toggle","uncheck","_this12","MatSlideToggleHarness","_","hostSelector","with","options","addOption","label","harness","stringMatches","name","_ref","_x","_x2","apply","checked","_ref2","_x3","_x4","_ref3","_x5","_x6","_this13","click","_this14","ariaRequired","_this15"],"sources":["C:/Users/USER/Desktop/Front-end/ProjectApp/node_modules/@angular/material/fesm2022/slide-toggle/testing.mjs"],"sourcesContent":["import { ComponentHarness, HarnessPredicate } from '@angular/cdk/testing';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\nclass _MatSlideToggleHarnessBase extends ComponentHarness {\n    constructor() {\n        super(...arguments);\n        this._label = this.locatorFor('label');\n    }\n    /** Whether the slide-toggle is disabled. */\n    async isDisabled() {\n        const disabled = (await this._nativeElement()).getAttribute('disabled');\n        return coerceBooleanProperty(await disabled);\n    }\n    /** Whether the slide-toggle is required. */\n    async isRequired() {\n        const required = (await this._nativeElement()).getAttribute('required');\n        return coerceBooleanProperty(await required);\n    }\n    /** Whether the slide-toggle is valid. */\n    async isValid() {\n        const invalid = (await this.host()).hasClass('ng-invalid');\n        return !(await invalid);\n    }\n    /** Gets the slide-toggle's name. */\n    async getName() {\n        return (await this._nativeElement()).getAttribute('name');\n    }\n    /** Gets the slide-toggle's aria-label. */\n    async getAriaLabel() {\n        return (await this._nativeElement()).getAttribute('aria-label');\n    }\n    /** Gets the slide-toggle's aria-labelledby. */\n    async getAriaLabelledby() {\n        return (await this._nativeElement()).getAttribute('aria-labelledby');\n    }\n    /** Gets the slide-toggle's label text. */\n    async getLabelText() {\n        return (await this._label()).text();\n    }\n    /** Focuses the slide-toggle. */\n    async focus() {\n        return (await this._nativeElement()).focus();\n    }\n    /** Blurs the slide-toggle. */\n    async blur() {\n        return (await this._nativeElement()).blur();\n    }\n    /** Whether the slide-toggle is focused. */\n    async isFocused() {\n        return (await this._nativeElement()).isFocused();\n    }\n    /**\n     * Puts the slide-toggle in a checked state by toggling it if it is currently unchecked, or doing\n     * nothing if it is already checked.\n     */\n    async check() {\n        if (!(await this.isChecked())) {\n            await this.toggle();\n        }\n    }\n    /**\n     * Puts the slide-toggle in an unchecked state by toggling it if it is currently checked, or doing\n     * nothing if it is already unchecked.\n     */\n    async uncheck() {\n        if (await this.isChecked()) {\n            await this.toggle();\n        }\n    }\n}\n/** Harness for interacting with a MDC-based mat-slide-toggle in tests. */\nclass MatSlideToggleHarness extends _MatSlideToggleHarnessBase {\n    constructor() {\n        super(...arguments);\n        this._nativeElement = this.locatorFor('button');\n    }\n    static { this.hostSelector = '.mat-mdc-slide-toggle'; }\n    /**\n     * Gets a `HarnessPredicate` that can be used to search for a slide-toggle w/ specific attributes.\n     * @param options Options for narrowing the search:\n     *   - `selector` finds a slide-toggle whose host element matches the given selector.\n     *   - `label` finds a slide-toggle with specific label text.\n     * @return a `HarnessPredicate` configured with the given options.\n     */\n    static with(options = {}) {\n        return (new HarnessPredicate(this, options)\n            .addOption('label', options.label, (harness, label) => HarnessPredicate.stringMatches(harness.getLabelText(), label))\n            // We want to provide a filter option for \"name\" because the name of the slide-toggle is\n            // only set on the underlying input. This means that it's not possible for developers\n            // to retrieve the harness of a specific checkbox with name through a CSS selector.\n            .addOption('name', options.name, async (harness, name) => (await harness.getName()) === name)\n            .addOption('checked', options.checked, async (harness, checked) => (await harness.isChecked()) == checked)\n            .addOption('disabled', options.disabled, async (harness, disabled) => (await harness.isDisabled()) == disabled));\n    }\n    async toggle() {\n        return (await this._nativeElement()).click();\n    }\n    async isRequired() {\n        const ariaRequired = await (await this._nativeElement()).getAttribute('aria-required');\n        return ariaRequired === 'true';\n    }\n    async isChecked() {\n        const checked = (await this._nativeElement()).getAttribute('aria-checked');\n        return coerceBooleanProperty(await checked);\n    }\n}\n\nexport { MatSlideToggleHarness, _MatSlideToggleHarnessBase };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}